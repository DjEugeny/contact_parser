#!/usr/bin/env python3

"""
üîß –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ç–æ—á–µ—á–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ advanced_email_fetcher_fixed.py
"""

import re

# –§–∞–π–ª –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
input_file = 'src/advanced_email_fetcher_fixed.py'

# –ß—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
with open(input_file, 'r', encoding='utf-8') as f:
    content = f.read()

# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö
content = content.replace('–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π IMAP-–ø–∞—Ä—Å–µ—Ä v2.11', '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π IMAP-–ø–∞—Ä—Å–µ—Ä v2.12')
content = content.replace('üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä v2.11', 'üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä v2.12')
content = content.replace('v2.11 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í', 'v2.12 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í')

# 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è '.gif' –≤ —Å–ø–∏—Å–æ–∫ EXCLUDED_EXTENSIONS
content = content.replace(
    "'.iso', '.img',  # –û–±—Ä–∞–∑—ã –¥–∏—Å–∫–æ–≤\n}",
    "'.iso', '.img',  # –û–±—Ä–∞–∑—ã –¥–∏—Å–∫–æ–≤\n    '.gif',  # GIF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n}"
)

# 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ specific_excluded_files –≤ __init__ –º–µ—Ç–æ–¥
init_pattern = r'def __init__\(self, logger\):(.*?)# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
replacement = lambda m: m.group(0).replace(
    "self.filters = EmailFilters(self.config_dir, self.logger)\n",
    """self.filters = EmailFilters(self.config_dir, self.logger)

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        self.specific_excluded_files = {
            "WRD0004.jpg",   # –ú—É—Å–æ—Ä–Ω—ã–π —Ñ–∞–π–ª Microsoft
            "_.jpg",         # –§–∞–π–ª, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            "blocked.gif",   # –ú—É—Å–æ—Ä–Ω—ã–π GIF —Ñ–∞–π–ª
            "image001.png",  # –ú—É—Å–æ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–æ–¥–ø–∏—Å–∏
            "image002.png"   # –ú—É—Å–æ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–æ–¥–ø–∏—Å–∏
        }
"""
)

content = re.sub(init_pattern, replacement, content, flags=re.DOTALL)

# 4. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ specific_excluded_files –≤ –º–µ—Ç–æ–¥–µ save_attachment_or_inline
attachment_pattern = r'# –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞\s+filename = self\.decode_header_value\(filename\)'
replacement = '''# –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = self.decode_header_value(filename)
            
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
            if filename in self.specific_excluded_files:
                self.logger.info(f"üö´ –ò–°–ö–õ–Æ–ß–ï–ù–û –ü–û –ò–ú–ï–ù–ò –§–ê–ô–õ–ê: {filename} - –≤ —Å–ø–∏—Å–∫–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
                self.stats['excluded_filenames'] += 1
                return {
                    "original_filename": filename,
                    "status": "excluded_by_name",
                    "exclusion_reason": f"–∏–º—è —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π",
                    "is_inline": is_inline
                }'''

content = content.replace('# –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞\n            filename = self.decode_header_value(filename)', replacement)

# 5. –£–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ is_filename_excluded –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
filename_pattern = r'def is_filename_excluded\(self, filename: str\)(.*?)def is_internal_mass_mailing'
replacement = '''def is_filename_excluded(self, filename: str) -> Optional[str]:
        """üö´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π"""
        if not filename or not self.filename_excludes:
            return None

        # ‚úÖ –î–û–ë–ê–í–ò–¢–¨: –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ '{filename}' –ø—Ä–æ—Ç–∏–≤ {len(self.filename_excludes)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")

        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞
        if filename in ['_', '_', '__', '___', '____', '_____', '-', '--', '---', '----', '....', '----']:
            self.logger.info(f"üö´ –§–ê–ô–õ –ò–°–ö–õ–Æ–ß–ï–ù –ü–û –ö–û–†–û–¢–ö–û–ú–£ –ò–ú–ï–ù–ò: {filename}")
            return f"–∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–º—É –∏—Å–∫–ª—é—á–µ–Ω–∏—é '{filename}'"
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        for exclude_pattern in self.filename_excludes:
            if '*' in exclude_pattern:
                # Wildcard –ø–∞—Ç—Ç–µ—Ä–Ω
                if fnmatch.fnmatch(filename.lower(), exclude_pattern.lower()):
                    self.logger.info(f"üö´ –§–ê–ô–õ –ò–°–ö–õ–Æ–ß–ï–ù –ü–û –ü–ê–¢–¢–ï–†–ù–£: {filename} ‚Üí {exclude_pattern}")
                    return f"–∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É '{exclude_pattern}'"
            else:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if filename.lower() == exclude_pattern.lower():  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                    self.logger.info(f"üö´ –§–ê–ô–õ –ò–°–ö–õ–Æ–ß–ï–ù –ü–û –¢–û–ß–ù–û–ú–£ –ò–ú–ï–ù–ò: {filename}")
                    return f"–∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '{exclude_pattern}'"

        # ‚úÖ –î–û–ë–ê–í–ò–¢–¨: –ª–æ–≥ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        self.logger.debug(f"‚úÖ –§–∞–π–ª '{filename}' –ø—Ä–æ—à–µ–ª –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–º–µ–Ω")
        return None


    def is_internal_mass_mailing'''

content = re.sub(filename_pattern, replacement, content, flags=re.DOTALL)

# 6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ main
info_pattern = r'logger\.info\("üîß –ò–°–ü–†–ê–í–õ–ï–ù–´: —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, decode_header_value, extract_raw_email"\)'
replacement = 'logger.info("üîß –ò–°–ü–†–ê–í–õ–ï–ù–´: —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, decode_header_value, extract_raw_email, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è GIF, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã")'
content = content.replace(info_pattern, replacement)

# 7. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
final_pattern = r'logger\.info\("   ‚úÖ –£–±—Ä–∞–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ process_single_email"\)'
replacement = '''logger.info("   ‚úÖ –£–±—Ä–∞–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ process_single_email")
            logger.info("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ê —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è GIF —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ EXCLUDED_EXTENSIONS")
            logger.info("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ specific_excluded_files")'''
content = content.replace(final_pattern, replacement)

# –ó–∞–ø–∏—Å—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
with open(input_file, 'w', encoding='utf-8') as f:
    f.write(content)

print("‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã")
