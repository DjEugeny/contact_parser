#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô LLM —Ç–µ—Å—Ç–µ—Ä - –±–µ–∑ –ø–µ—Ä–µ–ø—É—Ç—ã–≤–∞–Ω–∏—è –ø–∏—Å–µ–º –∏ –≤–ª–æ–∂–µ–Ω–∏–π
"""

import json
import requests
import sys
import os
from pathlib import Path
from typing import Dict, List, Optional

sys.path.append(str(Path(__file__).parent))
from email_loader import ProcessedEmailLoader

class CommercialOfferLLMTester:
    """ü§ñ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        # OpenRouter –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.api_key = "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"
        self.model = "qwen/qwen3-235b-a22b:free"
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        
        self.headers = {
            'Authorization': f'Bearer {self.api_key}',
            'Content-Type': 'application/json',
            'HTTP-Referer': 'https://localhost:3000',
            'X-Title': 'Email Parser LLM Test'
        }
        
        self.email_loader = ProcessedEmailLoader()
        self.data_dir = Path("data")
        self.results_dir = self.data_dir / "llm_test_results"
        self.results_dir.mkdir(parents=True, exist_ok=True)
        
        self.prompt = self.load_commercial_prompt()
        
        print(f"ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenRouter:")
        print(f"   API –∫–ª—é—á: {self.api_key[:20]}...")
        print(f"   –ú–æ–¥–µ–ª—å: {self.model}")
        print(f"   Endpoint: {self.base_url}")
    
    def load_commercial_prompt(self) -> str:
        """üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        return """
üè¢ –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –≤ —Å—Ñ–µ—Ä–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.

üéØ –ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–∏—Å—å–º–æ + –≤–ª–æ–∂–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∏:
1. –ö–û–ù–¢–ê–ö–¢–ù–´–ï –î–ê–ù–ù–´–ï  
2. –ö–û–ú–ú–ï–†–ß–ï–°–ö–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã)
3. –û–ë–©–ò–ô –ö–û–ù–¢–ï–ö–°–¢

üìä –°–¢–†–£–ö–¢–£–†–ê –ê–ù–ê–õ–ò–ó–ê:

### 1. –ö–û–ù–¢–ê–ö–¢–´:
- –§–ò–û –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
- Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
- –¢–µ–ª–µ—Ñ–æ–Ω (–µ—Å–ª–∏ –µ—Å—Ç—å)
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
- –î–æ–ª–∂–Ω–æ—Å—Ç—å  
- –ì–æ—Ä–æ–¥

### 2. –ö–û–ú–ú–ï–†–ß–ï–°–ö–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:
‚ö° –ò—â–∏ —Å–ª–æ–≤–æ "–∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä" (–ª—é–±–æ–π —Ä–µ–≥–∏—Å—Ç—Ä)
–ï–°–õ–ò –ù–ê–ô–î–ï–ù–û - –∏–∑–≤–ª–µ–∫–∞–π:
- ‚Ññ –ö–ü (–∏–ª–∏ "–±/–Ω") 
- –î–∞—Ç–∞ –ö–ü
- –ö–æ–Ω–µ—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
- –ì–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü–æ—Å—Ä–µ–¥–Ω–∏–∫
- –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã
- –°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏
- –î–æ—Å—Ç–∞–≤–∫–∞
- –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ
- –ö—Ç–æ –≤—ã—Å—Ç–∞–≤–∏–ª
- –î–∞–Ω–Ω—ã–µ –ø–æ –∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É (–∞—Ä—Ç–∏–∫—É–ª, –º–æ–¥–µ–ª—å, —Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)

### 3. –ö–û–ù–¢–ï–ö–°–¢:
- –¢–µ–º–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
- –°—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –°—Ç–∞—Ç—É—Å (–∑–∞–ø—Ä–æ—Å/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: —Å—Ç—Ä–æ–≥–æ JSON
{
  "contacts": {
    "sender_name": "–§–ò–û",
    "sender_email": "email@company.ru", 
    "sender_phone": "+7-xxx-xxx-xx-xx",
    "sender_organization": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏",
    "sender_position": "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
    "sender_city": "–ì–æ—Ä–æ–¥"
  },
  "commercial_offer": {
    "found": true/false,
    "amplifier_found": true/false,
    "data": {
      "offer_number": "123" –∏–ª–∏ "–±/–Ω",
      "offer_date": "2025-07-30",
      "end_user": "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
      "end_user_city": "–ì–æ—Ä–æ–¥",
      "intermediary": "–ü–æ—Å—Ä–µ–¥–Ω–∏–∫",
      "payment_terms": "–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã", 
      "delivery_time": "–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏",
      "delivery_terms": "–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏",
      "valid_until": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è",
      "issuer": "–ö—Ç–æ –≤—ã—Å—Ç–∞–≤–∏–ª",
      "amplifier_data": {
        "model": "–ú–æ–¥–µ–ª—å –∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞",
        "article": "–ê—Ä—Ç–∏–∫—É–ª",
        "price": "–¶–µ–Ω–∞",
        "quantity": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
        "specifications": "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
      }
    }
  },
  "context": {
    "subject": "–¢–µ–º–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏",
    "request_summary": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏",
    "status": "–∑–∞–ø—Ä–æ—Å/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ/–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
    "priority": "–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π"
  }
}
"""
    
    def test_specific_email(self, date: str, email_number: int) -> Dict:
        """üß™ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not self.test_connection():
            return {
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenRouter'
            }
        
        print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ #{email_number} –∑–∞ {date}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –∑–∞ –¥–∞—Ç—É
        emails = self.email_loader.load_emails_by_date(date)
        
        if not emails or email_number > len(emails):
            return {
                'error': f'–ü–∏—Å—å–º–æ #{email_number} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {date}. –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {len(emails)}'
            }
        
        # –ë–µ—Ä–µ–º –Ω—É–∂–Ω–æ–µ –ø–∏—Å—å–º–æ
        target_email = emails[email_number - 1]
        
        print(f"üìß –û—Ç: {target_email.get('from', '')[:50]}...")
        print(f"üìß –¢–µ–º–∞: {target_email.get('subject', '')[:60]}...")
        
        # üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º OCR —Ç–µ–∫—Å—Ç—ã –ù–ê–ü–†–Ø–ú–£–Æ –∏–∑ JSON –ø–∏—Å—å–º–∞
        extracted_texts = self.load_extracted_texts_from_email_json(target_email, date)
        
        print(f"üìé –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–∏–π –≤ –ø–∏—Å—å–º–µ: {len(target_email.get('attachments', []))}")
        print(f"üìé –ù–∞–π–¥–µ–Ω–æ OCR —Ç–µ–∫—Å—Ç–æ–≤: {len(extracted_texts)}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–æ —è–≤–Ω–æ
        if len(target_email.get('attachments', [])) == 0:
            print(f"üì≠ –í —ç—Ç–æ–º –ø–∏—Å—å–º–µ –ù–ï–¢ –í–õ–û–ñ–ï–ù–ò–ô - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LLM
        result = self.test_single_email_with_attachments(target_email, extracted_texts)
        
        return result
    
    def load_extracted_texts_from_email_json(self, email_data: Dict, date: str) -> List[str]:
        """üìÑ üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ OCR —Ç–µ–∫—Å—Ç–æ–≤ –ò–ó –°–ê–ú–û–ì–û JSON –ü–ò–°–¨–ú–ê"""
        
        extracted_texts = []
        attachments = email_data.get('attachments', [])
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π –≤ JSON - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not attachments:
            print(f"üì≠ –í JSON –ø–∏—Å—å–º–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π")
            return []
        
        print(f"üìé –í JSON –ø–∏—Å—å–º–∞ –Ω–∞–π–¥–µ–Ω–æ {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏–π:")
        
        for idx, attachment in enumerate(attachments, 1):
            filename = attachment.get('original_filename', f'attachment_{idx}')
            status = attachment.get('status', 'unknown')
            
            print(f"   {idx}. {filename} (—Å—Ç–∞—Ç—É—Å: {status})")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
            if status == 'saved':
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π OCR —Ç–µ–∫—Å—Ç
                ocr_text = self.find_ocr_text_for_attachment(date, filename, idx)
                if ocr_text:
                    extracted_texts.append(ocr_text)
                    print(f"      ‚úÖ OCR —Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω: {len(ocr_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    print(f"      ‚ö†Ô∏è OCR —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"      üö´ –ü—Ä–æ–ø—É—Å–∫ - —Å—Ç–∞—Ç—É—Å: {status}")
        
        return extracted_texts
    
    def find_ocr_text_for_attachment(self, date: str, original_filename: str, attachment_idx: int) -> Optional[str]:
        """üîç –ü–æ–∏—Å–∫ OCR —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è"""
        
        extracted_texts_dir = Path("data/attachment_quality/extracted_texts")
        date_dir = extracted_texts_dir / date
        
        if not date_dir.exists():
            return None
        
        # –ò—â–µ–º —Ñ–∞–π–ª OCR —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
        possible_patterns = [
            f"*att_{attachment_idx:02d}_*{Path(original_filename).stem}*.txt",
            f"*att_{attachment_idx:02d}_*.txt"
        ]
        
        for pattern in possible_patterns:
            text_files = list(date_dir.glob(pattern))
            if text_files:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                text_file = text_files[0]
                try:
                    with open(text_file, 'r', encoding='utf-8') as f:
                        text = f.read().strip()
                        if text:
                            return text
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {text_file}: {e}")
        
        return None
    
    def test_connection(self) -> bool:
        """üîå –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        
        print(f"üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenRouter...")
        
        test_payload = {
            "model": self.model,
            "messages": [
                {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."}
            ],
            "max_tokens": 50
        }
        
        try:
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json=test_payload,
                timeout=30
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ú–æ–¥–µ–ª—å {self.model} –¥–æ—Å—Ç—É–ø–Ω–∞")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   –î–µ—Ç–∞–ª–∏: {error_data}")
                except:
                    print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def test_single_email_with_attachments(self, email_data: Dict, extracted_texts: List[str]) -> Dict:
        """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        email_text = email_data.get('body', '')
        
        combined_text = f"""
=== –û–°–ù–û–í–ù–û–ï –ü–ò–°–¨–ú–û ===
–û—Ç: {email_data.get('from', '')}
–ö–æ–º—É: {email_data.get('to', '')}
–¢–µ–º–∞: {email_data.get('subject', '')}
–î–∞—Ç–∞: {email_data.get('date', '')}

–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞:
{email_text}
"""
        
        if extracted_texts:
            combined_text += "\n=== –°–û–î–ï–†–ñ–ò–ú–û–ï –í–õ–û–ñ–ï–ù–ò–ô ==="
            for i, attachment_text in enumerate(extracted_texts, 1):
                combined_text += f"\n\n--- –í–õ–û–ñ–ï–ù–ò–ï {i} ---\n{attachment_text}"
        else:
            combined_text += "\n=== –í–õ–û–ñ–ï–ù–ò–ô –ù–ï–¢ ==="
        
        print(f"üìù –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è LLM: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ LLM
        llm_result = self.send_to_llm(combined_text)
        
        return {
            'email_id': email_data.get('thread_id'),
            'from': email_data.get('from'),
            'subject': email_data.get('subject'),
            'date': email_data.get('date'),
            'real_attachments_count': len(email_data.get('attachments', [])),  # üîß –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            'ocr_texts_found': len(extracted_texts),  # üîß –ù–∞–π–¥–µ–Ω–æ OCR —Ç–µ–∫—Å—Ç–æ–≤
            'combined_text_length': len(combined_text),
            'llm_analysis': llm_result
        }
    
    def send_to_llm(self, text: str) -> Dict:
        """ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OpenRouter"""
        
        try:
            payload = {
                "model": self.model,
                "messages": [
                    {"role": "system", "content": self.prompt},
                    {"role": "user", "content": text}
                ],
                "temperature": 0.1,
                "max_tokens": 3000,
                "top_p": 1.0,
                "frequency_penalty": 0.0,
                "presence_penalty": 0.0
            }
            
            print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenRouter...")
            print(f"   –ú–æ–¥–µ–ª—å: {self.model}")
            print(f"   –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json=payload,
                timeout=120
            )
            
            print(f"   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                
                if 'choices' in result and len(result['choices']) > 0:
                    llm_response = result['choices'][0]['message']['content']
                    
                    try:
                        parsed_result = json.loads(llm_response)
                        return {
                            'success': True,
                            'data': parsed_result,
                            'tokens_used': result.get('usage', {}).get('total_tokens', 0),
                            'model': self.model
                        }
                    except json.JSONDecodeError as e:
                        return {
                            'success': False,
                            'error': f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {str(e)}',
                            'raw_response': llm_response[:500],
                            'model': self.model
                        }
                else:
                    return {
                        'success': False,
                        'error': '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞',
                        'raw_response': str(result)[:500]
                    }
            else:
                error_detail = ""
                try:
                    error_data = response.json()
                    error_detail = error_data.get('error', {}).get('message', 'Unknown error')
                except:
                    error_detail = response.text[:200]
                
                return {
                    'success': False,
                    'error': f'HTTP {response.status_code}: {error_detail}',
                    'status_code': response.status_code
                }
                
        except Exception as e:
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞: {str(e)}'
            }
    
    def show_available_emails(self, date: str):
        """üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏—Å—å–º–∞ –∑–∞ –¥–∞—Ç—É —Å –†–ï–ê–õ–¨–ù–´–ú –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–ª–æ–∂–µ–Ω–∏–π"""
        
        emails = self.email_loader.load_emails_by_date(date)
        
        print(f"\nüìÖ –ü–∏—Å—å–º–∞ –∑–∞ {date} —Å –†–ï–ê–õ–¨–ù–´–ú –ø–æ–¥—Å—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–∏–π:")
        print("="*70)
        
        for i, email in enumerate(emails, 1):
            from_addr = email.get('from', 'N/A')[:40]
            subject = email.get('subject', 'N/A')[:50]
            
            # üîß –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø–æ–¥—Å—á–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π –∏–∑ JSON
            real_attachments = email.get('attachments', [])
            saved_attachments = [att for att in real_attachments if att.get('status') == 'saved']
            
            print(f"{i:2d}. –û—Ç: {from_addr}...")
            print(f"    –¢–µ–º–∞: {subject}...")
            print(f"    üìé –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–∏–π: {len(real_attachments)}")
            print(f"    ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö: {len(saved_attachments)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –≤–ª–æ–∂–µ–Ω–∏–π
            if saved_attachments:
                print(f"    üìÅ –¢–∏–ø—ã: {', '.join(set(att.get('file_type', 'unknown').split('/')[-1] for att in saved_attachments))}")
            print()


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    
    print("ü§ñ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¢–ï–°–¢–ï–† OPENROUTER (–ë–ï–ó –ü–£–¢–ê–ù–ò–¶–´ –ü–ò–°–ï–ú)")
    print("="*70)
    
    tester = CommercialOfferLLMTester()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    available_dates = tester.email_loader.get_available_date_folders()
    print(f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {available_dates}")
    
    if not available_dates:
        print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not tester.test_connection():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ OpenRouter!")
        return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    while True:
        print(f"\nüéØ –ú–ï–ù–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ï–†–ê:")
        print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ")
        print("2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∏—Å—å–º–∞ –∑–∞ –¥–∞—Ç—É (—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–∏–π)")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞")
        print("4. –í—ã—Ö–æ–¥")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-4): ").strip()
        
        if choice == '1':
            # –í—ã–±–æ—Ä –¥–∞—Ç—ã
            print(f"\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {', '.join(available_dates)}")
            selected_date = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): ").strip()
            
            if selected_date not in available_dates:
                print(f"‚ùå –î–∞—Ç–∞ {selected_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∏—Å—å–º–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º
            tester.show_available_emails(selected_date)
            
            # –í—ã–±–æ—Ä –ø–∏—Å—å–º–∞
            try:
                email_number = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∏—Å—å–º–∞: "))
            except ValueError:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
                continue
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º
            result = tester.test_specific_email(selected_date, email_number)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"\n{'='*70}")
            print("ü§ñ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
            print("="*70)
            print(json.dumps(result, ensure_ascii=False, indent=2))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º
            if 'error' not in result:
                result_filename = f"fixed_test_{selected_date}_email_{email_number:03d}"
                result_path = tester.results_dir / f"{result_filename}.json"
                with open(result_path, 'w', encoding='utf-8') as f:
                    json.dump(result, f, ensure_ascii=False, indent=2)
                print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {result_path}")
            
        elif choice == '2':
            # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∏—Å–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ–¥—Å—á–µ—Ç–æ–º
            selected_date = input(f"–î–∞—Ç–∞ ({', '.join(available_dates)}): ").strip()
            if selected_date in available_dates:
                tester.show_available_emails(selected_date)
            else:
                print(f"‚ùå –î–∞—Ç–∞ {selected_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        
        elif choice == '3':
            tester.test_connection()
        
        elif choice == '4':
            print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")


if __name__ == '__main__':
    main()
