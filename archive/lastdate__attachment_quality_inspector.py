#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
"""

import json
import os
from pathlib import Path
from typing import Dict, List, Optional
from datetime import datetime
import mimetypes

from email_loader import ProcessedEmailLoader
from attachment_processor import AttachmentProcessor


class AttachmentQualityInspector:
    """üîç –ò–Ω—Å–ø–µ–∫—Ç–æ—Ä –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        self.email_loader = ProcessedEmailLoader()
        self.attachment_processor = AttachmentProcessor()
        
        # –ü–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.data_dir = Path("data")
        self.quality_dir = self.data_dir / "attachment_quality"
        self.extracted_texts_dir = self.quality_dir / "extracted_texts"
        self.reports_dir = self.quality_dir / "reports"
        
        for dir_path in [self.quality_dir, self.extracted_texts_dir, self.reports_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤–ª–æ–∂–µ–Ω–∏–π")
        print(f"   üìÅ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã: {self.extracted_texts_dir}")
        print(f"   üìä –û—Ç—á–µ—Ç—ã: {self.reports_dir}")

    def inspect_attachments_by_date(self, target_date: str) -> Dict:
        """üìÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π –∑–∞ –¥–∞—Ç—É"""
        
        print(f"\nüîç –ò–ù–°–ü–ï–ö–¶–ò–Ø –ö–ê–ß–ï–°–¢–í–ê –í–õ–û–ñ–ï–ù–ò–ô –ó–ê {target_date}")
        print("="*70)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞
        emails = self.email_loader.load_emails_by_date(target_date)
        emails_with_attachments = self.email_loader.get_emails_with_attachments(emails)
        
        if not emails_with_attachments:
            print("‚ùå –ù–µ—Ç –ø–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return {}
        
        print(f"üìé –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {len(emails_with_attachments)}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å–ø–µ–∫—Ü–∏–∏
        inspection_results = {
            'inspection_date': target_date,
            'inspected_at': datetime.now().isoformat(),
            'emails_inspected': len(emails_with_attachments),
            'attachments_details': [],
            'statistics': {
                'total_attachments': 0,
                'successful_extractions': 0,
                'failed_extractions': 0,
                'by_file_type': {},
                'by_processing_method': {}
            }
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–∏—Å—å–º–æ
        for email_idx, email in enumerate(emails_with_attachments, 1):
            print(f"\n{'‚îÄ'*50}")
            print(f"üìß –ü–ò–°–¨–ú–û {email_idx}/{len(emails_with_attachments)}")
            print(f"   –û—Ç: {email.get('from', 'N/A')[:50]}...")
            print(f"   –¢–µ–º–∞: {email.get('subject', 'N/A')[:60]}...")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
            email_inspection = self.inspect_email_attachments(email, email_idx)
            inspection_results['attachments_details'].extend(email_inspection['attachments'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_statistics(inspection_results['statistics'], email_inspection['attachments'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        self._save_inspection_report(target_date, inspection_results)
        
        # –ü–µ—á–∞—Ç–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._print_quality_statistics(inspection_results['statistics'])
        
        return inspection_results

    def inspect_email_attachments(self, email: Dict, email_idx: int) -> Dict:
        """üìé –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Å–ø–µ–∫—Ü–∏—è –≤–ª–æ–∂–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
        
        attachments = email.get('attachments', [])
        email_results = {'attachments': []}
        
        print(f"   üìé –í–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(attachments)}")
        
        for att_idx, attachment in enumerate(attachments, 1):
            print(f"\n   üîç –í–ª–æ–∂–µ–Ω–∏–µ {att_idx}/{len(attachments)}: {attachment.get('original_filename', 'N/A')}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            file_path = self.email_loader.get_attachment_file_path(email, attachment)
            
            if not file_path or not file_path.exists():
                print(f"      ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                continue
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞
            detailed_analysis = self._analyze_single_attachment(
                email, attachment, file_path, email_idx, att_idx
            )
            
            email_results['attachments'].append(detailed_analysis)
        
        return email_results

    def _analyze_single_attachment(self, email: Dict, attachment: Dict, file_path: Path, 
                                  email_idx: int, att_idx: int) -> Dict:
        """üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è"""
        
        original_filename = attachment.get('original_filename', 'unknown')
        file_type = attachment.get('file_type', 'unknown')
        file_size = attachment.get('file_size', 0)
        
        print(f"      üìÅ –§–∞–π–ª: {original_filename}")
        print(f"      üìä –¢–∏–ø: {file_type}")
        print(f"      üìè –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
        try:
            processed_attachment = self.attachment_processor.process_single_attachment(
                email, attachment, self.email_loader
            )
            
            if not processed_attachment:
                return self._create_failed_analysis(attachment, file_path, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ None")
            
            extracted_text = processed_attachment.get('extracted_text', '')
            processing_method = processed_attachment.get('method', 'unknown')
            
            print(f"      üîß –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_method}")
            print(f"      üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(extracted_text)}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            text_filename = f"email_{email_idx:03d}_att_{att_idx:02d}_{original_filename}.txt"
            text_path = self.extracted_texts_dir / text_filename
            
            try:
                with open(text_path, 'w', encoding='utf-8') as f:
                    f.write(f"–§–∞–π–ª: {original_filename}\n")
                    f.write(f"–¢–∏–ø: {file_type}\n")
                    f.write(f"–†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç\n")
                    f.write(f"–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_method}\n")
                    f.write(f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().isoformat()}\n")
                    f.write("="*50 + "\n")
                    f.write(f"–ò–ó–í–õ–ï–ß–ï–ù–ù–´–ô –¢–ï–ö–°–¢:\n\n{extracted_text}")
                
                print(f"      üíæ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text_filename}")
                
            except Exception as e:
                print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            quality_analysis = self._analyze_text_quality(extracted_text, processing_method, file_type)
            
            return {
                'original_filename': original_filename,
                'file_type': file_type,
                'file_size': file_size,
                'file_path': str(file_path),
                'processing_method': processing_method,
                'extracted_text_length': len(extracted_text),
                'extracted_text_preview': extracted_text[:300] + "..." if len(extracted_text) > 300 else extracted_text,
                'saved_text_file': text_filename,
                'quality_analysis': quality_analysis,
                'processing_success': True,
                'processing_error': None,
                'analyzed_at': datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return self._create_failed_analysis(attachment, file_path, str(e))

    def _analyze_text_quality(self, extracted_text: str, processing_method: str, file_type: str) -> Dict:
        """üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        
        if not extracted_text:
            return {
                'quality_score': 0.0,
                'quality_level': '–ù–µ—É–¥–∞—á–Ω–æ',
                'issues': ['–¢–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω'],
                'recommendations': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏', '–í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω OCR']
            }
        
        issues = []
        recommendations = []
        quality_score = 1.0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        text_length = len(extracted_text.strip())
        if text_length < 50:
            issues.append('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç')
            quality_score -= 0.3
            recommendations.append('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        error_indicators = ['[–û–®–ò–ë–ö–ê', '[ERROR', '–¢–†–ï–ë–£–ï–¢–°–Ø', '[–ù–ï–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ô –§–û–†–ú–ê–¢']
        for indicator in error_indicators:
            if indicator in extracted_text:
                issues.append(f'–ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º—ã: {indicator}')
                quality_score -= 0.4
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if processing_method == 'ocr':
            issues.append('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω OCR placeholder - –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞')
            quality_score -= 0.5
            recommendations.append('–í–Ω–µ–¥—Ä–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é OCR –±–∏–±–ª–∏–æ—Ç–µ–∫—É (Tesseract, easyOCR)')
            
        elif processing_method == 'description':
            issues.append('–¢–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ - —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω')
            quality_score -= 0.4
            recommendations.append('–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è Office —Ñ–∞–π–ª–æ–≤')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        useful_patterns = [
            r'\+7\d{10}',  # –¢–µ–ª–µ—Ñ–æ–Ω—ã
            r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}',  # Email
            r'\d+[.,]\d+',  # –¶–µ–Ω—ã/—á–∏—Å–ª–∞
            r'[–ê-–Ø][–∞-—è]+ [–ê-–Ø][–∞-—è]+',  # –§–ò–û
        ]
        
        import re
        useful_content_found = False
        for pattern in useful_patterns:
            if re.search(pattern, extracted_text):
                useful_content_found = True
                break
        
        if useful_content_found:
            quality_score += 0.2
        else:
            issues.append('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —è–≤–Ω–æ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∫–æ–Ω—Ç–∞–∫—Ç—ã, —Ü–µ–Ω—ã, –§–ò–û)')
            recommendations.append('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞
        if quality_score >= 0.8:
            quality_level = '–û—Ç–ª–∏—á–Ω–æ'
        elif quality_score >= 0.6:
            quality_level = '–•–æ—Ä–æ—à–æ'
        elif quality_score >= 0.4:
            quality_level = '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ'
        elif quality_score >= 0.2:
            quality_level = '–ü–ª–æ—Ö–æ'
        else:
            quality_level = '–ù–µ—É–¥–∞—á–Ω–æ'
        
        return {
            'quality_score': round(quality_score, 2),
            'quality_level': quality_level,
            'text_length': text_length,
            'useful_content_found': useful_content_found,
            'issues': issues,
            'recommendations': recommendations
        }

    def _create_failed_analysis(self, attachment: Dict, file_path: Path, error_msg: str) -> Dict:
        """‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        return {
            'original_filename': attachment.get('original_filename', 'unknown'),
            'file_type': attachment.get('file_type', 'unknown'),
            'file_size': attachment.get('file_size', 0),
            'file_path': str(file_path),
            'processing_method': 'failed',
            'extracted_text_length': 0,
            'extracted_text_preview': '',
            'saved_text_file': None,
            'quality_analysis': {
                'quality_score': 0.0,
                'quality_level': '–ù–µ—É–¥–∞—á–Ω–æ',
                'issues': [f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_msg}'],
                'recommendations': ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–æ—Ä–º–∞—Ç–∞']
            },
            'processing_success': False,
            'processing_error': error_msg,
            'analyzed_at': datetime.now().isoformat()
        }

    def _update_statistics(self, stats: Dict, attachments_analysis: List[Dict]):
        """üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        for analysis in attachments_analysis:
            stats['total_attachments'] += 1
            
            if analysis['processing_success']:
                stats['successful_extractions'] += 1
            else:
                stats['failed_extractions'] += 1
            
            # –ü–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤
            file_type = analysis['file_type']
            if file_type not in stats['by_file_type']:
                stats['by_file_type'][file_type] = {'total': 0, 'successful': 0}
            
            stats['by_file_type'][file_type]['total'] += 1
            if analysis['processing_success']:
                stats['by_file_type'][file_type]['successful'] += 1
            
            # –ü–æ –º–µ—Ç–æ–¥–∞–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            method = analysis['processing_method']
            if method not in stats['by_processing_method']:
                stats['by_processing_method'][method] = {'total': 0, 'successful': 0}
            
            stats['by_processing_method'][method]['total'] += 1
            if analysis['processing_success']:
                stats['by_processing_method'][method]['successful'] += 1

    def _save_inspection_report(self, target_date: str, results: Dict):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏"""
        
        report_filename = f"quality_report_{target_date.replace('-', '')}.json"
        report_path = self.reports_dir / report_filename
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            print(f"\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π HTML –æ—Ç—á–µ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self._create_html_report(target_date, results)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

    def _create_html_report(self, target_date: str, results: Dict):
        """üìÑ –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        
        html_filename = f"quality_report_{target_date.replace('-', '')}.html"
        html_path = self.reports_dir / html_filename
        
        stats = results['statistics']
        attachments = results['attachments_details']
        
        html_content = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤–ª–æ–∂–µ–Ω–∏–π - {target_date}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .header {{ background: #f4f4f4; padding: 20px; border-radius: 5px; }}
        .stats {{ display: flex; gap: 20px; margin: 20px 0; }}
        .stat-card {{ background: #e8f4f8; padding: 15px; border-radius: 5px; flex: 1; }}
        .attachment {{ border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }}
        .quality-excellent {{ background: #d4edda; }}
        .quality-good {{ background: #fff3cd; }}
        .quality-poor {{ background: #f8d7da; }}
        .quality-failed {{ background: #f1c2c3; }}
        .text-preview {{ background: #f8f9fa; padding: 10px; font-family: monospace; white-space: pre-wrap; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç –û—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π</h1>
        <p><strong>–î–∞—Ç–∞:</strong> {target_date}</p>
        <p><strong>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:</strong> {results['inspected_at']}</p>
    </div>
    
    <div class="stats">
        <div class="stat-card">
            <h3>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <p>–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–∏–π: <strong>{stats['total_attachments']}</strong></p>
            <p>–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <strong>{stats['successful_extractions']}</strong></p>
            <p>–û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: <strong>{stats['failed_extractions']}</strong></p>
        </div>
        <div class="stat-card">
            <h3>üìÅ –ü–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤</h3>
            {"".join([f"<p>{file_type}: {data['successful']}/{data['total']}</p>" 
                     for file_type, data in stats['by_file_type'].items()])}
        </div>
    </div>
    
    <h2>üìé –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–ª–æ–∂–µ–Ω–∏–π</h2>
    {"".join([self._create_attachment_html(att) for att in attachments])}
    
</body>
</html>"""
        
        try:
            with open(html_path, 'w', encoding='utf-8') as f:
                f.write(html_content)
            print(f"üìÑ HTML –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {html_path}")
            print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞: {e}")

    def _create_attachment_html(self, attachment: Dict) -> str:
        """üìé HTML –±–ª–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è"""
        
        quality = attachment['quality_analysis']
        quality_class = {
            '–û—Ç–ª–∏—á–Ω–æ': 'quality-excellent',
            '–•–æ—Ä–æ—à–æ': 'quality-good', 
            '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ': 'quality-good',
            '–ü–ª–æ—Ö–æ': 'quality-poor',
            '–ù–µ—É–¥–∞—á–Ω–æ': 'quality-failed'
        }.get(quality['quality_level'], 'quality-failed')
        
        return f"""
        <div class="attachment {quality_class}">
            <h3>üìÅ {attachment['original_filename']}</h3>
            <p><strong>–¢–∏–ø:</strong> {attachment['file_type']}</p>
            <p><strong>–†–∞–∑–º–µ—Ä:</strong> {attachment['file_size']} –±–∞–π—Ç</p>
            <p><strong>–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏:</strong> {attachment['processing_method']}</p>
            <p><strong>–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤:</strong> {attachment['extracted_text_length']}</p>
            <p><strong>–ö–∞—á–µ—Å—Ç–≤–æ:</strong> {quality['quality_level']} ({quality['quality_score']})</p>
            
            {f'<p><strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong> {", ".join(quality["issues"])}</p>' if quality['issues'] else ''}
            {f'<p><strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong> {", ".join(quality["recommendations"])}</p>' if quality['recommendations'] else ''}
            
            <h4>üìù –ü—Ä–µ–≤—å—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:</h4>
            <div class="text-preview">{attachment['extracted_text_preview']}</div>
            
            {f'<p><small>üíæ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç: {attachment["saved_text_file"]}</small></p>' if attachment.get('saved_text_file') else ''}
        </div>"""

    def _print_quality_statistics(self, stats: Dict):
        """üìä –ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
        
        print(f"\n{'='*70}")
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ß–ï–°–¢–í–ê –û–ë–†–ê–ë–û–¢–ö–ò –í–õ–û–ñ–ï–ù–ò–ô")
        print(f"{'='*70}")
        
        print(f"üìé –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–∏–π: {stats['total_attachments']}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['successful_extractions']}")
        print(f"‚ùå –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats['failed_extractions']}")
        
        if stats['total_attachments'] > 0:
            success_rate = (stats['successful_extractions'] / stats['total_attachments']) * 100
            print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
        
        print(f"\nüìÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –§–ê–ô–õ–û–í:")
        for file_type, data in stats['by_file_type'].items():
            success_rate = (data['successful'] / data['total']) * 100 if data['total'] > 0 else 0
            print(f"   {file_type}: {data['successful']}/{data['total']} ({success_rate:.1f}%)")
        
        print(f"\nüîß –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ú–ï–¢–û–î–ê–ú –û–ë–†–ê–ë–û–¢–ö–ò:")
        for method, data in stats['by_processing_method'].items():
            success_rate = (data['successful'] / data['total']) * 100 if data['total'] > 0 else 0
            print(f"   {method}: {data['successful']}/{data['total']} ({success_rate:.1f}%)")
        
        print(f"{'='*70}")


def main():
    """üß™ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    print("üîç –ò–ù–°–ü–ï–ö–¶–ò–Ø –ö–ê–ß–ï–°–¢–í–ê –û–ë–†–ê–ë–û–¢–ö–ò –í–õ–û–ñ–ï–ù–ò–ô")
    print("="*70)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä
    inspector = AttachmentQualityInspector()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    available_dates = inspector.email_loader.get_available_date_folders()
    
    if not available_dates:
        print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ advanced_email_fetcher_v2_fixed.py")
        return
    
    print(f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {available_dates}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    target_date = available_dates[-1]
    print(f"üéØ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞: {target_date}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Å–ø–µ–∫—Ü–∏—é
    results = inspector.inspect_attachments_by_date(target_date)
    
    if results:
        print(f"\nüéâ –ò–ù–°–ü–ï–ö–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"üìÅ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã: data/attachment_quality/extracted_texts/")
        print(f"üìä –û—Ç—á–µ—Ç—ã: data/attachment_quality/reports/")
        print(f"üìÑ –û—Ç–∫—Ä–æ–π—Ç–µ HTML –æ—Ç—á–µ—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")


if __name__ == '__main__':
    main()
