#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìß –ó–∞–≥—Ä—É–∑—á–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è LLM –∞–Ω–∞–ª–∏–∑–∞
"""

import json
import os
import re  # üîß –î–û–ë–ê–í–õ–ï–ù–û
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime, date


class ProcessedEmailLoader:
    """üì¨ –ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–∏—Å–µ–º –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def __init__(self, data_dir: Path = None):
        self.data_dir = data_dir or Path("data")
        self.emails_dir = self.data_dir / "emails"
        self.attachments_dir = self.data_dir / "attachments"
        
        print(f"üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞:")
        print(f"   üìß –ü–∏—Å—å–º–∞: {self.emails_dir}")
        print(f"   üìé –í–ª–æ–∂–µ–Ω–∏—è: {self.attachments_dir}")

    def get_available_date_folders(self) -> List[str]:
        """üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏"""
        
        if not self.emails_dir.exists():
            return []
        
        date_folders = []
        for folder in self.emails_dir.iterdir():
            # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º re.match() –≤–º–µ—Å—Ç–æ folder.name.match()
            if folder.is_dir() and re.match(r'\d{4}-\d{2}-\d{2}', folder.name):
                date_folders.append(folder.name)
        
        return sorted(date_folders)

    def load_emails_by_date(self, target_date: str) -> List[Dict]:
        """üìß –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–∏—Å–µ–º –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        
        date_folder = self.emails_dir / target_date
        if not date_folder.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {target_date}")
            return []
        
        emails = []
        json_files = list(date_folder.glob("email_*.json"))
        
        print(f"üìß –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º –∑–∞ {target_date}: –Ω–∞–π–¥–µ–Ω–æ {len(json_files)} —Ñ–∞–π–ª–æ–≤")
        
        for json_file in sorted(json_files):
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    email_data = json.load(f)
                    email_data['json_file_path'] = str(json_file)
                    emails.append(email_data)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {json_file.name}: {e}")
                continue
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(emails)} –ø–∏—Å–µ–º")
        return emails

    def load_emails_by_date_range(self, start_date: str, end_date: str) -> List[Dict]:
        """üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç"""
        
        all_emails = []
        available_dates = self.get_available_date_folders()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞—Ç—ã –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        target_dates = [d for d in available_dates if start_date <= d <= end_date]
        
        if not target_dates:
            print(f"‚ùå –ù–µ—Ç –ø–∏—Å–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {start_date} - {end_date}")
            return []
        
        print(f"üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
        print(f"   –ù–∞–π–¥–µ–Ω—ã –¥–∞—Ç—ã: {target_dates}")
        
        for target_date in target_dates:
            date_emails = self.load_emails_by_date(target_date)
            all_emails.extend(date_emails)
        
        print(f"üìä –ò–¢–û–ì–û –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∏—Å–µ–º: {len(all_emails)}")
        return all_emails

    def get_emails_with_attachments(self, emails: List[Dict]) -> List[Dict]:
        """üìé –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        
        emails_with_attachments = []
        
        for email in emails:
            if email.get('attachments') and len(email['attachments']) > 0:
                emails_with_attachments.append(email)
        
        print(f"üìé –ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {len(emails_with_attachments)} –∏–∑ {len(emails)}")
        return emails_with_attachments

    def get_attachment_file_path(self, email: Dict, attachment: Dict) -> Path:
        """üìé –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –≤–ª–æ–∂–µ–Ω–∏—è"""
        
        attachment_path = Path(attachment.get('file_path', ''))
        
        if attachment_path.exists():
            return attachment_path
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—É—Ç—å –∏–∑ relative_path
        if attachment.get('relative_path'):
            full_path = self.data_dir / attachment['relative_path']
            if full_path.exists():
                return full_path
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ saved_filename –∏ –¥–∞—Ç—É
        date_folder = email.get('date_folder', '')
        if date_folder and attachment.get('saved_filename'):
            constructed_path = self.attachments_dir / date_folder / attachment['saved_filename']
            if constructed_path.exists():
                return constructed_path
        
        return None

    def print_email_summary(self, emails: List[Dict]):
        """üìä –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –ø–∏—Å—å–º–∞–º"""
        
        if not emails:
            print("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        print(f"\nüìä –°–í–û–î–ö–ê –ü–û –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ú –ü–ò–°–¨–ú–ê–ú:")
        print(f"{'='*50}")
        print(f"üìß –í—Å–µ–≥–æ –ø–∏—Å–µ–º: {len(emails)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–ª–æ–∂–µ–Ω–∏—è–º
        total_attachments = sum(len(email.get('attachments', [])) for email in emails)
        emails_with_attachments = len([e for e in emails if e.get('attachments')])
        
        print(f"üìé –ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {emails_with_attachments}")
        print(f"üìé –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–∏–π: {total_attachments}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º
        senders = {}
        for email in emails:
            sender_domain = email.get('from', '').split('@')[-1] if '@' in email.get('from', '') else 'unknown'
            senders[sender_domain] = senders.get(sender_domain, 0) + 1
        
        print(f"üì® –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π: {len(senders)}")
        
        # –¢–û–ü-3 –¥–æ–º–µ–Ω–∞
        top_domains = sorted(senders.items(), key=lambda x: x[1], reverse=True)[:3]
        for domain, count in top_domains:
            print(f"   ‚Ä¢ {domain}: {count} –ø–∏—Å–µ–º")
        
        # –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞
        total_chars = sum(email.get('char_count', 0) for email in emails)
        estimated_tokens = total_chars // 3  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ
        
        print(f"üìù –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: {total_chars:,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üéØ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {estimated_tokens:,}")
        
        print(f"{'='*50}")


def main():
    """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø–∏—Å–µ–º"""
    
    print("üìß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ß–ò–ö–ê –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –ü–ò–°–ï–ú")
    print("="*60)
    
    loader = ProcessedEmailLoader()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    available_dates = loader.get_available_date_folders()
    print(f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {available_dates}")
    
    if not available_dates:
        print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ advanced_email_fetcher_v2_fixed.py")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
    latest_date = available_dates[-1]
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∑–∞ {latest_date}...")
    
    emails = loader.load_emails_by_date(latest_date)
    
    if emails:
        loader.print_email_summary(emails)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–∏—Å–µ–º
        print(f"\nüìã –ü–†–ò–ú–ï–†–´ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–• –ü–ò–°–ï–ú:")
        for i, email in enumerate(emails[:3], 1):
            print(f"   {i}. –û—Ç: {email.get('from', 'N/A')[:50]}...")
            print(f"      –¢–µ–º–∞: {email.get('subject', 'N/A')[:60]}...")
            print(f"      –°–∏–º–≤–æ–ª–æ–≤: {email.get('char_count', 0)}")
            
            attachments = email.get('attachments', [])
            if attachments:
                print(f"      –í–ª–æ–∂–µ–Ω–∏—è ({len(attachments)}):")
                for att in attachments:
                    file_path = loader.get_attachment_file_path(email, att)
                    status = "‚úÖ" if file_path and file_path.exists() else "‚ùå"
                    print(f"        {status} {att.get('original_filename', 'N/A')}")
    
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞")


if __name__ == '__main__':
    main()
