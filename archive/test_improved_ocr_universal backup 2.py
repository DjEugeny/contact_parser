#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –ì–∏–±—Ä–∏–¥–Ω—ã–π OCR —Ç–µ—Å—Ç–µ—Ä v12 (Google Cloud Vision Edition)
- –û—Ç–∫–ª—é—á–µ–Ω–∞ –∑–∞—â–∏—Ç–∞ –æ—Ç "Decompression Bomb" –≤ Pillow –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
"""

import json
import numpy as np
from pathlib import Path
from typing import Dict, List, Tuple
import time
from datetime import datetime
import subprocess
import shutil
import io

from PIL import Image
from google.api_core import exceptions as google_exceptions

# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏–º–∏—Ç –Ω–∞ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Pillow >>>
Image.MAX_IMAGE_PIXELS = None

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
try:
    from google.cloud import vision
    GOOGLE_VISION_AVAILABLE = True
except ImportError:
    GOOGLE_VISION_AVAILABLE = False
try:
    import fitz
    PYMUPDF_AVAILABLE = True
except ImportError:
    PYMUPDF_AVAILABLE = False
try:
    from docx import Document as DocxDocument
    PYTHON_DOCX_AVAILABLE = True
except ImportError:
    PYTHON_DOCX_AVAILABLE = False
try:
    import openpyxl
    OPENPYXL_AVAILABLE = True
except ImportError:
    OPENPYXL_AVAILABLE = False
try:
    import xlrd
    XLRD_AVAILABLE = True
except ImportError:
    XLRD_AVAILABLE = False

class GoogleVisionOCRTester:
    # ... (–≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–ª–∞—Å—Å–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ê–ë–°–û–õ–Æ–¢–ù–û –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
    def __init__(self):
        self.data_dir = Path("data")
        self.attachments_dir = self.data_dir / "attachments"
        self.base_results_dir = self.data_dir / "final_results"
        self.texts_dir = self.base_results_dir / "texts"
        self.reports_dir = self.base_results_dir / "reports"
        self.texts_dir.mkdir(parents=True, exist_ok=True)
        self.reports_dir.mkdir(parents=True, exist_ok=True)
        self.vision_client = vision.ImageAnnotatorClient() if GOOGLE_VISION_AVAILABLE else None
        self._show_capabilities()
        print("\n" + "=" * 70)
        print("üéØ OCR –¢–ï–°–¢–ï–† –° GOOGLE CLOUD VISION v12 üéØ")
        print(f"üìÅ –ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã: {self.attachments_dir}")
        print(f"üóÇÔ∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–µ: {self.base_results_dir}")
        print("=" * 70)
    def _show_capabilities(self):
        antiword_ok = shutil.which('antiword') is not None
        print("üìã –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:")
        if GOOGLE_VISION_AVAILABLE and self.vision_client:
            print("   ‚òÅÔ∏è Google Cloud Vision: ‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            print("   ‚òÅÔ∏è Google Cloud Vision: ‚ùå –ù–ï –ù–ê–°–¢–†–û–ï–ù!")
        local_status = [f"PDF (—Ç–µ–∫—Å—Ç) {'‚úÖ' if PYMUPDF_AVAILABLE else '‚ùå'}", f"DOCX {'‚úÖ' if PYTHON_DOCX_AVAILABLE else '‚ùå'}", f"XLSX {'‚úÖ' if OPENPYXL_AVAILABLE else '‚ùå'}", f"DOC (antiword) {'‚úÖ' if antiword_ok else '‚ùå (brew install antiword)'}", f"XLS (xlrd) {'‚úÖ' if XLRD_AVAILABLE else '‚ùå'}"]
        print(f"   üìÑ –õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {' | '.join(local_status)}")
    def get_available_dates(self) -> List[str]:
        if not self.attachments_dir.exists(): return []
        return sorted([d.name for d in self.attachments_dir.iterdir() if d.is_dir() and d.name.count("-") == 2])
    def get_files_for_date(self, date: str) -> List[Path]:
        date_dir = self.attachments_dir / date
        if not date_dir.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {date_dir}")
            return []
        file_types = ["*.png", "*.jpg", "*.jpeg", "*.tiff", "*.pdf", "*.docx", "*.doc", "*.xlsx", "*.xls"]
        files = sorted(list(set(f for pat in file_types for f in date_dir.rglob(pat))))
        return files
    def run_google_vision_ocr(self, content: bytes) -> Tuple[str, float]:
        if not self.vision_client: raise RuntimeError("–ö–ª–∏–µ–Ω—Ç Google Vision –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        print("   ‚òÅÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Google Cloud Vision... (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)")
        ts = time.time()
        image = vision.Image(content=content)
        response = self.vision_client.document_text_detection(image=image)
        if response.error.message:
            raise Exception(f"Google Vision API Error: {response.error.message}")
        text = response.full_text_annotation.text
        confidences = [page.confidence for page in response.full_text_annotation.pages]
        avg_confidence = np.mean(confidences) if confidences else 0.0
        elapsed = time.time() - ts
        print(f"   ‚ú® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Google –∑–∞ {elapsed:.2f} —Å–µ–∫. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.2%}")
        return text, avg_confidence
    def extract_text_from_file(self, file_path: Path) -> Dict:
        ext = file_path.suffix.lower()
        text, method, confidence, error = "", "unknown", 0.0, None
        ts = time.time()
        try:
            if ext == ".docx":
                print("   üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ DOCX –ª–æ–∫–∞–ª—å–Ω–æ...")
                doc = DocxDocument(file_path)
                text = "\n".join([p.text for p in doc.paragraphs])
                method, confidence = "local_docx", 1.0
            elif ext == ".doc":
                print("   üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ DOC (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) —á–µ—Ä–µ–∑ antiword...")
                if not shutil.which('antiword'):
                    raise FileNotFoundError("–£—Ç–∏–ª–∏—Ç–∞ 'antiword' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–µ: brew install antiword")
                process = subprocess.run(['antiword', str(file_path)], capture_output=True, text=True, encoding='utf-8', errors='ignore')
                if process.returncode == 0:
                    text = process.stdout
                else:
                    raise RuntimeError(f"Antiword –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {process.stderr}")
                method, confidence = "local_doc_antiword", 1.0
            elif ext == ".xlsx":
                print("   üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ XLSX –ª–æ–∫–∞–ª—å–Ω–æ...")
                wb = openpyxl.load_workbook(file_path, data_only=True)
                lines = [" | ".join([str(cell.value or "") for cell in row]) for sheet in wb.worksheets for row in sheet.iter_rows()]
                text = "\n".join(lines)
                method, confidence = "local_xlsx", 1.0
            elif ext == ".xls":
                print("   üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ XLS (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç) –ª–æ–∫–∞–ª—å–Ω–æ...")
                if not XLRD_AVAILABLE: raise ImportError("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ xlrd –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install xlrd")
                wb = xlrd.open_workbook(file_path, encoding_override="cp1251")
                lines = []
                for sheet in wb.sheets():
                    for row_idx in range(sheet.nrows):
                        lines.append(" | ".join([str(sheet.cell(row_idx, col_idx).value or "") for col_idx in range(sheet.ncols)]))
                text = "\n".join(lines)
                method, confidence = "local_xls", 1.0
            elif ext == ".pdf":
                print("   üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF... –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π.")
                doc = fitz.open(file_path)
                texts = [page.get_text() for page in doc]
                full_text_direct = "\n\n".join(texts).strip()
                if len(full_text_direct) > 100:
                    print("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π. –ò–∑–≤–ª–µ—á–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.")
                    text, method, confidence = full_text_direct, "local_pdf_text", 1.0
                else:
                    print("   üñºÔ∏è –¢–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π –ø—É—Å—Ç. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –≤ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è Google Vision.")
                    all_pages_text = []
                    all_confidences = []
                    for i, page in enumerate(doc):
                        print(f"     -- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i+1}/{len(doc)} --")
                        pix = page.get_pixmap(dpi=300)
                        try:
                            img_bytes = pix.tobytes("png")
                            page_text, page_confidence = self.run_google_vision_ocr(img_bytes)
                        except google_exceptions.InvalidArgument as e:
                            if "Request payload size exceeds the limit" in str(e):
                                print("     ‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫! –ü—Ä–æ–±—É—é —Å–∂–∞—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Pillow...")
                                png_buffer = io.BytesIO(pix.tobytes("png"))
                                pil_image = Image.open(png_buffer)
                                if pil_image.mode != 'RGB':
                                    pil_image = pil_image.convert('RGB')
                                jpeg_buffer = io.BytesIO()
                                pil_image.save(jpeg_buffer, format="JPEG", quality=92)
                                img_bytes_jpeg = jpeg_buffer.getvalue()
                                page_text, page_confidence = self.run_google_vision_ocr(img_bytes_jpeg)
                            else:
                                raise
                        all_pages_text.append(page_text)
                        all_confidences.append(page_confidence)
                    text = "\n\n--- PAGE BREAK ---\n\n".join(all_pages_text)
                    confidence = np.mean(all_confidences) if all_confidences else 0.0
                    method = "google_vision_pdf"
            elif ext in [".png", ".jpg", ".jpeg", ".tiff"]:
                print(f"   üñºÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ({ext}). –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Vision.")
                try:
                    img_bytes = file_path.read_bytes()
                    text, confidence = self.run_google_vision_ocr(img_bytes)
                except google_exceptions.InvalidArgument as e:
                    if "Request payload size exceeds the limit" in str(e):
                        print("     ‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–æ! –ü—Ä–æ–±—É—é —Å–∂–∞—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Pillow...")
                        with Image.open(file_path) as pil_image:
                            if pil_image.mode != 'RGB':
                                pil_image = pil_image.convert('RGB')
                            img_buffer = io.BytesIO()
                            pil_image.save(img_buffer, format="JPEG", quality=92)
                            img_bytes_jpeg = img_buffer.getvalue()
                        text, confidence = self.run_google_vision_ocr(img_bytes_jpeg)
                    else:
                        raise
                method = "google_vision_image"
            else:
                method, error = "unsupported", f"–§–æ—Ä–º–∞—Ç {ext} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
        except Exception as e:
            error = str(e)
            method = "error"
            print(f"   ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return {"file_path": str(file_path), "file_name": file_path.name, "success": not error and bool(text.strip()), "text": text.strip(), "method": method, "confidence": confidence, "error": error, "processing_time_sec": time.time() - ts, "timestamp": datetime.now().isoformat()}
    def save_result(self, result: Dict, date: str):
        date_texts_dir = self.texts_dir / date
        date_texts_dir.mkdir(parents=True, exist_ok=True)
        if result["success"]:
            txt_filename = f"{Path(result['file_name']).stem}___{result['method']}.txt"
            txt_path = date_texts_dir / txt_filename
            with open(txt_path, "w", encoding="utf-8") as f:
                f.write(f"# üìÑ –§–∞–π–ª: {result['file_name']}\n# ‚öôÔ∏è –ú–µ—Ç–æ–¥: {result['method']}\n")
                f.write(f"# ‚ú® –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2%}\n# ‚è±Ô∏è –í—Ä–µ–º—è: {result['processing_time_sec']:.2f} —Å–µ–∫\n")
                f.write("# " + "=" * 50 + "\n\n" + result['text'])
            print(f"   üíæ TXT —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {txt_path}")
            result["txt_file_path"] = str(txt_path)
        json_report_path = self.reports_dir / f"test_report_{date}.json"
        report_data = []
        if json_report_path.exists():
            with open(json_report_path, "r", encoding="utf-8") as f:
                try: report_data = json.load(f)
                except json.JSONDecodeError: pass
        report_data.append(result)
        with open(json_report_path, "w", encoding="utf-8") as f:
            json.dump(report_data, f, ensure_ascii=False, indent=2)
    def _print_summary(self, date: str, stats: Dict):
        print("\n" + "="*25 + f" üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ê –ó–ê {date} " + "="*25)
        total = stats.get('total', 0)
        successful = stats.get('successful', 0)
        failed = total - successful
        success_rate = (successful / total * 100) if total > 0 else 0
        print(f"üóÇÔ∏è  –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {total}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful} ({success_rate:.1f}%)")
        print(f"‚ùå –° –æ—à–∏–±–∫–∞–º–∏: {failed}")
        print("-" * 70)
        print("‚öôÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º:")
        methods = stats.get('methods', {})
        for method, count in sorted(methods.items()):
            print(f"   - {method}: {count} —Ä–∞–∑")
        print("=" * 73)
    def test_files_by_date(self, date: str, files_to_test: List[Path], limit: int = None):
        if limit:
            files_to_test = files_to_test[:limit]
            print(f"üéØ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ {limit} —Ñ–∞–π–ª–æ–≤.")
        stats = {"total": 0, "successful": 0, "methods": {}}
        for i, file_path in enumerate(files_to_test, 1):
            print(f"\n--- üß™ –§–∞–π–ª {i}/{len(files_to_test)}: {file_path.name} ---")
            result = self.extract_text_from_file(file_path)
            self.save_result(result, date)
            stats["total"] += 1
            if result["success"]:
                stats["successful"] += 1
            stats["methods"][result["method"]] = stats["methods"].get(result["method"], 0) + 1
        print(f"\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞—Ç—ã {date} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        self._print_summary(date, stats)
def main():
    try: tester = GoogleVisionOCRTester()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"); return
    if not tester.vision_client:
        print("\n‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Google Cloud Vision –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç."); return
    available_dates = tester.get_available_dates()
    if not available_dates:
        print("ü§∑ –í –ø–∞–ø–∫–µ 'data/attachments' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ —Å –¥–∞—Ç–∞–º–∏ (YYYY-MM-DD)."); return
    while True:
        print("\n\n" + "="*25 + " üéØ –ú–ï–ù–Æ –¢–ï–°–¢–ò–†–û–í–©–ò–ö–ê üéØ " + "="*25)
        print(f"üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∞: {', '.join(available_dates)}")
        print("1. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É")
        print("2. üöÄ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –í–°–ï —Ñ–∞–π–ª—ã –∏–∑ –í–°–ï–• –¥–∞—Ç")
        print("3. üö™ –í—ã–π—Ç–∏")
        choice = input("üëâ –í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        if choice == "1":
            date = input("   –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): ").strip()
            if date not in available_dates:
                print(f"   ‚ùå –î–∞—Ç–∞ '{date}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"); continue
            files_found = tester.get_files_for_date(date)
            if not files_found:
                print(f"ü§∑ –í –ø–∞–ø–∫–µ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤.")
                continue
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files_found)}")
            limit_input = input(f"   –°–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å? (Enter = –≤—Å–µ {len(files_found)}): ").strip()
            limit = int(limit_input) if limit_input.isdigit() else None
            tester.test_files_by_date(date, files_found, limit)
        elif choice == "2":
            if input("   –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã? (y/n): ").lower() == 'y':
                for date in available_dates:
                    print(f"\n\n--- üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã: {date} ---")
                    files_found = tester.get_files_for_date(date)
                    if files_found:
                        tester.test_files_by_date(date, files_found)
                    else:
                        print(f"ü§∑ –í –ø–∞–ø–∫–µ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤.")
            else:
                print("   –û—Ç–º–µ–Ω–µ–Ω–æ.")
        elif choice == "3":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"); break
        else:
            print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 3.")

if __name__ == "__main__":
    main()