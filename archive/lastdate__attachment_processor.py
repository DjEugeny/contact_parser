#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìé –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —Ä–∞–Ω–Ω—é—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ fetcher'–µ
"""

import os
import json
import re
from pathlib import Path
from typing import Dict, List, Optional


class AttachmentProcessor:
    """üìé –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π"""
    
    def __init__(self):
        print("üìé –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π")
        print("   ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏")
        print("   üá∑üá∫ OCR —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ + –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤")

    def process_email_attachments(self, email: Dict, email_loader) -> Dict:
        """üìß –û–±—Ä–∞–±–æ—Ç–∫–∞ –¢–û–õ–¨–ö–û –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π"""
        
        attachments = email.get('attachments', [])
        if not attachments:
            return {
                'attachments_processed': 0,
                'attachments_text': [],
                'processing_errors': []
            }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        downloaded_attachments = [
            att for att in attachments 
            if att.get('status') == 'saved' and att.get('file_path')
        ]
        
        print(f"   üìé –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(downloaded_attachments)} –∏–∑ {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏–π")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—ã–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏
        excluded_attachments = [att for att in attachments if att.get('status') == 'excluded']
        unsupported_attachments = [att for att in attachments if att.get('status') == 'unsupported']
        
        if excluded_attachments:
            print(f"   üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {len(excluded_attachments)}")
            for att in excluded_attachments:
                print(f"      ‚Ä¢ {att['original_filename']} - {att['exclusion_reason']}")
        
        if unsupported_attachments:
            print(f"   ‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {len(unsupported_attachments)}")
            for att in unsupported_attachments:
                print(f"      ‚Ä¢ {att['original_filename']} - {att['exclusion_reason']}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        processed_attachments = []
        processing_errors = []
        
        for i, attachment in enumerate(downloaded_attachments, 1):
            try:
                result = self.process_single_attachment(email, attachment, email_loader)
                if result:
                    processed_attachments.append(result)
                    print(f"      ‚úÖ {i}/{len(downloaded_attachments)}: {attachment.get('original_filename', 'N/A')}")
                else:
                    print(f"      ‚ö†Ô∏è {i}/{len(downloaded_attachments)}: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å {attachment.get('original_filename', 'N/A')}")
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {attachment.get('original_filename', 'N/A')}: {e}"
                processing_errors.append(error_msg)
                print(f"      ‚ùå {i}/{len(downloaded_attachments)}: {error_msg}")
        
        return {
            'attachments_processed': len(processed_attachments),
            'attachments_text': processed_attachments,
            'processing_errors': processing_errors
        }

    def process_single_attachment(self, email: Dict, attachment: Dict, email_loader) -> Optional[Dict]:
        """üìé –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è"""
        
        file_path = email_loader.get_attachment_file_path(email, attachment)
        if not file_path or not file_path.exists():
            return None
        
        file_type = attachment.get('file_type', '')
        original_filename = attachment.get('original_filename', '')
        file_size = attachment.get('file_size', 0)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
        if file_type == 'application/pdf':
            processing_method = 'pdf_with_ocr'
        elif file_type.startswith('image/'):
            processing_method = 'ocr'
        elif file_type == 'text/plain':
            processing_method = 'direct'
        elif 'excel' in file_type or 'sheet' in file_type:
            processing_method = 'office_excel'
        elif 'word' in file_type:
            processing_method = 'office_word'
        else:
            processing_method = 'unsupported'
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if processing_method == 'direct':
            extracted_text = self._extract_text_direct(file_path)
        elif processing_method == 'pdf_with_ocr':
            extracted_text = self._extract_text_from_pdf_with_ocr(file_path, original_filename)
        elif processing_method == 'ocr':
            extracted_text = self._extract_text_with_ocr(file_path, original_filename)
        elif processing_method == 'office_excel':
            extracted_text = self._extract_from_excel(file_path, original_filename)
        elif processing_method == 'office_word':
            extracted_text = self._extract_from_word(file_path, original_filename)
        else:
            extracted_text = f"[–ù–ï–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ô –§–û–†–ú–ê–¢: {file_type}]"
        
        return {
            'filename': original_filename,
            'file_type': file_type,
            'method': processing_method,
            'extracted_text': extracted_text,
            'char_count': len(extracted_text),
            'file_size': file_size
        }

    def _extract_text_direct(self, file_path: Path) -> str:
        """üìÑ –ü—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            return content.strip()
        except Exception as e:
            return f"[–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø –§–ê–ô–õ–ê: {e}]"

    def _extract_text_from_pdf_with_ocr(self, file_path: Path, filename: str) -> str:
        """üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OCR –¥–ª—è —Å–∫–∞–Ω–æ–≤"""
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ PDF
            try:
                import fitz  # PyMuPDF
                doc = fitz.open(file_path)
                text_parts = []
                ocr_needed_pages = []
                
                for page_num in range(doc.page_count):
                    page = doc[page_num]
                    text = page.get_text()
                    
                    if text.strip() and len(text.strip()) > 50:
                        # –í PDF –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ª–æ–π
                        text_parts.append(f"[–°–¢–†–ê–ù–ò–¶–ê {page_num + 1} - –¢–ï–ö–°–¢–û–í–´–ô –°–õ–û–ô]\n{text}")
                    else:
                        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è - –Ω—É–∂–µ–Ω OCR
                        ocr_needed_pages.append(page_num)
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è OCR
                if ocr_needed_pages:
                    print(f"        üîç PDF —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {len(ocr_needed_pages)} –∏–∑ {doc.page_count}")
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º OCR –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
                    for page_num in ocr_needed_pages:
                        ocr_result = self._extract_pdf_page_with_ocr(doc, page_num, filename)
                        if ocr_result:
                            text_parts.append(f"[–°–¢–†–ê–ù–ò–¶–ê {page_num + 1} - OCR –ò–ó–í–õ–ï–ß–ï–ù–ò–ï]\n{ocr_result}")
                
                doc.close()
                
                if text_parts:
                    return '\n\n'.join(text_parts)
                else:
                    return f"[PDF –ë–ï–ó –¢–ï–ö–°–¢–û–í–û–ì–û –°–û–î–ï–†–ñ–ò–ú–û–ì–û: {filename}]"
                    
            except ImportError:
                return f"[PDF –§–ê–ô–õ: {filename} - –¢–†–ï–ë–£–ï–¢–°–Ø PyMuPDF –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò]\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyMuPDF"
            
        except Exception as e:
            return f"[–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò PDF: {e}]"

    def _extract_pdf_page_with_ocr(self, doc, page_num: int, filename: str) -> str:
        """üîç OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF"""
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è OCR
            try:
                import pytesseract
                from PIL import Image
                import io
            except ImportError:
                return f"[OCR –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´ - –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}]"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            page = doc[page_num]
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ OCR (300 DPI)
            mat = page.get_pixmap(matrix=page.get_matrix(zoom=2.0))
            img_data = mat.tobytes("png")
            image = Image.open(io.BytesIO(img_data))
            
            # OCR —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
            extracted_text = pytesseract.image_to_string(
                image,
                lang='rus+eng',  # üá∑üá∫ –†—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                config='--psm 6'
            )
            
            if extracted_text.strip():
                return self._clean_ocr_text(extracted_text.strip())
            else:
                return f"[OCR –ù–ï –°–ú–û–ì –ò–ó–í–õ–ï–ß–¨ –¢–ï–ö–°–¢ –°–û –°–¢–†–ê–ù–ò–¶–´ {page_num + 1}]"
                
        except Exception as e:
            return f"[–û–®–ò–ë–ö–ê OCR –°–¢–†–ê–ù–ò–¶–´ {page_num + 1}: {e}]"

    def _extract_text_with_ocr(self, file_path: Path, filename: str) -> str:
        """üñºÔ∏è –†–µ–∞–ª—å–Ω–∞—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ"""
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è OCR
            try:
                import pytesseract
                from PIL import Image, ImageEnhance
            except ImportError:
                return f"""[OCR –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´]
–§–∞–π–ª: {filename}
–î–ª—è OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pytesseract pillow"""
            
            print(f"        üîç –ó–∞–ø—É—Å–∫ OCR –¥–ª—è {filename}...")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(file_path)
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ OCR
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            enhancer = ImageEnhance.Contrast(image)
            image = enhancer.enhance(1.5)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á–µ—Ç–∫–æ—Å—Ç—å
            enhancer = ImageEnhance.Sharpness(image)
            image = enhancer.enhance(2.0)
            
            # OCR —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–æ–≤
            extracted_text = pytesseract.image_to_string(
                image, 
                lang='rus+eng',  # üá∑üá∫ –†—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                config='--psm 6'
            )
            
            if extracted_text.strip():
                print(f"        ‚úÖ OCR –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(extracted_text)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                cleaned_text = self._clean_ocr_text(extracted_text)
                
                return f"""[OCR –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ô –¢–ï–ö–°–¢]
–§–∞–π–ª: {filename}
–Ø–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π + –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
–°–∏–º–≤–æ–ª–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {len(cleaned_text)}

{cleaned_text}"""
            else:
                return f"""[OCR –ù–ï –°–ú–û–ì –ò–ó–í–õ–ï–ß–¨ –¢–ï–ö–°–¢]
–§–∞–π–ª: {filename}
–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤—ã–π —Ç–µ–∫—Å—Ç"""
                
        except Exception as e:
            return f"""[–û–®–ò–ë–ö–ê OCR –û–ë–†–ê–ë–û–¢–ö–ò]
–§–∞–π–ª: {filename}
–û—à–∏–±–∫–∞: {e}"""

    def _clean_ocr_text(self, text: str) -> str:
        """üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ OCR"""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text)
        
        # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        text = re.sub(r'\n\s*[^\w\s]\s*\n', '\n', text)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–µ—Å–ª–∏ OCR —Ä–∞–∑–±–∏–ª —Å–ª–æ–≤–æ –ø–µ—Ä–µ–Ω–æ—Å–æ–º)
        text = re.sub(r'(\w+)-\s*\n\s*(\w+)', r'\1\2', text)
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        text = re.sub(r'([.!?]){2,}', r'\1', text)
        
        return text.strip()

    def _extract_from_excel(self, file_path: Path, filename: str) -> str:
        """üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤"""
        
        try:
            import openpyxl
            import xlrd
            
            text_parts = []
            file_ext = file_path.suffix.lower()
            
            if file_ext == '.xlsx':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º XLSX —á–µ—Ä–µ–∑ openpyxl
                workbook = openpyxl.load_workbook(file_path, data_only=True)
                
                for sheet_name in workbook.sheetnames:
                    sheet = workbook[sheet_name]
                    text_parts.append(f"[–õ–ò–°–¢: {sheet_name}]")
                    
                    for row in sheet.iter_rows(values_only=True):
                        row_text = []
                        for cell in row:
                            if cell is not None:
                                row_text.append(str(cell))
                        if row_text:
                            text_parts.append(" | ".join(row_text))
                
            elif file_ext == '.xls':
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º XLS —á–µ—Ä–µ–∑ xlrd
                workbook = xlrd.open_workbook(file_path)
                
                for sheet_idx in range(workbook.nsheets):
                    sheet = workbook.sheet_by_index(sheet_idx)
                    text_parts.append(f"[–õ–ò–°–¢: {sheet.name}]")
                    
                    for row_idx in range(sheet.nrows):
                        row_text = []
                        for col_idx in range(sheet.ncols):
                            cell = sheet.cell(row_idx, col_idx)
                            if cell.value:
                                row_text.append(str(cell.value))
                        if row_text:
                            text_parts.append(" | ".join(row_text))
            
            if text_parts:
                return f"""[EXCEL –§–ê–ô–õ –û–ë–†–ê–ë–û–¢–ê–ù]
–§–∞–π–ª: {filename}
–õ–∏—Å—Ç–æ–≤: {len([p for p in text_parts if p.startswith('[–õ–ò–°–¢:')])}

{chr(10).join(text_parts)}"""
            else:
                return f"[EXCEL –§–ê–ô–õ –ü–£–°–¢: {filename}]"
                
        except ImportError:
            return f"""[EXCEL –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´]
–§–∞–π–ª: {filename}
–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openpyxl xlrd"""
        except Exception as e:
            return f"[–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø EXCEL: {e}]"

    def _extract_from_word(self, file_path: Path, filename: str) -> str:
        """üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Word —Ñ–∞–π–ª–æ–≤"""
        
        try:
            import docx
            
            doc = docx.Document(file_path)
            text_parts = []
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤
            for paragraph in doc.paragraphs:
                if paragraph.text.strip():
                    text_parts.append(paragraph.text.strip())
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü
            for table in doc.tables:
                text_parts.append("[–¢–ê–ë–õ–ò–¶–ê]")
                for row in table.rows:
                    row_text = []
                    for cell in row.cells:
                        if cell.text.strip():
                            row_text.append(cell.text.strip())
                    if row_text:
                        text_parts.append(" | ".join(row_text))
            
            if text_parts:
                return f"""[WORD –î–û–ö–£–ú–ï–ù–¢ –û–ë–†–ê–ë–û–¢–ê–ù]
–§–∞–π–ª: {filename}
–ü–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤: {len([p for p in text_parts if not p.startswith('[')])}
–¢–∞–±–ª–∏—Ü: {len([p for p in text_parts if p == '[–¢–ê–ë–õ–ò–¶–ê]'])}

{chr(10).join(text_parts)}"""
            else:
                return f"[WORD –î–û–ö–£–ú–ï–ù–¢ –ü–£–°–¢: {filename}]"
                
        except ImportError:
            return f"""[WORD –ë–ò–ë–õ–ò–û–¢–ï–ö–ê –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê]
–§–∞–π–ª: {filename}
–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-docx"""
        except Exception as e:
            return f"[–û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø WORD: {e}]"

    def combine_email_with_attachments(self, email: Dict, attachments_result: Dict) -> str:
        """üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤–ª–æ–∂–µ–Ω–∏–π"""
        
        combined_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        email_body = email.get('body', '').strip()
        if email_body:
            combined_parts.append("=== –¢–ï–ö–°–¢ –ü–ò–°–¨–ú–ê ===")
            combined_parts.append(email_body)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö/–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–ª–æ–∂–µ–Ω–∏—è—Ö (–∏–∑ JSON –ø–∏—Å—å–º–∞)
        attachments = email.get('attachments', [])
        excluded_attachments = [att for att in attachments if att.get('status') == 'excluded']
        unsupported_attachments = [att for att in attachments if att.get('status') == 'unsupported']
        
        if excluded_attachments or unsupported_attachments:
            combined_parts.append("\n=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–• –í–õ–û–ñ–ï–ù–ò–Ø–• ===")
            for att in excluded_attachments:
                combined_parts.append(f"üö´ {att['original_filename']} - {att['exclusion_reason']}")
            for att in unsupported_attachments:
                combined_parts.append(f"‚ö†Ô∏è {att['original_filename']} - {att['exclusion_reason']}")
        
        # –¢–µ–∫—Å—Ç –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π
        attachments_text = attachments_result.get('attachments_text', [])
        if attachments_text:
            combined_parts.append("\n=== –°–û–î–ï–†–ñ–ò–ú–û–ï –í–õ–û–ñ–ï–ù–ò–ô ===")
            
            for i, attachment in enumerate(attachments_text, 1):
                filename = attachment.get('filename', f'–í–ª–æ–∂–µ–Ω–∏–µ {i}')
                method = attachment.get('method', 'unknown')
                extracted_text = attachment.get('extracted_text', '')
                
                combined_parts.append(f"\n--- –í–õ–û–ñ–ï–ù–ò–ï {i}: {filename} (–º–µ—Ç–æ–¥: {method}) ---")
                combined_parts.append(extracted_text)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        processing_errors = attachments_result.get('processing_errors', [])
        if processing_errors:
            combined_parts.append("\n=== –û–®–ò–ë–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –í–õ–û–ñ–ï–ù–ò–ô ===")
            for error in processing_errors:
                combined_parts.append(f"‚ùå {error}")
        
        return '\n'.join(combined_parts)


def main():
    """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π"""
    
    print("üìé –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–û–©–ï–ù–ù–û–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –í–õ–û–ñ–ï–ù–ò–ô")
    print("="*70)
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø–∏—Å–µ–º
    import sys
    sys.path.append(str(Path(__file__).parent))
    from email_loader import ProcessedEmailLoader
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    loader = ProcessedEmailLoader()
    available_dates = loader.get_available_date_folders()
    
    if not available_dates:
        print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
    latest_date = available_dates[-1]
    emails = loader.load_emails_by_date(latest_date)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
    emails_with_attachments = loader.get_emails_with_attachments(emails)
    
    if not emails_with_attachments:
        print("‚ùå –ù–µ—Ç –ø–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    print(f"üìé –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {len(emails_with_attachments)}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = AttachmentProcessor()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–∏—Å—å–º–∞–º
    total_processed = 0
    total_extracted = 0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 3 –ø–∏—Å—å–º–∞—Ö —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
    for i, email in enumerate(emails_with_attachments[:3], 1):
        print(f"\n{'='*70}")
        print(f"üìß –ü–ò–°–¨–ú–û {i}: {email.get('subject', 'N/A')[:50]}...")
        print(f"üì® –û—Ç: {email.get('from', 'N/A')[:40]}...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–ª–æ–∂–µ–Ω–∏–π –∏–∑ JSON
        attachments_stats = email.get('attachments_stats', {})
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ JSON: {attachments_stats}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
        attachments_result = processor.process_email_attachments(email, loader)
        
        total_processed += attachments_result['attachments_processed']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {attachments_result['attachments_processed']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è
        for j, att_result in enumerate(attachments_result.get('attachments_text', []), 1):
            print(f"   üìé –í–ª–æ–∂–µ–Ω–∏–µ {j}: {att_result['filename']}")
            print(f"      –ú–µ—Ç–æ–¥: {att_result['method']}")
            print(f"      –°–∏–º–≤–æ–ª–æ–≤: {att_result['char_count']}")
            
            if att_result['char_count'] > 0:
                total_extracted += 1
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                preview = att_result['extracted_text'][:200]
                print(f"      –ü—Ä–µ–≤—å—é: {preview}...")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—Å—Ç–æ–º –ø–∏—Å—å–º–∞
        combined_text = processor.combine_email_with_attachments(email, attachments_result)
        
        print(f"üìù –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*70}")
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    print(f"{'='*70}")
    print(f"üìé –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_processed}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–µ–∫—Å—Ç: {total_extracted}")
    
    if total_processed > 0:
        success_rate = (total_extracted / total_processed) * 100
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {success_rate:.1f}%")


if __name__ == '__main__':
    main()
