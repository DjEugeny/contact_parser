#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üìß –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π IMAP-–ø–∞—Ä—Å–µ—Ä v2.9 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í –ò –£–õ–£–ß–®–ï–ù–ò–Ø
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–æ–≤, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥, extract_raw_email
"""

import os
import re
import ssl
import imaplib
import email
import email.message
import email.utils
import json
import time
import hashlib
import logging
import fnmatch
import io
from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Dict, List, Optional, Set
from dotenv import load_dotenv
from PIL import Image

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
IMAP_SERVER = os.getenv('IMAP_SERVER')
IMAP_PORT = int(os.getenv('IMAP_PORT', 143))
IMAP_USER = os.getenv('IMAP_USER')
IMAP_PASSWORD = os.getenv('IMAP_PASSWORD')
COMPANY_DOMAIN = os.getenv('COMPANY_DOMAIN', 'dna-technology.ru')
WIFE_EMAIL = os.getenv('IMAP_USER')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
MAX_RETRIES = 3
RETRY_DELAY = 5
BATCH_SIZE = 50
REQUEST_DELAY = 0.5

# üÜï –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï —Ç–∏–ø—ã –≤–ª–æ–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ)
SUPPORTED_ATTACHMENTS = {
    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    '.pdf': 'application/pdf',
    '.doc': 'application/msword',
    '.docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    '.txt': 'text/plain',
    # Excel —Ñ–∞–π–ª—ã (–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    '.xls': 'application/vnd.ms-excel',
    '.xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    '.xlsm': 'application/vnd.ms-excel.sheet.macroEnabled.12',
    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.png': 'image/png',
    '.gif': 'image/gif',
    '.bmp': 'image/bmp',
    '.tiff': 'image/tiff',
    '.tif': 'image/tiff',
    '.webp': 'image/webp',
}

# üö´ –ò–°–ö–õ–Æ–ß–ï–ù–ù–´–ï —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–ù–ï —Å–∫–∞—á–∏–≤–∞–µ–º –≤–æ–æ–±—â–µ)
EXCLUDED_EXTENSIONS = {
    '.zip', '.rar', '.7z',  # –ê—Ä—Ö–∏–≤—ã
    '.pptx', '.ppt',  # PowerPoint –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
    '.rt', '.rtf',  # Rich Text (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)
    '.trt',  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    '.exe', '.msi', '.dmg',  # –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã
    '.iso', '.img',  # –û–±—Ä–∞–∑—ã –¥–∏—Å–∫–æ–≤
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ UTC+7
LOCAL_TIMEZONE = timezone(timedelta(hours=7))

def setup_logging(logs_dir: Path, start_date: datetime, end_date: datetime):
    """üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    start_str = start_date.strftime('%Y%m%d')
    end_str = end_date.strftime('%Y%m%d')
    timestamp = int(time.time())
    log_filename = f"email_processing_{start_str}_{end_str}_{timestamp}.log"
    log_path = logs_dir / log_filename
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format = '%(asctime)s - %(levelname)s - %(message)s'
    date_format = '%Y.%m.%d %H:%M:%S'
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger('EmailFetcher')
    logger.setLevel(logging.DEBUG)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if logger.hasHandlers():
        logger.handlers.clear()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler = logging.FileHandler(log_path, mode='w', encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(logging.Formatter(log_format, date_format))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(logging.Formatter(log_format, date_format))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)
    
    # –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥
    logger.info("="*70)
    logger.info(f"üìß –ó–ê–ü–£–°–ö –û–ë–†–ê–ë–û–¢–ö–ò –ü–ò–°–ï–ú –ó–ê –ü–ï–†–ò–û–î {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}")
    logger.info(f"üìù –õ–æ–≥ —Ñ–∞–π–ª: {log_path}")
    logger.info(f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("="*70)
    
    return logger

class EmailFilters:
    """üö´ –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""

    def __init__(self, config_dir: Path, logger):
        self.config_dir = config_dir
        self.logger = logger
        self.subject_filters: Set[str] = set()
        self.blacklist: Set[str] = set()
        self.filename_excludes: List[str] = []
        self.load_filters()

    def load_filters(self):
        """üìã –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Ç–µ–º
        filters_file = self.config_dir / 'filters.txt'
        if filters_file.exists():
            try:
                with open(filters_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            self.subject_filters.add(line.lower())
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.subject_filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Ç–µ–º")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫
        blacklist_file = self.config_dir / 'blacklist.txt'
        if blacklist_file.exists():
            try:
                with open(blacklist_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            self.blacklist.add(line.lower())
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.blacklist)} –∞–¥—Ä–µ—Å–æ–≤ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
                self.logger.info(f"   –ü—Ä–∏–º–µ—Ä—ã: {list(self.blacklist)[:3]}")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤
        filename_excludes_file = self.config_dir / 'attachment_filename_excludes.txt'
        if filename_excludes_file.exists():
            try:
                with open(filename_excludes_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#'):
                            if line == '****':
                                self.logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: {line}")
                                continue
                            self.filename_excludes.append(line)
                self.logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.filename_excludes)} –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤: {e}")

    def is_subject_filtered(self, subject: str) -> Optional[str]:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º—ã –ø–∏—Å—å–º–∞ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"""
        if not subject:
            return None
        subject_lower = subject.lower()
        for filter_word in self.subject_filters:
            if filter_word in subject_lower:
                return f"—Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç '{filter_word}'"
        return None

    def is_sender_blacklisted(self, from_addr: str) -> Optional[str]:
        """üö´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"""
        if not from_addr:
            return None
        
        from_addr_lower = from_addr.lower().strip()
        
        # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –ª–æ–≥
        self.logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å '{from_addr_lower}' –ø—Ä–æ—Ç–∏–≤ {len(self.blacklist)} –ø—Ä–∞–≤–∏–ª")
        
        for blacklisted in self.blacklist:
            blacklisted = blacklisted.strip().lower()
            
            if blacklisted.endswith('*'):
                # –ú–∞—Å–∫–∏ —Ç–∏–ø–∞ info@*, newsletter@*, marketing@*
                prefix = blacklisted[:-1]  # —É–±–∏—Ä–∞–µ–º –∑–≤–µ–∑–¥–æ—á–∫—É
                if from_addr_lower.startswith(prefix):
                    return f"–∞–¥—Ä–µ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '{prefix}' (–≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ)"
                    
            elif blacklisted.startswith('*@'):
                # –ú–∞—Å–∫–∏ —Ç–∏–ø–∞ *@domain.com
                domain = blacklisted[2:]  # —É–±–∏—Ä–∞–µ–º *@
                if from_addr_lower.endswith(f"@{domain}"):
                    return f"–¥–æ–º–µ–Ω –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ ({domain})"
                    
            else:
                # –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if from_addr_lower == blacklisted:
                    return f"–∞–¥—Ä–µ—Å –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ"
        
        return None

    def is_filename_excluded(self, filename: str) -> Optional[str]:
        """üö´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ"""
        if not filename or not self.filename_excludes:
            return None

        for exclude_pattern in self.filename_excludes:
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ wildcard –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if '*' in exclude_pattern:
                if fnmatch.fnmatch(filename, exclude_pattern):
                    return f"–∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É '{exclude_pattern}'"
                if fnmatch.fnmatch(filename.lower(), exclude_pattern.lower()):
                    return f"–∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É '{exclude_pattern}' (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)"
            else:
                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if filename == exclude_pattern:
                    return f"–∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç '{exclude_pattern}'"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ –ø–æ–¥—Å—Ç—Ä–æ–∫—É
                if exclude_pattern in filename:
                    return f"–∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç '{exclude_pattern}'"
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                if exclude_pattern.lower() in filename.lower():
                    return f"–∏–º—è —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç '{exclude_pattern}' (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)"

        return None

    def is_internal_mass_mailing(self, from_addr: str, to_addrs: List[str], cc_addrs: List[str] = None) -> Optional[str]:
        """üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
        
        if not from_addr or f"@{COMPANY_DOMAIN}" not in from_addr.lower():
            return None

        all_recipients = []
        all_recipients.extend(to_addrs or [])
        all_recipients.extend(cc_addrs or [])

        internal_recipients = 0
        for recipient in all_recipients:
            if f"@{COMPANY_DOMAIN}" in recipient.lower():
                internal_recipients += 1

        if internal_recipients >= 10:
            return f"–º–∞—Å—Å–æ–≤–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Å—ã–ª–∫–∞ ({internal_recipients} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)"

        return None

class AdvancedEmailFetcherV2:
    """üî• –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–∞—Ä—Å–µ—Ä v2.9 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í"""

    def __init__(self, logger):
        self.mail = None
        self.logger = logger
        self.last_connect_time = 0

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        self.data_dir = Path("data")
        self.emails_dir = self.data_dir / "emails"
        self.attachments_dir = self.data_dir / "attachments"
        self.logs_dir = self.data_dir / "logs"
        self.config_dir = Path("config")

        for dir_path in [self.emails_dir, self.attachments_dir, self.logs_dir, self.config_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        self.filters = EmailFilters(self.config_dir, self.logger)

        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            'processed': 0,
            'saved': 0,
            'filtered_subject': 0,
            'filtered_blacklist': 0,
            'filtered_mass_mailing': 0,
            'saved_attachments': 0,
            'saved_inline_images': 0,
            'excluded_attachments': 0,
            'excluded_filenames': 0,
            'excluded_by_size': 0,
            'excluded_by_image_dimensions': 0,
            'unsupported_attachments': 0,
            'skipped_large_emails': 0,
            'errors': 0
        }

    def safe_parse_size(self, size_str) -> int:
        """üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ë–ï–ó —Å–ø–∞–º–∞ –≤ –ª–æ–≥–∞—Ö"""
        try:
            size = int(size_str)
            if 0 <= size < 1_000_000_000:
                return size
            else:
                if size > 1_000_000_000:
                    self.logger.warning(f"   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
                return 0
        except (ValueError, TypeError):
            return 0

    def get_local_time(self, dt: datetime = None) -> datetime:
        """üïí –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ UTC+7"""
        if dt is None:
            dt = datetime.now(LOCAL_TIMEZONE)
        elif dt.tzinfo is None:
            dt = dt.replace(tzinfo=LOCAL_TIMEZONE)
        return dt

    def parse_email_date(self, date_header: str) -> datetime:
        """üìÖ –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –ø–∏—Å—å–º–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º –∫ UTC+7"""
        try:
            parsed_date = email.utils.parsedate_to_datetime(date_header)
            if parsed_date.tzinfo is None:
                parsed_date = parsed_date.replace(tzinfo=timezone.utc)
            local_date = parsed_date.astimezone(LOCAL_TIMEZONE)
            return local_date
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_header}': {e}")
            return self.get_local_time()

    def format_email_date_for_log(self, date_header: str) -> str:
        """üìÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –ø–∏—Å—å–º–∞ –¥–ª—è –ª–æ–≥–∞"""
        email_date = self.parse_email_date(date_header)
        return email_date.strftime('%Y.%m.%d %H:%M')

    def connect(self) -> bool:
        """üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        max_attempts = 3
        for attempt in range(max_attempts):
            try:
                if self.mail:
                    try:
                        self.mail.logout()
                    except:
                        pass

                self.logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {IMAP_SERVER} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts})...")
                self.mail = imaplib.IMAP4(IMAP_SERVER, IMAP_PORT)
                self.mail.starttls(ssl.create_default_context())
                self.mail.login(IMAP_USER, IMAP_PASSWORD)
                self.mail.select('INBOX')
                self.last_connect_time = time.time()
                self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < max_attempts - 1:
                    time.sleep(RETRY_DELAY)

        return False

    def safe_fetch(self, msg_id: bytes, flags: str = '(RFC822)') -> Optional[List]:
        """üõ°Ô∏è –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ —Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏"""
        for attempt in range(MAX_RETRIES):
            try:
                time.sleep(REQUEST_DELAY)
                
                try:
                    status, response = self.mail.noop()
                except Exception as e:
                    self.logger.warning(f"   ‚ö†Ô∏è NOOP failed: {e}")
                    raise ConnectionError("IMAP connection lost")

                timeout_seconds = 10 + (attempt * 5)
                import signal

                def timeout_handler(signum, frame):
                    raise TimeoutError(f"Fetch –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ {timeout_seconds} —Å–µ–∫—É–Ω–¥")

                signal.signal(signal.SIGALRM, timeout_handler)
                signal.alarm(timeout_seconds)

                try:
                    fetch_start = time.time()
                    status, data = self.mail.fetch(msg_id, flags)
                    fetch_time = time.time() - fetch_start
                    signal.alarm(0)

                    if status == 'OK':
                        if data:
                            return data
                        else:
                            self.logger.warning(f"   ‚ö†Ô∏è –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–≤–µ—Ç–µ")
                            return None
                    else:
                        raise Exception(f"IMAP fetch returned: {status}")

                except TimeoutError:
                    signal.alarm(0)
                    raise

            except TimeoutError as e:
                self.logger.error(f"   ‚è∞ –¢–ê–ô–ú–ê–£–¢ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}")
                if attempt < MAX_RETRIES - 1:
                    self.logger.info(f"   üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞...")
                    if not self.connect():
                        continue
                else:
                    self.logger.warning(f"   ‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø—Ä–æ–±—É–µ–º fallback...")
                    return self.try_fallback_fetch(msg_id)

            except (imaplib.IMAP4.abort, ssl.SSLError, OSError, ConnectionError) as e:
                self.logger.warning(f"   ‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < MAX_RETRIES - 1:
                    self.logger.info(f"   üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {RETRY_DELAY} —Å–µ–∫...")
                    time.sleep(RETRY_DELAY)
                    if not self.connect():
                        continue
                else:
                    return None

            except Exception as e:
                self.logger.error(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                if attempt < MAX_RETRIES - 1:
                    time.sleep(RETRY_DELAY)
                else:
                    return None

        return None

    def try_fallback_fetch(self, msg_id: bytes) -> Optional[List]:
        """üîß Fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö"""
        try:
            self.logger.info("   üÜò –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏...")
            status, data = self.mail.fetch(msg_id, '(BODY.PEEK[HEADER])')
            if status == 'OK' and data:
                return [(b'FALLBACK', b'HEADERS_ONLY')]
            return None
        except Exception as e:
            self.logger.error(f"   ‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            return None

    def extract_raw_email(self, fetch_data) -> Optional[bytes]:
        """üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –±–∞–π—Ç–æ–≤ –ø–∏—Å—å–º–∞ –∏–∑ fetch_data"""
        try:
            if not fetch_data:
                self.logger.error(f"   ‚ùå fetch_data –ø—É—Å—Ç–æ–π")
                return None

            if isinstance(fetch_data, (list, tuple)):
                for i, item in enumerate(fetch_data):
                    if isinstance(item, tuple) and len(item) > 1:
                        for j in range(len(item)):
                            try:
                                element = item[j]
                                if isinstance(element, bytes) and len(element) > 500:
                                    return element
                            except IndexError:
                                continue
                    elif isinstance(item, bytes) and len(item) > 500:
                        return item

                # üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                try:
                    if len(fetch_data) > 0:
                        first_item = fetch_data[0]
                        if isinstance(first_item, bytes) and len(first_item) > 500:
                            return first_item
                        elif isinstance(first_item, tuple) and len(first_item) > 1:
                            second_element = first_item[1]
                            if isinstance(second_element, bytes) and len(second_element) > 500:
                                return second_element
                except (IndexError, TypeError):
                    pass

            elif isinstance(fetch_data, bytes):
                return fetch_data

            self.logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∞–π—Ç—ã –ø–∏—Å—å–º–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö")
            return None

        except Exception as e:
            self.logger.error(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ extract_raw_email: {e}")
            return None

    def safe_search(self, criteria: str) -> List[bytes]:
        """üîç –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∏—Å–µ–º"""
        for attempt in range(MAX_RETRIES):
            try:
                status, data = self.mail.search(None, criteria)
                if status == 'OK':
                    return data[0].split() if data else []
                else:
                    raise Exception(f"IMAP search returned: {status}")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < MAX_RETRIES - 1:
                    time.sleep(RETRY_DELAY)
                    if not self.connect():
                        continue
                else:
                    self.logger.error(f"‚ùå –ü–æ–∏—Å–∫ –Ω–µ —É–¥–∞–ª—Å—è")
                    return []
        return []

    def get_email_headers_only(self, msg_id: bytes) -> Optional[email.message.Message]:
        """üìã –£–°–¢–û–ô–ß–ò–í–ê–Ø –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
        for attempt in range(MAX_RETRIES):
            try:
                status, header_data = self.mail.fetch(msg_id, '(BODY.PEEK[HEADER])')
                if status != 'OK':
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {status}")

                raw_headers = self.safe_extract_headers(header_data)
                if raw_headers is None:
                    self.logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—ã—Ä—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ IMAP")
                    return None

                headers_msg = email.message_from_bytes(raw_headers)
                return headers_msg

            except (OSError, imaplib.IMAP4.error) as e:
                self.logger.warning(f"   ‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
                if attempt < MAX_RETRIES - 1:
                    self.logger.info(f"   üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                    if self.connect():
                        continue
                return None

            except Exception as e:
                self.logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ get_email_headers_only: {e}")
                return None

        return None

    def safe_extract_headers(self, header_data):
        """üõ°Ô∏è –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤"""
        try:
            if not header_data:
                self.logger.error(f"   ‚ùå header_data –ø—É—Å—Ç–æ–π")
                return None

            if isinstance(header_data, (list, tuple)):
                for i, item in enumerate(header_data):
                    if isinstance(item, tuple):
                        for j in range(len(item)):
                            try:
                                element = item[j]
                                if isinstance(element, bytes) and j > 0:
                                    if len(element) > 50:
                                        return element
                            except IndexError:
                                continue
                    elif isinstance(item, bytes) and len(item) > 50:
                        return item

                try:
                    if len(header_data) > 0 and isinstance(header_data[0], bytes) and len(header_data) > 50:
                        return header_data
                except (IndexError, TypeError):
                    pass

            elif isinstance(header_data, bytes):
                return header_data

            self.logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö")
            return None

        except Exception as e:
            self.logger.error(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ safe_extract_headers: {e}")
            return None

    def analyze_bodystructure(self, msg_id: bytes) -> Dict:
        """üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∏—Å—å–º–∞"""
        try:
            status, structure_data = self.mail.fetch(msg_id, '(BODYSTRUCTURE)')
            if status != 'OK':
                return {'has_large_attachments': False, 'structure': ''}

            structure_str = ''
            if structure_data and len(structure_data) > 0:
                structure_item = structure_data[0]
                if isinstance(structure_item, bytes):
                    structure_str = structure_item.decode('utf-8', errors='ignore')
                elif isinstance(structure_item, str):
                    structure_str = structure_item
                else:
                    structure_str = str(structure_item)

            has_large = self.detect_large_attachments_from_structure(structure_str)
            return {
                'has_large_attachments': has_large,
                'structure': structure_str
            }

        except Exception as e:
            self.logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return {'has_large_attachments': False, 'structure': ''}

    def detect_large_attachments_from_structure(self, structure_str: str) -> bool:
        """üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–ª—å—à–∏—Ö –≤–ª–æ–∂–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            if not structure_str:
                return False

            structure_lower = structure_str.lower()

            if 'attachment' not in structure_lower and 'application' not in structure_lower:
                return False

            large_indicators = [
                'application/vnd.ms-powerpoint',
                'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                'application/zip',
                'application/x-zip-compressed',
            ]

            for indicator in large_indicators:
                if indicator in structure_lower:
                    self.logger.info(f"   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: {indicator}")
                    return True

            import re
            size_matches = re.findall(r'(\d+)', structure_lower)
            for size_str in size_matches:
                size = self.safe_parse_size(size_str)
                if size > 5_000_000:
                    self.logger.info(f"   ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä: {size} –±–∞–π—Ç")
                    return True

            return False

        except Exception as e:
            self.logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–æ–≤: {e}")
            return False

    def decode_header_value(self, val: str) -> str:
        """üìù –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ MIME-–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º email"""
        from email.header import decode_header, make_header
        import re
        
        try:
            decoded = str(make_header(decode_header(val or '')))
            
            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ email –∏–∑ —É–≥–ª–æ–≤—ã—Ö —Å–∫–æ–±–æ–∫
            match = re.search(r'<([^>]+)>', decoded)
            if match:
                return match.group(1).strip().lower()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —É–≥–ª–æ–≤—ã—Ö —Å–∫–æ–±–æ–∫, –∏—â–µ–º email –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
            email_match = re.search(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', decoded)
            if email_match:
                return email_match.group(0).strip().lower()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω email, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            return decoded.strip().lower()
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ '{val}': {e}")
            return (val or '').lower()

    def extract_plain_text(self, msg: email.message.Message) -> str:
        """üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞"""
        text_parts = []
        max_len = 500_000

        try:
            if msg.is_multipart():
                for part in msg.walk():
                    ctype = part.get_content_type()
                    if ctype in ('text/plain', 'text/html'):
                        try:
                            raw = part.get_payload(decode=True)
                            charset = part.get_content_charset() or 'utf-8'
                            chunk = raw.decode(charset, errors='ignore')
                            if ctype == 'text/html':
                                chunk = re.sub(r'<[^>]+>', '', chunk)
                                chunk = re.sub(r'&[a-z]+;', ' ', chunk)
                            text_parts.append(chunk)
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                            continue
            else:
                try:
                    raw = msg.get_payload(decode=True)
                    if raw:
                        charset = msg.get_content_charset() or 'utf-8'
                        text_parts.append(raw.decode(charset, errors='ignore'))
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")

            full_text = '\n'.join(text_parts)
            return full_text[:max_len].strip()

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            return ""

    def parse_recipient(self, recipients_str: str) -> List[str]:  # –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ!
        """üìß –ü–∞—Ä—Å–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π"""
        if not recipients_str:
            return []
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ email –∞–¥—Ä–µ—Å–æ–≤
        email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
        emails = re.findall(email_pattern, recipients_str)
        return emails

    def save_attachment_or_inline(self, part: email.message.Message, thread_id: str, date_folder: str, is_inline: bool = False) -> Optional[Dict]:
        """üìé –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        try:
            filename = part.get_filename()
            content_type = part.get_content_type()

            if not filename and is_inline and content_type.startswith('image/'):
                extension_map = {
                    'image/jpeg': '.jpg',
                    'image/png': '.png',
                    'image/gif': '.gif',
                    'image/bmp': '.bmp',
                    'image/tiff': '.tiff',
                    'image/webp': '.webp'
                }
                extension = extension_map.get(content_type, '.img')
                timestamp = self.get_local_time().strftime('%H%M%S_%f')
                filename = f"inline_image_{timestamp}{extension}"

            if not filename:
                return None

            filename = self.decode_header_value(filename)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if is_inline or (filename and Path(filename).suffix.lower() in ['.png', '.jpg', '.jpeg', '.gif', '.bmp', '.tiff', '.webp']):
                try:
                    payload = part.get_payload(decode=True)
                    if payload:
                        file_size = len(payload)
                        if file_size == 83509:
                            self.logger.info(f"üö´ –ò–°–ö–õ–Æ–ß–ï–ù–û –ü–û –†–ê–ó–ú–ï–†–£ –§–ê–ô–õ–ê: {filename} - {file_size} –±–∞–π—Ç (–º—É—Å–æ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)")
                            self.stats['excluded_by_size'] += 1
                            return {
                                "original_filename": filename,
                                "status": "excluded_by_size",
                                "file_size": file_size,
                                "is_inline": is_inline
                            }

                        try:
                            img = Image.open(io.BytesIO(payload))
                            width, height = img.size
                            if width == 416 and height == 250:
                                self.logger.info(f"üö´ –ò–°–ö–õ–Æ–ß–ï–ù–û –ü–û –†–ê–ó–ú–ï–†–ê–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø: {filename} - {width}√ó{height} –ø–∏–∫—Å–µ–ª–µ–π")
                                self.stats['excluded_by_image_dimensions'] += 1
                                return {
                                    "original_filename": filename,
                                    "status": "excluded_by_size",
                                    "file_size": file_size,
                                    "is_inline": is_inline
                                }
                        except Exception:
                            pass
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {filename}: {e}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename_exclusion = self.filters.is_filename_excluded(filename)
            if filename_exclusion:
                self.logger.info(f"üö´ –ò–°–ö–õ–Æ–ß–ï–ù–û –ü–û –ò–ú–ï–ù–ò: {filename} - {filename_exclusion}")
                self.stats['excluded_filenames'] += 1
                return {"original_filename": filename, "status": "excluded_filename", "is_inline": is_inline}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_ext = Path(filename).suffix.lower()
            if file_ext in EXCLUDED_EXTENSIONS:
                self.logger.info(f"üö´ –ò–°–ö–õ–Æ–ß–ï–ù–û –ü–û –†–ê–°–®–ò–†–ï–ù–ò–Æ: {filename} - —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ {file_ext} –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
                self.stats['excluded_attachments'] += 1
                return {"original_filename": filename, "status": "excluded", "is_inline": is_inline}

            if file_ext not in SUPPORTED_ATTACHMENTS:
                self.logger.info(f"‚ö†Ô∏è –ù–ï–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–û–ï –†–ê–°–®–ò–†–ï–ù–ò–ï: {filename} - {file_ext}")
                self.stats['unsupported_attachments'] += 1
                return {"original_filename": filename, "status": "unsupported", "is_inline": is_inline}

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            attachment_icon = "üñºÔ∏è" if is_inline else "üìé"
            attachments_date_dir = self.attachments_dir / date_folder
            attachments_date_dir.mkdir(exist_ok=True)

            safe_filename = re.sub(r'[^\w\s\-\.]', '_', filename)
            timestamp = self.get_local_time().strftime('%H%M%S')
            prefix = "inline" if is_inline else "attach"
            unique_filename = f"{thread_id}_{timestamp}_{prefix}_{safe_filename}"

            attachment_path = attachments_date_dir / unique_filename

            payload = part.get_payload(decode=True)
            if payload:
                with open(attachment_path, 'wb') as f:
                    f.write(payload)
                file_size = len(payload)

                self.logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {attachment_icon} –≤–ª–æ–∂–µ–Ω–∏–µ: {filename} ({file_size} –±–∞–π—Ç)")

                if is_inline:
                    self.stats['saved_inline_images'] += 1
                else:
                    self.stats['saved_attachments'] += 1

                return {
                    "original_filename": filename,
                    "saved_filename": unique_filename,
                    "file_path": str(attachment_path),
                    "file_size": file_size,
                    "status": "saved",
                    "is_inline": is_inline
                }

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {'–≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' if is_inline else '–≤–ª–æ–∂–µ–Ω–∏—è'} {filename}: {e}")
            return None

        return None

    def process_single_email(self, msg_id: bytes, date_str: str, email_num_in_day: int, total_emails_in_day: int) -> Optional[Dict]:
        """üìß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Üí —Ñ–∏–ª—å—Ç—Ä—ã ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–°–ï–• –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞
        attachments = []
        attachments_stats = {
            'total': 0, 'saved': 0, 'excluded': 0, 'excluded_filenames': 0,
            'excluded_by_size': 0, 'excluded_by_image_dimensions': 0,
            'unsupported': 0, 'inline_images': 0
        }
        body_text = ""
        msg = None
        thread_id = ""
        date_folder = ""
        from_addr = ""
        to_addr = ""
        cc_addr = ""
        subject = ""
        date = ""
        to_emails = []
        cc_emails = []
        raw_email = b""
        email_date_formatted = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"

        self.logger.info("_" * 70)
        self.stats['processed'] += 1

        try:
            # –®–ê–ì 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers_msg = self.get_email_headers_only(msg_id)
            if not headers_msg:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏")
                self.stats['errors'] += 1
                return None

            # –®–ê–ì 2: –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            try:
                date_header = headers_msg.get('Date', '')
                email_date_formatted = self.format_email_date_for_log(date_header)
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
                email_date_formatted = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–∞—Ç–∞"

            try:
                # ‚úÖ –ù–û–í–´–ô –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–û–î
                from email.utils import getaddresses
                
                # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º decode_header_value
                from_addr = self.decode_header_value(headers_msg.get('From', ''))
                subject = self.decode_header_value(headers_msg.get('Subject', ''))
                date = self.decode_header_value(headers_msg.get('Date', date_str))
                
                # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º getaddresses
                raw_to = headers_msg.get('To', '')
                raw_cc = headers_msg.get('Cc', '')
                to_emails = [addr.lower().strip() for name, addr in getaddresses([raw_to]) if addr]
                cc_emails = [addr.lower().strip() for name, addr in getaddresses([raw_cc]) if addr]
                
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ª–æ–≥–∞–º–∏
                to_addr = ', '.join(to_emails[:3]) + ('...' if len(to_emails) > 3 else '')
                cc_addr = ', '.join(cc_emails[:3]) + ('...' if len(cc_emails) > 3 else '')
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
                to_emails = []
                cc_emails = []

            self.logger.info(f"üîç –û–ë–†–ê–ë–û–¢–ö–ê –ü–ò–°–¨–ú–ê {email_num_in_day}/{total_emails_in_day}, {email_date_formatted}")
            self.logger.info(f"üìß –û—Ç: {from_addr}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
            self.logger.info(f"   –¢–µ–º–∞: {subject[:100]}...")

            # –®–ê–ì 3: –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–ï–†–ï–î –ó–ê–ì–†–£–ó–ö–û–ô

            # üö´ –§–ò–õ–¨–¢–† 1: –¢–µ–º–∞ –ø–∏—Å—å–º–∞
            subject_filter = self.filters.is_subject_filtered(subject)
            if subject_filter:
                self.logger.info(f"üö´ –ò–°–ö–õ–Æ–ß–ï–ù–û –ü–û –¢–ï–ú–ï: {subject_filter}")
                self.stats['filtered_subject'] += 1
                return None

            # üö´ –§–ò–õ–¨–¢–† 2: –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
            blacklist_filter = self.filters.is_sender_blacklisted(from_addr)
            if blacklist_filter:
                self.logger.info(f"üö´ –ò–°–ö–õ–Æ–ß–ï–ù–û –ü–û –ê–î–†–ï–°–£: {blacklist_filter}")
                self.stats['filtered_blacklist'] += 1
                return None

            # üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ to_emails –∏ cc_emails –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            if not to_emails and to_addr:
                self.logger.warning(f"‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: to_emails –ø—É—Å—Ç, –Ω–æ to_addr = {to_addr}")
            if not cc_emails and cc_addr:
                self.logger.warning(f"‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: cc_emails –ø—É—Å—Ç, –Ω–æ cc_addr = {cc_addr}")

            # üö´ –§–ò–õ–¨–¢–† 3: –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
            mass_mailing_filter = self.filters.is_internal_mass_mailing(from_addr, to_emails, cc_emails)
            if mass_mailing_filter:
                self.logger.info(f"üö´ –ò–°–ö–õ–Æ–ß–ï–ù–û –ü–û –†–ê–°–°–´–õ–ö–ï: {mass_mailing_filter}")
                self.stats['filtered_mass_mailing'] += 1
                return None

            self.logger.info(f"‚úÖ –ü–∏—Å—å–º–æ –ø—Ä–æ—à–ª–æ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é...")


            # –®–ê–ì 4: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            structure_info = self.analyze_bodystructure(msg_id)
            has_large_attachments = structure_info['has_large_attachments']

            # –°–æ–∑–¥–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            try:
                thread_id = self.generate_thread_id(from_addr, subject, date)
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ thread_id: {e}")
                thread_id = f"unknown_{self.get_local_time().strftime('%Y%m%d_%H%M%S')}"

            try:
                email_date = self.parse_email_date(date)
                date_folder = email_date.strftime('%Y-%m-%d')
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –ø–∏—Å—å–º–∞: {e}")
                date_folder = self.get_local_time().strftime('%Y-%m-%d')

            emails_date_dir = self.emails_dir / date_folder
            emails_date_dir.mkdir(exist_ok=True)

            # –®–ê–ì 5: –£–ú–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê
            if has_large_attachments:
                self.logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –±–æ–ª—å—à–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö...")
                msg = headers_msg
                try:
                    status, text_data = self.mail.fetch(msg_id, '(BODY.PEEK[1])')
                    if status == 'OK' and text_data:
                        raw_text = self.extract_raw_email(text_data)
                        if raw_text:
                            body_text = raw_text.decode('utf-8', errors='ignore')[:10000]
                        else:
                            body_text = "[–¢–µ–∫—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è]"
                    else:
                        body_text = f"[–ü–∏—Å—å–º–æ —Å –±–æ–ª—å—à–∏–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ - —Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤]"
                except Exception as e:
                    self.logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –±–æ–ª—å—à–æ–≥–æ –ø–∏—Å—å–º–∞: {e}")
                    body_text = "[–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –±–æ–ª—å—à–æ–≥–æ –ø–∏—Å—å–º–∞]"

                self.logger.info(f"üìé –í–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ —Ä–∞–∑–º–µ—Ä–∞")
                self.stats['skipped_large_emails'] += 1

            else:
                fetch_data = self.safe_fetch(msg_id)
                if not fetch_data:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–æ")
                    self.stats['errors'] += 1
                    return None

                raw_email = self.extract_raw_email(fetch_data)
                if not raw_email:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—ã—Ä–æ–π –±–∞–π—Ç–æ–≤—ã–π –ø–æ—Ç–æ–∫ –ø–∏—Å—å–º–∞")
                    self.stats['errors'] += 1
                    return None

                try:
                    msg = email.message_from_bytes(raw_email)
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ email: {e}")
                    self.stats['errors'] += 1
                    return None

                try:
                    body_text = self.extract_plain_text(msg)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
                    body_text = "[–û–®–ò–ë–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –¢–ï–ö–°–¢–ê]"

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
                self.logger.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π...")
                try:
                    if msg.is_multipart():
                        for part_num, part in enumerate(msg.walk()):
                            try:
                                content_disposition = part.get_content_disposition()
                                content_type = part.get_content_type()

                                is_attachment = False
                                is_inline = False

                                if content_disposition == 'attachment':
                                    is_attachment = True
                                elif (content_disposition == 'inline' and content_type.startswith('image/')) or \
                                     (not content_disposition and content_type.startswith('image/') and part.get_filename()):
                                    is_attachment = True
                                    is_inline = True

                                if is_attachment:
                                    attachments_stats['total'] += 1
                                    attachment_info = self.save_attachment_or_inline(part, thread_id, date_folder, is_inline)

                                    if attachment_info:
                                        attachments.append(attachment_info)
                                        status = attachment_info.get('status', 'unknown')
                                        if status == 'saved':
                                            attachments_stats['saved'] += 1
                                            if is_inline:
                                                attachments_stats['inline_images'] += 1
                                        elif status == 'excluded':
                                            attachments_stats['excluded'] += 1
                                        elif status == 'excluded_filename':
                                            attachments_stats['excluded_filenames'] += 1
                                        elif status == 'excluded_by_size':
                                            attachments_stats['excluded_by_size'] += 1
                                        elif status == 'unsupported':
                                            attachments_stats['unsupported'] += 1

                            except Exception as e:
                                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ {part_num}: {e}")
                                continue

                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π: {e}")

            # –°–ë–û–†–ö–ê –î–ê–ù–ù–´–• –ü–ò–°–¨–ú–ê
            email_data = {
                "thread_id": thread_id,
                "message_id": headers_msg.get('Message-ID', ''),
                "from": from_addr,
                "to": to_addr,
                "cc": cc_addr,
                "to_emails": to_emails,
                "cc_emails": cc_emails,
                "subject": subject,
                "date": date,
                "parsed_date": email_date.isoformat() if 'email_date' in locals() else None,
                "body": body_text,
                "char_count": len(body_text),
                "attachments": attachments,
                "attachments_stats": attachments_stats,
                "processed_at": self.get_local_time().isoformat(),
                "raw_size": len(raw_email) if raw_email else 0,
                "date_folder": date_folder
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ
            try:
                email_filename = f"email_{email_num_in_day:03d}_{date_folder.replace('-', '')}_{thread_id}.json"
                email_path = emails_date_dir / email_filename

                with open(email_path, 'w', encoding='utf-8') as f:
                    json.dump(email_data, f, ensure_ascii=False, indent=2)

                self.logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {email_filename}")

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Å—å–º–∞: {e}")
                self.stats['errors'] += 1
                return None

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
            if attachments_stats['total'] > 0:
                inline_info = f" + {attachments_stats['inline_images']}üñºÔ∏è" if attachments_stats['inline_images'] > 0 else ""
                filename_excluded = f" + {attachments_stats['excluded_filenames']}üìù" if attachments_stats['excluded_filenames'] > 0 else ""
                size_excluded = f" + {attachments_stats['excluded_by_size']}üìè" if attachments_stats['excluded_by_size'] > 0 else ""
                self.logger.info(f"üìé –í–ª–æ–∂–µ–Ω–∏–π: {attachments_stats['saved']}‚úÖ + {attachments_stats['excluded']}üö´ + {attachments_stats['unsupported']}‚ö†Ô∏è{inline_info}{filename_excluded}{size_excluded} –∏–∑ {attachments_stats['total']}")

            self.stats['saved'] += 1
            self.logger.info(f"‚úÖ –ü–ò–°–¨–ú–û –°–û–•–†–ê–ù–ï–ù–û")
            return email_data

        except Exception as e:
            self.logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ {email_num_in_day}: {e}")
            self.logger.error(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            self.logger.error(f"   –¢—Ä–µ–π—Å: {traceback.format_exc()}")
            self.stats['errors'] += 1
            return None

    def generate_thread_id(self, from_addr: str, subject: str, date: str) -> str:
        """üÜî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Ç—Ä–µ–¥–∞"""
        try:
            clean_subject = re.sub(r'^(Re:|Fwd:|Fw:)\s*', '', subject, flags=re.IGNORECASE).strip()
            sender_match = re.search(r'@([^>\s]+)', from_addr)
            domain = sender_match.group(1) if sender_match else 'unknown'
            hash_base = f"{domain}_{clean_subject}_{date[:10]}"
            hash_obj = hashlib.md5(hash_base.encode('utf-8'))
            email_date = self.parse_email_date(date)
            date_part = email_date.strftime('%Y%m%d')
            short_hash = hash_obj.hexdigest()[:8]
            return f"{date_part}_{domain.replace('.', '_')}_{short_hash}"
        except:
            return f"unknown_{self.get_local_time().strftime('%Y%m%d_%H%M%S')}"

    def fetch_emails_by_date_range(self, start_date: datetime, end_date: datetime) -> List[Dict]:
        """üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å –ù–û–í–û–ô –õ–û–ì–ò–ö–û–ô"""
        
        self.logger.info(f"üéØ –ó–ê–ì–†–£–ó–ö–ê –ü–ò–°–ï–ú –ó–ê –ü–ï–†–ò–û–î (UTC+7)")
        self.logger.info(f"   üìÖ C: {start_date.strftime('%Y-%m-%d')}")
        self.logger.info(f"   üìÖ –î–æ: {end_date.strftime('%Y-%m-%d')}")
        self.logger.info(f"   üö´ –§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã: {len(self.filters.subject_filters)} —Ç–µ–º, {len(self.filters.blacklist)} –∞–¥—Ä–µ—Å–æ–≤")
        self.logger.info(f"   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {len(SUPPORTED_ATTACHMENTS)}")
        self.logger.info(f"   üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {len(EXCLUDED_EXTENSIONS)}")
        self.logger.info(f"   üìù –ò—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ –∏–º–µ–Ω–∞–º: {len(self.filters.filename_excludes)}")
        self.logger.info(f"   üñºÔ∏è –í–∫–ª—é—á–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        self.logger.info(f"   üöÄ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Üí —Ñ–∏–ª—å—Ç—Ä—ã ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞")
        self.logger.info("-" * 70)

        if not self.connect():
            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return []

        all_emails = []
        current_date = start_date
        processed_emails_total = 0
        total_saved = 0

        while current_date <= end_date:
            date_imap = current_date.strftime('%d-%b-%Y')
            date_display = current_date.strftime('%Y-%m-%d')

            self.logger.info("=" * 70)
            self.logger.info(f"üì¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ {date_display}...")

            criteria = f'(ON "{date_imap}")'
            msg_ids = self.safe_search(criteria)

            if len(msg_ids) > 0:
                self.logger.info(f"   –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º: {len(msg_ids)}")
                saved_today = 0

                for day_email_num, msg_id in enumerate(msg_ids, 1):
                    if processed_emails_total > 0 and processed_emails_total % BATCH_SIZE == 0:
                        self.logger.info(f"üîÑ –ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                        if not self.connect():
                            continue

                    email_data = self.process_single_email(msg_id, date_display, day_email_num, len(msg_ids))

                    if email_data:
                        all_emails.append(email_data)
                        saved_today += 1
                        total_saved += 1

                    processed_emails_total += 1

                self.logger.info(f"üìä –ò—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–∏—Å–µ–º –∑–∞ {date_display}: {saved_today}")
            else:
                self.logger.info(f"üì≠ –ü–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            current_date += timedelta(days=1)
            time.sleep(0.1)

        self.logger.info("=" * 70)
        self.logger.info(f"üéØ –û–ë–©–ò–ô –ò–¢–û–ì –ó–ê –í–°–ï –î–ù–ò: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total_saved} –ø–∏—Å–µ–º")

        self.save_processing_stats(start_date, end_date)
        self.print_final_stats()

        return all_emails

    def save_processing_stats(self, start_date: datetime, end_date: datetime):
        """üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        start_str = start_date.strftime('%Y%m%d')
        end_str = end_date.strftime('%Y%m%d')

        stats = {
            "period": f"{start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}",
            "processed_at": self.get_local_time().isoformat(),
            "stats": self.stats,
            "filters": {
                "subject_filters": list(self.filters.subject_filters),
                "blacklist": list(self.filters.blacklist),
                "filename_excludes": self.filters.filename_excludes
            },
            "supported_attachments": list(SUPPORTED_ATTACHMENTS.keys()),
            "excluded_extensions": list(EXCLUDED_EXTENSIONS)
        }

        stats_path = self.logs_dir / f"processing_stats_{start_str}_{end_str}.json"

        try:
            with open(stats_path, 'w', encoding='utf-8') as f:
                json.dump(stats, f, ensure_ascii=False, indent=2)
            self.logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_path}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def print_final_stats(self):
        """üìä –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø–æ–ª–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
        self.logger.info("="*70)
        self.logger.info("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        self.logger.info("="*70)
        self.logger.info(f"üìß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {self.stats['processed']}")
        self.logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–∏—Å–µ–º: {self.stats['saved']}")
        self.logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ —Ç–µ–º–µ: {self.stats['filtered_subject']}")
        self.logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ —á–µ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É: {self.stats['filtered_blacklist']}")
        self.logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –º–∞—Å—Å–æ–≤—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫: {self.stats['filtered_mass_mailing']}")
        self.logger.info("")
        self.logger.info("üìé –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–õ–û–ñ–ï–ù–ò–ô:")
        self.logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: {self.stats['saved_attachments']}")
        self.logger.info(f"üñºÔ∏è –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.stats['saved_inline_images']}")
        self.logger.info(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é: {self.stats['excluded_attachments']}")
        self.logger.info(f"üìù –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {self.stats['excluded_filenames']}")
        self.logger.info(f"üìè –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞: {self.stats['excluded_by_size']}")
        self.logger.info(f"üñºÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {self.stats['excluded_by_image_dimensions']}")
        self.logger.info(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö: {self.stats['unsupported_attachments']}")

        total_attachments = (self.stats['saved_attachments'] + self.stats['saved_inline_images'] +
                           self.stats['excluded_attachments'] + self.stats['excluded_filenames'] +
                           self.stats['excluded_by_size'] + self.stats['excluded_by_image_dimensions'] +
                           self.stats['unsupported_attachments'])

        if total_attachments > 0:
            saved_total = self.stats['saved_attachments'] + self.stats['saved_inline_images']
            efficiency = (saved_total / total_attachments) * 100
            self.logger.info(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {efficiency:.1f}%")

        self.logger.info(f"‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {self.stats['errors']}")
        self.logger.info(f"üìè –ü—Ä–æ–ø—É—â–µ–Ω–æ –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º: {self.stats['skipped_large_emails']}")

        total_filtered = (self.stats['filtered_subject'] + self.stats['filtered_blacklist'] + 
                         self.stats['filtered_mass_mailing'])
        self.logger.info(f"üö´ –í—Å–µ–≥–æ –ø–∏—Å–µ–º –∏—Å–∫–ª—é—á–µ–Ω–æ: {total_filtered}")

        if self.stats['processed'] > 0:
            save_rate = (self.stats['saved'] / self.stats['processed']) * 100
            self.logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∏—Å–µ–º: {save_rate:.1f}%")

        self.logger.info("="*70)

    def close(self):
        """üîê –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.mail:
            try:
                self.mail.logout()
                self.logger.info("üîê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            except:
                pass

def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ v2.9 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    start_date = datetime(2025, 7, 3)
    end_date = datetime(2025, 7, 3)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–ï–†–ï–î —Å–æ–∑–¥–∞–Ω–∏–µ–º fetcher'–∞
    logs_dir = Path("data/logs")
    logger = setup_logging(logs_dir, start_date, end_date)

    logger.info("üìß –ü–†–û–î–í–ò–ù–£–¢–´–ô IMAP-–ü–ê–†–°–ï–† v2.9 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ë–ê–ì–û–í")
    logger.info("="*75)
    logger.info(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥: {start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}")
    logger.info(f"‚úÖ –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ: {', '.join(SUPPORTED_ATTACHMENTS.keys())}")
    logger.info(f"üö´ –ò—Å–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è: {', '.join(EXCLUDED_EXTENSIONS)}")
    logger.info(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–´: —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫, decode_header_value, extract_raw_email")

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –ª–æ–≥–≥–µ—Ä–æ–º
    fetcher = AdvancedEmailFetcherV2(logger=logger)

    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞
        emails = fetcher.fetch_emails_by_date_range(start_date, end_date)

        logger.info("üéâ –ó–ê–ì–†–£–ó–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–û–õ–ù–´–ú –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú –ë–ê–ì–û–í!")
        logger.info("   üìÅ –ü–∏—Å—å–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: data/emails/[–¥–∞—Ç–∞_–ø–∏—Å—å–º–∞]/")
        logger.info("   üìé –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤: data/attachments/[–¥–∞—Ç–∞_–ø–∏—Å—å–º–∞]/")
        logger.info("   üìù –õ–æ–≥–∏ –≤: data/logs/")

        if emails:
            logger.info("üìã –°–¢–†–£–ö–¢–£–†–ê –ì–û–¢–û–í–ê –î–õ–Ø LLM –ê–ù–ê–õ–ò–ó–ê:")
            logger.info("   ‚úÖ –ö–∞–∂–¥–æ–µ –ø–∏—Å—å–º–æ = –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON —Ñ–∞–π–ª")
            logger.info("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π")
            logger.info("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ info@*, news@*")
            logger.info("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù decode_header_value –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è email")
            logger.info("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù extract_raw_email –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ bytes")
            logger.info("   ‚úÖ –£–±—Ä–∞–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –≤ process_single_email")

    except KeyboardInterrupt:
        logger.warning("‚èπÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        fetcher.close()
        logger.info("üéØ –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ï–ê–ù–°–ê –û–ë–†–ê–ë–û–¢–ö–ò")

if __name__ == '__main__':
    main()
