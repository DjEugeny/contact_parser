#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º ‚Üí OCR ‚Üí LLM ‚Üí —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ç–∞–±–ª–∏—Ü—ã

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã:
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ)
2. OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
3. LLM –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
4. –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ rate limit
5. –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google Sheets –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
"""

import sys
import argparse
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent / "src"))

from google_sheets_bridge import LLM_Sheets_Bridge


def demo_single_date(date: str, max_emails: int = None):
    """üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã
    
    Args:
        date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        max_emails: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    print(f"\nüöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ô –¶–ï–ü–û–ß–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò")
    print(f"üìÖ –î–∞—Ç–∞: {date}")
    if max_emails:
        print(f"üìß –õ–∏–º–∏—Ç –ø–∏—Å–µ–º: {max_emails}")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ—Å—Ç
    bridge = LLM_Sheets_Bridge()
    
    print("\nüîß –ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´:")
    print(f"   üìß Email Fetcher: ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–µ")
    print(f"   üîç OCR Processor: ‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–ª–æ–∂–µ–Ω–∏–π")
    print(f"   ü§ñ LLM Processor: ‚úÖ –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É (rate limit: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π)")
    
    if bridge.exporter.client:
        print(f"   üìä Google Sheets: ‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω")
    else:
        print(f"   üìä Google Sheets: ‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω (–±—É–¥–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç)")
    
    print(f"   üíæ Local Exporter: ‚úÖ –ì–æ—Ç–æ–≤ –∫–∞–∫ fallback")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É
    print(f"\nüîÑ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –¶–ï–ü–û–ß–ö–ò...")
    
    try:
        success = bridge.process_and_export(date, max_emails=max_emails)
        
        if success:
            print(f"\nüéâ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!")
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {date} –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            if hasattr(bridge.processor, 'statistics') and bridge.processor.statistics:
                stats = bridge.processor.statistics
                print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:")
                print(f"   üìß –ü–∏—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('emails_processed', 0)}")
                print(f"   üîç OCR –æ–ø–µ—Ä–∞—Ü–∏–π: {stats.get('ocr_operations', 0)}")
                print(f"   ü§ñ LLM –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('total_requests', 0)}")
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('successful_requests', 0)}")
                print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('failed_requests', 0)}")
                
                if hasattr(bridge.processor, 'contacts') and bridge.processor.contacts:
                    print(f"   üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(bridge.processor.contacts)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                    top_contacts = sorted(bridge.processor.contacts, 
                                         key=lambda x: x.get('priority', 0), 
                                         reverse=True)[:3]
                    
                    print(f"\nüèÜ –¢–û–ü-3 –ö–û–ù–¢–ê–ö–¢–ê –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–£:")
                    for i, contact in enumerate(top_contacts, 1):
                        print(f"   {i}. {contact.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ")
                        print(f"      üìß {contact.get('email', '–ù–µ—Ç email')}")
                        print(f"      üìû {contact.get('phone', '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}")
                        print(f"      üè¢ {contact.get('company', '–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏')}")
                        print(f"      ‚≠ê –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {contact.get('priority', 0)}/10")
                        print()
        else:
            print(f"\n‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨")
            print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã")
        return False
        
    return success


def demo_date_range(start_date: str, end_date: str, max_emails: int = None):
    """üìÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    
    Args:
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        max_emails: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –¥–µ–Ω—å
    """
    print(f"\nüöÄ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –î–ò–ê–ü–ê–ó–û–ù–ê –î–ê–¢")
    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
    if max_emails:
        print(f"üìß –õ–∏–º–∏—Ç –ø–∏—Å–µ–º –≤ –¥–µ–Ω—å: {max_emails}")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ—Å—Ç
    bridge = LLM_Sheets_Bridge()
    
    try:
        success = bridge.process_date_range(start_date, end_date, max_emails=max_emails)
        
        if success:
            print(f"\nüéâ –î–ò–ê–ü–ê–ó–û–ù –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù!")
        else:
            print(f"\n‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –î–ò–ê–ü–ê–ó–û–ù–ê –ù–ï –£–î–ê–õ–ê–°–¨")
            
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False
        
    return success


def main():
    """üéØ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    parser = argparse.ArgumentParser(
        description="üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python demo_full_pipeline.py --date 2025-01-15
  python demo_full_pipeline.py --date 2025-01-15 --max-emails 5
  python demo_full_pipeline.py --start-date 2025-01-10 --end-date 2025-01-15
  python demo_full_pipeline.py --start-date 2025-01-10 --end-date 2025-01-15 --max-emails 3

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
1. –ó–∞–≥—Ä—É–∑–∏—Ç –ø–∏—Å—å–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
2. –û–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OCR
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ LLM
4. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google Sheets –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
        """
    )
    
    # –ì—Ä—É–ø–ø–∞ –¥–ª—è –æ–¥–Ω–æ–π –¥–∞—Ç—ã
    single_group = parser.add_argument_group('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –¥–∞—Ç—ã')
    single_group.add_argument(
        '--date', 
        type=str, 
        help='–î–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD'
    )
    
    # –ì—Ä—É–ø–ø–∞ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    range_group = parser.add_argument_group('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç')
    range_group.add_argument(
        '--start-date', 
        type=str, 
        help='–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD'
    )
    range_group.add_argument(
        '--end-date', 
        type=str, 
        help='–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD'
    )
    
    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument(
        '--max-emails', 
        type=int, 
        help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∑–∞ –¥–µ–Ω—å)'
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if args.date and (args.start_date or args.end_date):
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–ª—å–∑—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å --date –∏ --start-date/--end-date")
        return False
        
    if (args.start_date and not args.end_date) or (args.end_date and not args.start_date):
        print("‚ùå –û—à–∏–±–∫–∞: –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ --start-date, –∏ --end-date")
        return False
        
    if not args.date and not args.start_date:
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
        print(f"‚ÑπÔ∏è –î–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: {yesterday}")
        args.date = yesterday
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç
    def validate_date(date_str):
        try:
            datetime.strptime(date_str, '%Y-%m-%d')
            return True
        except ValueError:
            return False
    
    if args.date and not validate_date(args.date):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã '{args.date}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        return False
        
    if args.start_date and not validate_date(args.start_date):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã '{args.start_date}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        return False
        
    if args.end_date and not validate_date(args.end_date):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã '{args.end_date}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD")
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    if args.date:
        success = demo_single_date(args.date, args.max_emails)
    else:
        success = demo_date_range(args.start_date, args.end_date, args.max_emails)
    
    if success:
        print(f"\nüéØ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Google Sheets –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö")
        return True
    else:
        print(f"\n‚ùå –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò")
        print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã")
        return False


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)