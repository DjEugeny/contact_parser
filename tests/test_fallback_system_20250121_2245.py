#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã fallback —Å —Ç—Ä–µ–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-21 22:45 (UTC+07)
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from llm_extractor import ContactExtractor
import json

def test_provider_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    extractor = ContactExtractor(test_mode=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç—Ä–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    providers = extractor.providers
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(providers)}")
    
    expected_providers = ['openrouter', 'groq', 'replicate']
    for provider_id in expected_providers:
        if provider_id in providers:
            provider = providers[provider_id]
            print(f"‚úÖ {provider['name']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {provider['priority']})")
        else:
            print(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return len(providers) >= 3

def test_provider_fallback_simulation():
    """–¢–µ—Å—Ç —Å–∏–º—É–ª—è—Ü–∏–∏ fallback –º–µ–∂–¥—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Å–∏—Å—Ç–µ–º—ã...")
    
    extractor = ContactExtractor(test_mode=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    initial_provider = extractor._get_first_active_provider()
    print(f"üéØ –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {initial_provider}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    failure_result = extractor.simulate_provider_failure(initial_provider)
    print(f"üí• –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–∞–∑–∞: {failure_result['message']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    switch_result = extractor._switch_to_next_provider()
    if switch_result:
        new_provider = extractor._get_first_active_provider()
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞: {new_provider}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
    
    return switch_result

def test_provider_health_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    extractor = ContactExtractor(test_mode=True)
    health = extractor.get_provider_health()
    
    print("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    for provider_id, status in health['providers'].items():
        status_icon = "‚úÖ" if status['active'] else "‚ùå"
        print(f"  {status_icon} {provider_id}: {status['status']} (–æ—à–∏–±–æ–∫: {status['failure_count']})")
    
    print(f"üè• –û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {health['system_health']}")
    if health['recommendations']:
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in health['recommendations']:
            print(f"  - {rec}")
    
    return health

def test_configuration_file():
    """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("\nüìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    config_path = Path(__file__).parent.parent / "config" / "providers.json"
    
    if config_path.exists():
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {config_path}")
        
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        print(f"üìã –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {len(config.get('providers', {}))}")
        print(f"üîÑ –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {config.get('fallback_settings', {}).get('max_retries', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}")
        
        return True
    else:
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã fallback —Å —Ç—Ä–µ–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏")
    print("=" * 60)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", test_provider_configuration),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª", test_configuration_file),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è", test_provider_health_check),
        ("Fallback —Å–∏—Å—Ç–µ–º–∞", test_provider_fallback_simulation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            result = test_func()
            results.append((test_name, "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"))
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, f"üí• –û–®–ò–ë–ö–ê: {e}"))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    for test_name, status in results:
        print(f"  {status} {test_name}")
    
    print(f"\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: 2025-01-21 22:45 (UTC+07)")

if __name__ == "__main__":
    main()