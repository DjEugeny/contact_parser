#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì¶ –¢–û–ß–ï–ß–ù–´–ô –ø–∞–∫–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∏—Å–µ–º
"""

import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))
from llm_commercial_tester import CommercialOfferLLMTester

class PrecisionBatchLLMTester:
    """üì¶ –¢–æ—á–µ—á–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä"""
    
    def __init__(self):
        self.tester = CommercialOfferLLMTester()
    
    def test_specific_emails(self, test_cases: list):
        """üéØ –¢–æ—á–µ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∏—Å–µ–º"""
        
        print(f"üéØ –¢–û–ß–ï–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(test_cases)} –ü–ò–°–ï–ú")
        print("="*70)
        
        results = []
        
        for i, (date, email_number) in enumerate(test_cases, 1):
            print(f"\nüìß –¢–ï–°–¢ {i}/{len(test_cases)}: {date}, –ø–∏—Å—å–º–æ #{email_number}")
            print("-"*50)
            
            result = self.tester.test_specific_email(date, email_number)
            
            if 'error' not in result:
                # –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                llm_data = result.get('llm_analysis', {}).get('data', {})
                
                contacts_found = bool(llm_data.get('contacts', {}).get('sender_name'))
                kp_found = llm_data.get('commercial_offer', {}).get('amplifier_found', False)
                
                print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã: {'‚úì' if contacts_found else '‚úó'}")
                print(f"   üìã –ö–ü —Å –∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º: {'‚úì' if kp_found else '‚úó'}")
                print(f"   üéØ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {llm_data.get('context', {}).get('status', 'N/A')}")
                
                results.append(result)
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        
        return results


def main():
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ—á–µ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üì¶ –¢–û–ß–ï–ß–ù–´–ô –ü–ê–ö–ï–¢–ù–´–ô LLM –¢–ï–°–¢–ï–†")
    print("="*70)
    
    tester = PrecisionBatchLLMTester()
    
    print("\nüéØ –†–ï–ñ–ò–ú–´ –¢–û–ß–ï–ß–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–∏—Å–µ–º")
    print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞")
    print("3. –í—ã—Ö–æ–¥")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == '1':
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_cases = [
            ("2025-07-28", 1),  # –ü–∏—Å—å–º–æ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π
            ("2025-07-28", 5),  # –ü–∏—Å—å–º–æ —Å 5 –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
            ("2025-08-05", 2),  # –î—Ä—É–≥–∞—è –¥–∞—Ç–∞
        ]
        
        print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:")
        for date, num in test_cases:
            print(f"   - {date}, –ø–∏—Å—å–º–æ #{num}")
        
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").strip().lower()
        if confirm == 'y':
            results = tester.test_specific_emails(test_cases)
            print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –ø–∏—Å–µ–º")
    
    elif choice == '2':
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        test_cases = []
        
        available_dates = tester.tester.email_loader.get_available_date_folders()
        print(f"\nüìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã: {', '.join(available_dates)}")
        
        while True:
            print(f"\nüìß –î–æ–±–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –¥–ª—è —Ç–µ—Å—Ç–∞:")
            print(f"   –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(test_cases)} –ø–∏—Å–µ–º")
            
            date = input("–î–∞—Ç–∞ (YYYY-MM-DD) –∏–ª–∏ '–≥–æ—Ç–æ–≤–æ': ").strip()
            if date.lower() == '–≥–æ—Ç–æ–≤–æ':
                break
            
            if date not in available_dates:
                print(f"‚ùå –î–∞—Ç–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                continue
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∏—Å—å–º–∞ –∑–∞ –¥–∞—Ç—É
            tester.tester.show_available_emails(date)
            
            try:
                email_num = int(input("–ù–æ–º–µ—Ä –ø–∏—Å—å–º–∞: "))
                test_cases.append((date, email_num))
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {date}, –ø–∏—Å—å–º–æ #{email_num}")
            except ValueError:
                print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!")
        
        if test_cases:
            print(f"\nüìã –ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: {len(test_cases)} –ø–∏—Å–µ–º")
            results = tester.test_specific_emails(test_cases)
            print(f"\n‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(results)} –ø–∏—Å–µ–º")
        else:
            print("üì≠ –ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    elif choice == '3':
        print("üëã –í—ã—Ö–æ–¥")


if __name__ == '__main__':
    main()
