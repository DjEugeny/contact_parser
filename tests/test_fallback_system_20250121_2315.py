#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç fallback —Å–∏—Å—Ç–µ–º—ã ContactExtractor
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-21 23:15 (UTC+07)
"""

import sys
import os
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ src
project_root = os.path.join(os.path.dirname(__file__), '..')
src_path = os.path.join(project_root, 'src')
sys.path.insert(0, project_root)
sys.path.insert(0, src_path)

try:
    from llm_extractor import ContactExtractor
    from advanced_email_fetcher import AdvancedEmailFetcherV2
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print(f"–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: {project_root}")
    print(f"–ü—É—Ç—å –∫ src: {src_path}")
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–Ω—è: {os.listdir(project_root) if os.path.exists(project_root) else '–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    sys.exit(1)

def test_fallback_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("üß™ –¢–µ—Å—Ç fallback —Å–∏—Å—Ç–µ–º—ã ContactExtractor")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (UTC+07)")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    extractor = ContactExtractor(test_mode=False)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
    health = extractor.get_provider_health()
    print(f"   –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {health['current_provider']}")
    print(f"   –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {health['system_health']}")
    
    for provider_id, provider_info in health['providers'].items():
        print(f"   {provider_info['name']}: {provider_info['status']} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {provider_info['priority']})")
    
    if health['recommendations']:
        print("   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in health['recommendations']:
            print(f"   - {rec}")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –æ—Ç–∫–∞–∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–∫–∞–∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    current_provider = extractor.current_provider
    print(f"   –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: {extractor.providers[current_provider]['name']}")
    
    failure_result = extractor.simulate_provider_failure(current_provider)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {failure_result['message']}")
    print(f"   –ù–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {extractor.providers[failure_result['current_provider']]['name']}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞
    print("\n3Ô∏è‚É£ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞:")
    health_after = extractor.get_provider_health()
    print(f"   –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: {health_after['system_health']}")
    print(f"   –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {health_after['current_provider']}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:")
    
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
        fetcher = AdvancedEmailFetcherV2(logger=None)
        emails = fetcher.fetch_emails_by_date('2025-01-15', limit=3)
        
        if emails:
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ {len(emails)} –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            for i, email in enumerate(emails[:2], 1):  # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –ø–∏—Å—å–º–∞
                print(f"\n   üìß –ü–∏—Å—å–º–æ {i}: {email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')[:50]}...")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
                result = extractor.extract_contacts(
                    email.get('body', ''),
                    metadata={'subject': email.get('subject', ''), 'date': email.get('date', '')}
                )
                
                print(f"      –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"      –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(result.get('contacts', []))}")
                
                if result.get('contacts'):
                    for contact in result['contacts'][:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∫–æ–Ω—Ç–∞–∫—Ç–∞
                        print(f"      - {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}: {contact.get('email', '–ë–µ–∑ email')}")
        else:
            print("   ‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_emails = [
                "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, –º–æ–π email: ivan.petrov@example.com, —Ç–µ–ª–µ—Ñ–æ–Ω +7 (999) 123-45-67",
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏: support@company.ru, –¥–∏—Ä–µ–∫—Ç–æ—Ä –ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞ (anna.sidorova@company.ru)"
            ]
            
            for i, test_text in enumerate(test_emails, 1):
                print(f"\n   üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ {i}")
                result = extractor.extract_contacts(test_text)
                print(f"      –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"      –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(result.get('contacts', []))}")
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–∏—Å—å–º–∞–º–∏: {e}")
        print("   –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        test_text = "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: info@test.com, –º–µ–Ω–µ–¥–∂–µ—Ä –ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤ +7 (123) 456-78-90"
        result = extractor.extract_contacts(test_text)
        print(f"   –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(result.get('contacts', []))}")
    
    # 5. –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    print("\n5Ô∏è‚É£ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:")
    reset_result = extractor.reset_system_state()
    print(f"   {reset_result['message']}")
    print(f"   –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {extractor.providers[reset_result['current_provider']]['name']}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {len(reset_result['active_providers'])}")
    
    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n6Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    stats = extractor.get_stats()
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    print(f"   –£—Å–ø–µ—à–Ω—ã—Ö: {stats['successful_requests']}")
    print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {stats['failed_requests']}")
    print(f"   –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π fallback: {stats['fallback_switches']}")
    print(f"   –û—à–∏–±–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    for provider, count in stats['provider_failures'].items():
        print(f"     {provider}: {count}")
    
    print("\n‚úÖ –¢–µ—Å—Ç fallback —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (UTC+07)")
    
    return True

if __name__ == "__main__":
    test_fallback_system()