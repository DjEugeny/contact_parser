#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Groq API
"""

import os
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_groq_api():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Groq API"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Groq API")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
    api_key = os.getenv('GROQ_API_KEY')
    if not api_key:
        print("‚ùå GROQ_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print(f"üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π (—ç—Ç–æ –Ω–µ —Ç—Ä–∞—Ç–∏—Ç –ª–∏–º–∏—Ç—ã)
        response = requests.get(
            'https://api.groq.com/openai/v1/models',
            headers=headers,
            timeout=10
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 401:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
        elif response.status_code == 429:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
            print("   –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç Groq –∏—Å—á–µ—Ä–ø–∞–Ω")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
        elif response.status_code == 200:
            data = response.json()
            models = data.get('data', [])
            print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
            print("\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
            for model in models[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {model.get('id', 'Unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å
            current_model = os.getenv('GROQ_MODEL', 'llama3-8b-8192')
            print(f"\nüéØ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å –≤ .env: {current_model}")
            
            model_ids = [m.get('id') for m in models]
            if current_model in model_ids:
                print("‚úÖ –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
            else:
                print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                print(f"üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(model_ids[:3])}...")
            
            return True
            
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False

def test_groq_request():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
    
    api_key = os.getenv('GROQ_API_KEY')
    model = os.getenv('GROQ_MODEL', 'llama3-8b-8192')
    
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    payload = {
        'model': model,
        'messages': [
            {
                'role': 'user',
                'content': '–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ç–µ—Å—Ç'
            }
        ],
        'max_tokens': 10,
        'temperature': 0
    }
    
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏: {model}")
        response = requests.post(
            'https://api.groq.com/openai/v1/chat/completions',
            headers=headers,
            json=payload,
            timeout=30
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω")
            content = data.get('choices', [{}])[0].get('message', {}).get('content', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')
            print(f"üí¨ –û—Ç–≤–µ—Ç: {content}")
            print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: {data.get('usage', {})}")
            return True
            
        elif response.status_code == 401:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (401)")
            print("   –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            
        elif response.status_code == 429:
            error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {}
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)")
            print("   –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–º–∏—Ç Groq –∏—Å—á–µ—Ä–ø–∞–Ω")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
            error_message = error_data.get('error', {}).get('message', '')
            if 'rate limit' in error_message.lower():
                print(f"   –î–µ—Ç–∞–ª–∏: {error_message}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö
            rate_limit_headers = {
                'x-ratelimit-limit-requests': '–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤',
                'x-ratelimit-remaining-requests': '–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã',
                'x-ratelimit-reset-requests': '–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤',
                'x-ratelimit-limit-tokens': '–õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤',
                'x-ratelimit-remaining-tokens': '–û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã',
                'x-ratelimit-reset-tokens': '–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤'
            }
            
            print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö:")
            for header, description in rate_limit_headers.items():
                value = response.headers.get(header)
                if value:
                    print(f"   {description}: {value}")
            
        elif response.status_code == 400:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (400)")
            print("   –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
            
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code}")
            
        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text}")
        return False
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False

def check_groq_limits():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ Groq"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ Groq...")
    
    # Groq –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
    # –ù–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    
    api_key = os.getenv('GROQ_API_KEY')
    headers = {
        'Authorization': f'Bearer {api_key}',
        'Content-Type': 'application/json'
    }
    
    # –î–µ–ª–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–º–∏—Ç–∞—Ö
    payload = {
        'model': 'llama3-8b-8192',
        'messages': [{'role': 'user', 'content': 'hi'}],
        'max_tokens': 1
    }
    
    try:
        response = requests.post(
            'https://api.groq.com/openai/v1/chat/completions',
            headers=headers,
            json=payload,
            timeout=10
        )
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        rate_limit_info = {
            'requests_limit': response.headers.get('x-ratelimit-limit-requests'),
            'requests_remaining': response.headers.get('x-ratelimit-remaining-requests'),
            'requests_reset': response.headers.get('x-ratelimit-reset-requests'),
            'tokens_limit': response.headers.get('x-ratelimit-limit-tokens'),
            'tokens_remaining': response.headers.get('x-ratelimit-remaining-tokens'),
            'tokens_reset': response.headers.get('x-ratelimit-reset-tokens')
        }
        
        print("üìà –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö:")
        for key, value in rate_limit_info.items():
            if value:
                print(f"   {key}: {value}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        requests_remaining = rate_limit_info.get('requests_remaining')
        tokens_remaining = rate_limit_info.get('tokens_remaining')
        
        if requests_remaining == '0' or tokens_remaining == '0':
            print("\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –õ–∏–º–∏—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
            if requests_remaining == '0':
                print("   - –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω")
            if tokens_remaining == '0':
                print("   - –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω")
        
        return rate_limit_info
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤: {str(e)}")
        return None

if __name__ == "__main__":
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Groq: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    api_valid = check_groq_api()
    
    if api_valid:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        limits_info = check_groq_limits()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        request_success = test_groq_request()
        
        print("\n" + "=" * 50)
        print("üìã –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò GROQ")
        print("=" * 50)
        print(f"üîë API –∫–ª—é—á: {'‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' if api_valid else '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}")
        print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {'‚úÖ –£—Å–ø–µ—à–µ–Ω' if request_success else '‚ùå –ù–µ—É—Å–ø–µ—à–µ–Ω'}")
        
        if limits_info:
            requests_remaining = limits_info.get('requests_remaining', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            tokens_remaining = limits_info.get('tokens_remaining', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            print(f"üìä –û—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã: {requests_remaining}")
            print(f"üéØ –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Ç–æ–∫–µ–Ω—ã: {tokens_remaining}")
        
        if not request_success:
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç Groq")
            print("2. –ü–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ (–æ–±—ã—á–Ω–æ –≤ –ø–æ–ª–Ω–æ—á—å UTC)")
            print("3. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω Groq")
            print("4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã")
    
    print(f"\nüïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")