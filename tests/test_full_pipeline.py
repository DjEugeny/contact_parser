#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º ‚Üí OCR ‚Üí LLM ‚Üí —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ç–∞–±–ª–∏—Ü—ã
"""

import sys
import os
import unittest
from pathlib import Path
from datetime import datetime, timedelta
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from google_sheets_bridge import LLM_Sheets_Bridge
from integrated_llm_processor import IntegratedLLMProcessor
from google_sheets_exporter import GoogleSheetsExporter
from local_exporter import LocalDataExporter


class TestFullPipeline(unittest.TestCase):
    """üß™ –¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.test_date = "2025-01-15"
        self.bridge = LLM_Sheets_Bridge()
        
    def test_bridge_initialization(self):
        """üîß –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ—Å—Ç–∞"""
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM_Sheets_Bridge...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        self.assertIsInstance(self.bridge.processor, IntegratedLLMProcessor)
        self.assertIsInstance(self.bridge.exporter, GoogleSheetsExporter)
        self.assertIsInstance(self.bridge.local_exporter, LocalDataExporter)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        self.assertFalse(self.bridge.processor.test_mode)
        
        print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    @patch('subprocess.run')
    def test_auto_fetch_emails_success(self, mock_subprocess):
        """üìß –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º"""
        print("\nüìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º...")
        
        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç subprocess
        mock_result = MagicMock()
        mock_result.returncode = 0
        mock_result.stdout = "–ó–∞–≥—Ä—É–∂–µ–Ω–æ 5 –ø–∏—Å–µ–º –∑–∞ 2025-01-15"
        mock_result.stderr = ""
        mock_subprocess.return_value = mock_result
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
        result = self.bridge._auto_fetch_emails(self.test_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertTrue(result)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ subprocess –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        mock_subprocess.assert_called_once()
        call_args = mock_subprocess.call_args[0][0]
        self.assertIn("advanced_email_fetcher.py", str(call_args))
        self.assertIn("--date", call_args)
        self.assertIn(self.test_date, call_args)
        
        print("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    @patch('subprocess.run')
    def test_auto_fetch_emails_failure(self, mock_subprocess):
        """üìß –¢–µ—Å—Ç –Ω–µ—É–¥–∞—á–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º"""
        print("\nüìß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Å–µ–º...")
        
        # –ú–æ–∫–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç subprocess
        mock_result = MagicMock()
        mock_result.returncode = 1
        mock_result.stdout = ""
        mock_result.stderr = "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É"
        mock_subprocess.return_value = mock_result
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
        result = self.bridge._auto_fetch_emails(self.test_date)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertFalse(result)
        
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    @patch.object(LLM_Sheets_Bridge, '_auto_fetch_emails')
    @patch.object(IntegratedLLMProcessor, 'process_emails_by_date')
    def test_process_and_export_with_auto_fetch(self, mock_process, mock_fetch):
        """üîÑ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ —Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π...")
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ process_emails_by_date –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–ø–æ—Å–ª–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
        mock_process.side_effect = [
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –Ω–µ—Ç –ø–∏—Å–µ–º
            {
                'statistics': {'emails_processed': 0},
                'summary': {'total_contacts': 0},
                'all_contacts': []
            },
            # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –µ—Å—Ç—å –ø–∏—Å—å–º–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
            {
                'statistics': {
                    'emails_processed': 3,
                    'total_requests': 3,
                    'successful_requests': 3,
                    'failed_requests': 0
                },
                'summary': {'total_contacts': 2},
                'all_contacts': [
                    {
                        'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                        'email': 'ivan@example.com',
                        'phone': '+7-123-456-7890',
                        'company': '–û–û–û –¢–µ—Å—Ç',
                        'priority': 8
                    },
                    {
                        'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
                        'email': 'maria@test.ru',
                        'phone': '+7-987-654-3210',
                        'company': '–ò–ü –°–∏–¥–æ—Ä–æ–≤–∞',
                        'priority': 7
                    }
                ]
            }
        ]
        
        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
        mock_fetch.return_value = True
        
        # –ú–æ–∫–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        with patch.object(self.bridge.exporter, 'client', None):
            with patch.object(self.bridge, '_fallback_to_local_export', return_value=True) as mock_local:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É
                result = self.bridge.process_and_export(self.test_date)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.assertTrue(result)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞
                mock_fetch.assert_called_once_with(self.test_date)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ process_emails_by_date –±—ã–ª –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã
                self.assertEqual(mock_process.call_count, 2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
                mock_local.assert_called_once()
                
        print("   ‚úÖ –ü–æ–ª–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Å –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–æ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    @patch.object(IntegratedLLMProcessor, 'process_emails_by_date')
    def test_process_and_export_no_emails_no_fetch(self, mock_process):
        """üì≠ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç –ø–∏—Å–µ–º –∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –ø–æ–º–æ–≥–ª–∞"""
        print("\nüì≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∏—Å–µ–º...")
        
        # –ú–æ–∫–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∏—Å–µ–º
        mock_process.return_value = {
            'statistics': {'emails_processed': 0},
            'summary': {'total_contacts': 0},
            'all_contacts': []
        }
        
        # –ú–æ–∫–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
        with patch.object(self.bridge, '_auto_fetch_emails', return_value=False):
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            result = self.bridge.process_and_export(self.test_date)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.assertFalse(result)
            
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∏—Å–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    @patch.object(IntegratedLLMProcessor, 'process_emails_by_date')
    def test_process_and_export_with_google_sheets(self, mock_process):
        """üìä –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets"""
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets...")
        
        # –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏—Å–µ–º
        mock_process.return_value = {
            'statistics': {
                'emails_processed': 2,
                'total_requests': 2,
                'successful_requests': 2,
                'failed_requests': 0
            },
            'summary': {'total_contacts': 1},
            'all_contacts': [
                {
                    'name': '–¢–µ—Å—Ç –ö–æ–Ω—Ç–∞–∫—Ç',
                    'email': 'test@example.com',
                    'phone': '+7-111-222-3333',
                    'company': '–¢–µ—Å—Ç –ö–æ–º–ø–∞–Ω–∏—è',
                    'priority': 9
                }
            ]
        }
        
        # –ú–æ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π Google Sheets API
        with patch.object(self.bridge.exporter, 'client', MagicMock()):
            with patch.object(self.bridge.exporter, 'export_results_by_date', return_value=True) as mock_export:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç
                result = self.bridge.process_and_export(self.test_date)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self.assertTrue(result)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–∫—Å–ø–æ—Ä—Ç –±—ã–ª –≤—ã–∑–≤–∞–Ω
                mock_export.assert_called_once_with(self.test_date, mock_process.return_value)
                
        print("   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    def test_pipeline_components_integration(self):
        """üîó –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ RateLimitManager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        self.assertIsNotNone(self.bridge.processor.rate_limit_manager)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (–¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
        self.assertFalse(self.bridge.processor.test_mode)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        self.assertTrue(hasattr(self.bridge, 'process_and_export'))
        self.assertTrue(hasattr(self.bridge, '_auto_fetch_emails'))
        self.assertTrue(hasattr(self.bridge, '_fallback_to_local_export'))
        
        print("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
    def test_error_handling_in_pipeline(self):
        """‚ö†Ô∏è –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ"""
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
        
        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
        with patch.object(self.bridge.processor, 'process_emails_by_date', side_effect=Exception("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")):
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
            result = self.bridge.process_and_export(self.test_date)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            self.assertFalse(result)
            
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    unittest.main(verbosity=2, buffer=True)