#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º
"""

import sys
import os
from pathlib import Path
from datetime import datetime
import json
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from email_loader import ProcessedEmailLoader
from integrated_llm_processor import IntegratedLLMProcessor
from ocr_processor import OCRProcessor
from ocr_processor_adapter import OCRProcessorAdapter
from google_sheets_bridge import LLM_Sheets_Bridge

def test_full_integration():
    """
    –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã:
    1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
    2. OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
    3. LLM –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ JSON –∏ –ø–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets
    """
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–∏—Å—å–º–∞–º–∏
    test_date = '2025-07-01'
    print(f"üìÖ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞: {test_date}")
    print()
    
    # –≠—Ç–∞–ø 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º
    print("üìß –≠–¢–ê–ü 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º")
    print("-" * 30)
    
    try:
        email_loader = ProcessedEmailLoader()
        emails = email_loader.load_emails_by_date(test_date)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∏—Å–µ–º: {len(emails)}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        emails_with_attachments = [email for email in emails if email.get('attachments')]
        total_attachments = sum(len(email.get('attachments', [])) for email in emails_with_attachments)
        print(f"üìé –ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {len(emails_with_attachments)}")
        print(f"üìé –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–∏–π: {total_attachments}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º: {e}")
        return False
    
    print()
    
    # –≠—Ç–∞–ø 2: OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("üîç –≠–¢–ê–ü 2: OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π")
    print("-" * 30)
    
    try:
        ocr_adapter = OCRProcessorAdapter()
        ocr_results = []
        
        for email in emails_with_attachments[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            print(f"üìß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∏—Å—å–º–æ: {email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')[:50]}...")
            result = ocr_adapter.process_email_attachments(email, email_loader)
            if result:
                ocr_results.extend(result)
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: {len(result)}")
        
        print(f"‚úÖ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR: {len(ocr_results)} —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False
    
    print()
    
    # –≠—Ç–∞–ø 3: LLM –∞–Ω–∞–ª–∏–∑ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    print("ü§ñ –≠–¢–ê–ü 3: LLM –∞–Ω–∞–ª–∏–∑ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")
    print("-" * 30)
    
    try:
        llm_processor = IntegratedLLMProcessor(test_mode=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∏—Å–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        test_results = []
        for email in emails[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
            result = llm_processor.process_single_email(email)
            if result:
                test_results.append(result)
        
        print(f"‚úÖ LLM –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(test_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if test_results:
            sample_result = test_results[0]
            required_fields = ['contacts', 'commercial_offers', 'email_id']
            missing_fields = [field for field in required_fields if field not in sample_result]
            
            if missing_fields:
                print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö: {missing_fields}")
            else:
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False
    
    print()
    
    # –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("üíæ –≠–¢–ê–ü 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("-" * 30)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        ocr_results_dir = Path(f'/Users/evgenyzach/contact_parser/data/final_results/texts/{test_date}')
        if ocr_results_dir.exists():
            ocr_files = list(ocr_results_dir.glob('*.txt'))
            print(f"‚úÖ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(ocr_files)} —Ñ–∞–π–ª–æ–≤")
        else:
            print("‚ö†Ô∏è –ü–∞–ø–∫–∞ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –æ—Ç—á–µ—Ç—ã OCR
        ocr_report_path = Path(f'/Users/evgenyzach/contact_parser/data/final_results/reports/test_report_{test_date}.json')
        if ocr_report_path.exists():
            print("‚úÖ JSON –æ—Ç—á–µ—Ç OCR —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚ö†Ô∏è JSON –æ—Ç—á–µ—Ç OCR –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        llm_results_dir = Path('/Users/evgenyzach/contact_parser/data/llm_results')
        if llm_results_dir.exists():
            llm_files = list(llm_results_dir.glob(f'*{test_date}*.json'))
            print(f"‚úÖ LLM —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(llm_files)} —Ñ–∞–π–ª–æ–≤")
        else:
            print("‚ö†Ô∏è –ü–∞–ø–∫–∞ LLM —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        return False
    
    print()
    
    # –≠—Ç–∞–ø 5: –¢–µ—Å—Ç Google Sheets Bridge (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞)
    print("üìä –≠–¢–ê–ü 5: –¢–µ—Å—Ç Google Sheets Bridge")
    print("-" * 30)
    
    try:
        sheets_bridge = LLM_Sheets_Bridge()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        print("‚úÖ GoogleSheetsBridge –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞)
        if test_results:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ö†Ô∏è Google Sheets Bridge: {e}")
        print("‚ÑπÔ∏è –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets")
    
    print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("-" * 30)
    print(f"üìß –ü–∏—Å–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(emails)}")
    print(f"üìé –ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {len(emails_with_attachments)}")
    print(f"üîç OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(ocr_results)}")
    print(f"ü§ñ LLM —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(test_results)}")
    
    return True

def test_performance():
    """
    –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    """
    print("\n‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 30)
    
    start_time = time.time()
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    try:
        email_loader = ProcessedEmailLoader()
        emails = email_loader.load_emails_by_date('2025-07-01')
        load_time = time.time() - start_time
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ {len(emails)} –ø–∏—Å–µ–º: {load_time:.2f} —Å–µ–∫")
        print(f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: {len(emails)/load_time:.1f} –ø–∏—Å–µ–º/—Å–µ–∫")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False
    
    return True

if __name__ == '__main__':
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
        integration_success = test_full_integration()
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_success = test_performance()
        
        print("\n" + "=" * 60)
        if integration_success and performance_success:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù–´!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ò–õ–ò–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
        print(f"üïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()