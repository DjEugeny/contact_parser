#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ LLM-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏: OpenRouter, Groq, Replicate
"""

import sys
import os
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent / 'src'))

from config import Config
from llm_extractor import ContactExtractor

def test_provider_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config = Config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        expected_providers = ['openrouter', 'groq', 'replicate']
        actual_providers = config.provider_order
        
        print(f"üìã –û–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {expected_providers}")
        print(f"üìã –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {actual_providers}")
        
        if all(p in actual_providers for p in expected_providers):
            print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    # –¢–µ—Å—Ç 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLMExtractor
    try:
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ —Ç—Ä–µ–±—É–µ–º API –∫–ª—é—á–∏
        extractor = ContactExtractor(test_mode=True)
        print("‚úÖ ContactExtractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        if hasattr(extractor, 'provider_states'):
            print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {extractor.provider_states}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö
            for provider in expected_providers:
                if provider in extractor.provider_states:
                    print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä '{provider}' –Ω–∞–π–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö")
                else:
                    print(f"‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä '{provider}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö")
                    return False
        else:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç provider_states –≤ LLMExtractor")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLMExtractor: {e}")
        return False
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    try:
        provider_settings = config.provider_settings
        print(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {provider_settings}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        for provider in expected_providers:
            if provider in provider_settings:
                settings = provider_settings[provider]
                print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {provider}: priority={settings.get('priority')}, max_failures={settings.get('max_failures_before_skip')}")
            else:
                print(f"‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {provider} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return True

def test_providers_json_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞ providers.json"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã providers.json...")
    
    config_path = Path(__file__).parent / 'config' / 'providers.json'
    
    if not config_path.exists():
        print(f"‚ùå –§–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        required_keys = ['provider_order', 'provider_settings']
        for key in required_keys:
            if key not in config:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á '{key}' –≤ providers.json")
                return False
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ providers.json –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        print(f"üìã –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {config['provider_order']}")
        print(f"üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {list(config['provider_settings'].keys())}")
        
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –î–ò–ù–ê–ú–ò–ß–ï–°–ö–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–†–û–í–ê–ô–î–ï–†–û–í")
    print("=" * 60)
    
    success = True
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if not test_providers_json_structure():
        success = False
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if not test_provider_config():
        success = False
    
    print("\n" + "=" * 60)
    if success:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
    print("=" * 60)