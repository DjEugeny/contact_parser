#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-21 22:50 (UTC+07)
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from advanced_deduplication import AdvancedContactDeduplicator

def test_advanced_deduplication():
    """üî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ü–µ–ø–æ—á–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–æ–∫"""
    print("\n" + "="*80)
    print("üß™ –¢–ï–°–¢ –ü–†–û–î–í–ò–ù–£–¢–û–ô –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –ö–û–ù–¢–ê–ö–¢–û–í")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: 2025-01-21 22:50 (UTC+07)")
    print("="*80)
    
    deduplicator = AdvancedContactDeduplicator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –∏–º–∏—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ü–µ–ø–æ—á–∫–∏ –ø–µ—Ä–µ—Å—ã–ª–æ–∫
    test_contacts = [
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        {
            'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            'email': 'ivan.petrov@company.ru',
            'phone': '+7 (495) 123-45-67',
            'organization': '–û–û–û "–†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞"',
            'position': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º',
            'city': '–ú–æ—Å–∫–≤–∞',
            'confidence': 0.95,
            'source': 'original_email'
        },
        # –î—É–±–ª–∏–∫–∞—Ç –∏–∑ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ (–Ω–µ–º–Ω–æ–≥–æ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        {
            'name': '–ü–µ—Ç—Ä–æ–≤ –ò–≤–∞–Ω',
            'email': 'ivan.petrov@company.ru',
            'phone': '8 495 123 45 67',
            'organization': '–û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞',
            'position': '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–¥–∞–∂',
            'city': '–ú–æ—Å–∫–≤–∞',
            'confidence': 0.85,
            'source': 'forwarded_email_1'
        },
        # –ï—â–µ –æ–¥–∏–Ω –¥—É–±–ª–∏–∫–∞—Ç –∏–∑ –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        {
            'name': '–ò. –ü–µ—Ç—Ä–æ–≤',
            'email': 'ivan.petrov@company.ru',
            'phone': '+7-495-123-45-67',
            'organization': '–†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞',
            'position': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            'confidence': 0.75,
            'source': 'forwarded_email_2'
        },
        # –î—Ä—É–≥–æ–π –∫–æ–Ω—Ç–∞–∫—Ç
        {
            'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            'email': 'maria.sidorova@example.com',
            'phone': '+7 (916) 987-65-43',
            'organization': '–ò–ü –°–∏–¥–æ—Ä–æ–≤–∞',
            'position': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
            'city': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
            'confidence': 0.90,
            'source': 'original_email'
        },
        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–∏–π –∫–æ–Ω—Ç–∞–∫—Ç (–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ—Ç –∂–µ —á–µ–ª–æ–≤–µ–∫)
        {
            'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            'email': 'maria@example.com',  # –î—Ä—É–≥–æ–π email
            'phone': '+7 916 987 65 43',
            'organization': '–°–∏–¥–æ—Ä–æ–≤–∞ –ú.–í. –ò–ü',
            'position': '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
            'city': '–°–ü–±',
            'confidence': 0.80,
            'source': 'forwarded_email_1'
        },
        # –ö–æ–Ω—Ç–∞–∫—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        {
            'name': '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤',
            'phone': '+7 (903) 555-12-34',
            'organization': '–§—Ä–∏–ª–∞–Ω—Å',
            'confidence': 0.70,
            'source': 'original_email'
        },
        # –î—É–±–ª–∏–∫–∞—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
        {
            'name': '–ê. –ò–≤–∞–Ω–æ–≤',
            'phone': '8 903 555 12 34',
            'organization': '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä',
            'confidence': 0.65,
            'source': 'forwarded_email_1'
        },
        # –ö–æ–Ω—Ç–∞–∫—Ç —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        {
            'name': '–ï–ª–µ–Ω–∞',
            'email': 'elena@test.ru',
            'confidence': 0.60,
            'source': 'forwarded_email_2'
        }
    ]
    
    print(f"\nüìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    print("\nüîç –î–µ—Ç–∞–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
    for i, contact in enumerate(test_contacts, 1):
        print(f"   {i}. {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} | {contact.get('email', '–ë–µ–∑ email')} | {contact.get('phone', '–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')} | –ò—Å—Ç–æ—á–Ω–∏–∫: {contact.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
    print("\n" + "-"*60)
    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–î–í–ò–ù–£–¢–û–ô –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò")
    print("-"*60)
    
    unique_contacts = deduplicator.deduplicate_contacts(test_contacts)
    
    print("\n" + "-"*60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò")
    print("-"*60)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(unique_contacts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(test_contacts) - len(unique_contacts)}")
    print(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {((len(test_contacts) - len(unique_contacts)) / len(test_contacts) * 100):.1f}% –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–æ")
    
    print("\nüéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:")
    for i, contact in enumerate(unique_contacts, 1):
        print(f"\n   {i}. {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
        print(f"      üìß Email: {contact.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"      üìû –¢–µ–ª–µ—Ñ–æ–Ω: {contact.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"      üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {contact.get('organization', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        print(f"      üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å: {contact.get('position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
        print(f"      üåç –ì–æ—Ä–æ–¥: {contact.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"      üìä Confidence: {contact.get('confidence', 0):.2f}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if contact.get('other_emails'):
            print(f"      üìß+ –î—Ä—É–≥–∏–µ emails: {', '.join(contact['other_emails'])}")
        if contact.get('other_phones'):
            print(f"      üìû+ –î—Ä—É–≥–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã: {', '.join(contact['other_phones'])}")
        if contact.get('merged_from_count'):
            print(f"      üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ –∏–∑ {contact['merged_from_count']} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
    
    print("\n" + "="*80)
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: 2025-01-21 22:50 (UTC+07)")
    print("="*80)
    
    return unique_contacts

def test_semantic_similarity():
    """üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    print("\n" + "="*80)
    print("üß† –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("="*80)
    
    deduplicator = AdvancedContactDeduplicator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    test_pairs = [
        (
            {'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤', 'organization': '–û–û–û –†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞', 'position': '–ú–µ–Ω–µ–¥–∂–µ—Ä'},
            {'name': '–ü–µ—Ç—Ä–æ–≤ –ò.–í.', 'organization': '–†–æ–≥–∞ –∏ –ö–æ–ø—ã—Ç–∞', 'position': '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º'}
        ),
        (
            {'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞', 'organization': '–ò–ü –°–∏–¥–æ—Ä–æ–≤–∞', 'city': '–ú–æ—Å–∫–≤–∞'},
            {'name': '–ú. –°–∏–¥–æ—Ä–æ–≤–∞', 'organization': '–°–∏–¥–æ—Ä–æ–≤–∞ –ú.–í.', 'city': '–ú–æ—Å–∫–≤–∞'}
        ),
        (
            {'name': '–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤', 'position': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'},
            {'name': '–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤', 'position': '–î–∏–∑–∞–π–Ω–µ—Ä'}
        )
    ]
    
    for i, (contact1, contact2) in enumerate(test_pairs, 1):
        similarity = deduplicator._calculate_contact_similarity(contact1, contact2)
        print(f"\nüîç –ü–∞—Ä–∞ {i}:")
        print(f"   –ö–æ–Ω—Ç–∞–∫—Ç 1: {contact1}")
        print(f"   –ö–æ–Ω—Ç–∞–∫—Ç 2: {contact2}")
        print(f"   üìä –°—Ö–æ–∂–µ—Å—Ç—å: {similarity:.3f} ({similarity*100:.1f}%)")
        print(f"   üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–î–£–ë–õ–ò–ö–ê–¢–´' if similarity >= deduplicator.similarity_threshold else '–†–ê–ó–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´'}")
    
    print("\n‚úÖ –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
        unique_contacts = test_advanced_deduplication()
        
        # –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        test_semantic_similarity()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()