#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback-—Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–î–∞—Ç–∞: 2025-07-29, –ø–µ—Ä–≤—ã–µ 10 –ø–∏—Å–µ–º
"""

import os
import sys
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from advanced_email_fetcher import AdvancedEmailFetcherV2
from integrated_llm_processor import IntegratedLLMProcessor

def test_fallback_with_real_data():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback-—Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback-—Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("üìÖ –î–∞—Ç–∞: 2025-01-15")
    print("üìß –õ–∏–º–∏—Ç: –ø–µ—Ä–≤—ã–µ 10 –ø–∏—Å–µ–º")
    print("-" * 60)
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è email fetcher
        print("üì• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è email fetcher...")
        email_fetcher = AdvancedEmailFetcherV2(logger)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º –∑–∞ 2025-01-15...")
        from datetime import datetime
        start_date = datetime(2025, 1, 15)
        end_date = datetime(2025, 1, 15, 23, 59, 59)
        
        emails = email_fetcher.fetch_emails_by_date_range(
            start_date=start_date,
            end_date=end_date
        )
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 10 –ø–∏—Å—å–º–∞–º–∏
        if len(emails) > 10:
            emails = emails[:10]
        
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å–µ–º: {len(emails)}")
        
        if not emails:
            print("‚ö†Ô∏è –ü–∏—Å—å–º–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–±–µ–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        llm_processor = IntegratedLLMProcessor(test_mode=False)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        health = llm_processor.contact_extractor.get_provider_health()
        print(f"–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {health['overall_health']}")
        for provider_name, status in health['providers'].items():
            print(f"  {provider_name}: {status['status']}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º
        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏—Å–µ–º...")
        processed_count = 0
        contacts_found = 0
        
        for i, email in enumerate(emails, 1):
            print(f"\nüìß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ {i}/{len(emails)}")
            print(f"–û—Ç: {email.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"–¢–µ–º–∞: {email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')[:50]}...")
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ LLM
                result = llm_processor.process_email(email)
                processed_count += 1
                
                if result and result.get('contacts'):
                    contacts_found += len(result['contacts'])
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(result['contacts'])}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                    if result['contacts']:
                        contact = result['contacts'][0]
                        print(f"   –ü—Ä–∏–º–µ—Ä: {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} - {contact.get('phone', '–ë–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}")
                else:
                    print("‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∏—Å—å–º–∞: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏ fallback
                health_after = llm_processor.contact_extractor.get_provider_health()
                if health_after['overall_health'] != 'healthy':
                    print("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä")
                    for provider_name, status in health_after['providers'].items():
                        print(f"  {provider_name}: {status['status']}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üìß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {processed_count}/{len(emails)}")
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_found}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        final_health = llm_processor.contact_extractor.get_provider_health()
        print(f"\nüè• –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {final_health['overall_health']}")
        
        for provider_name, status in final_health['providers'].items():
            print(f"  {provider_name}: {status['status']}")
            if 'error' in status:
                print(f"    –û—à–∏–±–∫–∞: {status['error']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if final_health.get('recommendations'):
            print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            for rec in final_health['recommendations']:
                print(f"  - {rec}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_fallback_with_real_data()