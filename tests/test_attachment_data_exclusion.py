#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è base64 –¥–∞–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π –∏–∑ –ø–æ–ª—è body
"""

import sys
import os
from pathlib import Path
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent.parent / 'src'
sys.path.insert(0, str(src_path))

from advanced_email_fetcher import AdvancedEmailFetcherV2
from email_loader import ProcessedEmailLoader

def test_attachment_data_exclusion():
    """üß™ –¢–µ—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è base64 –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª—è body"""
    
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ base64 –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª—è body")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    logs_dir = Path("logs")
    logs_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ—Ç—á–µ—Ä
    from advanced_email_fetcher import setup_logging
    logger = setup_logging(logs_dir, datetime.now(), datetime.now())
    fetcher = AdvancedEmailFetcherV2(logger)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    end_date = datetime.now()
    start_date = end_date - timedelta(days=3)
    
    print(f"üìÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}")
    
    try:
        emails = fetcher.fetch_emails_by_date_range(start_date, end_date)
        
        if not emails:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        print(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(emails)} –ø–∏—Å–µ–º")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        emails_with_attachments = []
        for email in emails:
            if email.get('attachments') and len(email['attachments']) > 0:
                emails_with_attachments.append(email)
        
        print(f"üìé –ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {len(emails_with_attachments)}")
        
        if not emails_with_attachments:
            print("‚ö†Ô∏è –ù–µ—Ç –ø–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        test_emails = emails_with_attachments[:3]
        
        for i, email in enumerate(test_emails, 1):
            print(f"\nüìß –ü–∏—Å—å–º–æ {i}:")
            print(f"   –û—Ç: {email.get('from', 'N/A')[:50]}...")
            print(f"   –¢–µ–º–∞: {email.get('subject', 'N/A')[:60]}...")
            print(f"   –í–ª–æ–∂–µ–Ω–∏–π: {len(email.get('attachments', []))}")
            
            body = email.get('body', '')
            body_length = len(body)
            
            print(f"   –†–∞–∑–º–µ—Ä body: {body_length:,} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ base64 –¥–∞–Ω–Ω—ã—Ö –≤ body
            base64_indicators = [
                'base64',
                'Content-Transfer-Encoding: base64',
                'iVBORw0KGgo',  # PNG signature
                '/9j/',  # JPEG signature
                'JVBERi0',  # PDF signature
                'UEsDBBQ'  # ZIP/DOCX signature
            ]
            
            found_base64 = []
            for indicator in base64_indicators:
                if indicator in body:
                    found_base64.append(indicator)
            
            if found_base64:
                print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ù–∞–π–¥–µ–Ω—ã base64 –¥–∞–Ω–Ω—ã–µ –≤ body: {found_base64}")
            else:
                print(f"   ‚úÖ OK: base64 –¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ body")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            attachments = email.get('attachments', [])
            for j, att in enumerate(attachments):
                print(f"     –í–ª–æ–∂–µ–Ω–∏–µ {j+1}: {att.get('filename', 'N/A')} ({att.get('size', 'N/A')} –±–∞–π—Ç)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —É–∫–∞–∑–∞–Ω
                if att.get('saved_path'):
                    print(f"       ‚úÖ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {att['saved_path']}")
                else:
                    print(f"       ‚ö†Ô∏è –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(test_emails)} –ø–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        fetcher.close()

def test_body_size_comparison():
    """üß™ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ body —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ body")
    print("="*60)
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–µ–∏—Ö –æ–ø—Ü–∏–π
    print("‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å include_attachment_data=True")
    print("   –∏ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã body —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π")

if __name__ == "__main__":
    test_attachment_data_exclusion()
    test_body_size_comparison()