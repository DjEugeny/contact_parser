#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'src'))

# –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
class TestProcessor:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏"""
    
    def _normalize_email(self, email: str) -> str:
        """üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è email –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not email:
            return ""
        return email.lower().strip()
    
    def _normalize_phone(self, phone: str) -> str:
        """üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not phone:
            return ""
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        import re
        digits = re.sub(r'\D', '', phone)
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
        if digits.startswith('8') and len(digits) == 11:
            digits = '7' + digits[1:]
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –¥–ª–∏–Ω–∞ 11 —Ü–∏—Ñ—Ä - —ç—Ç–æ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä
        if digits.startswith('7') and len(digits) == 11:
            return digits
        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ 10 —Ü–∏—Ñ—Ä, –¥–æ–±–∞–≤–ª—è–µ–º 7 –≤ –Ω–∞—á–∞–ª–æ
        if len(digits) == 10:
            return '7' + digits
        return digits
    
    def _normalize_name(self, name: str) -> str:
        """üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not name:
            return ""
        return ' '.join(name.lower().strip().split())
    
    def _merge_contact_group(self, contacts: list) -> dict:
        """üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        if not contacts:
            return {}
        
        if len(contacts) == 1:
            return contacts[0]
        
        print(f"   üîó –û–±—ä–µ–¥–∏–Ω—è—é {len(contacts)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
        
        # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        merged = contacts[0].copy()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
        all_phones = set()
        max_confidence = 0
        
        for contact in contacts:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è, –≤—ã–±–∏—Ä–∞—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for field in ['name', 'organization', 'position', 'city']:
                current_value = merged.get(field, '')
                new_value = contact.get(field, '')
                
                # –ë–µ—Ä–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ –Ω–µ–ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if len(str(new_value)) > len(str(current_value)):
                    merged[field] = new_value
            
            # Email –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–ø—É—Å—Ç–æ–π
            if not merged.get('email') and contact.get('email'):
                merged['email'] = contact['email']
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
            if contact.get('phone'):
                all_phones.add(contact['phone'])
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π confidence
            contact_conf = contact.get('confidence', 0)
            if contact_conf > max_confidence:
                max_confidence = contact_conf
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if all_phones:
            merged['phone'] = list(all_phones)[0]  # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω
            if len(all_phones) > 1:
                merged['other_phones'] = list(all_phones)[1:]  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
        
        merged['confidence'] = max_confidence
        
        return merged
    
    def _deduplicate_contacts(self, contacts: list) -> list:
        """üîç –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ email, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏ –∏–º–µ–Ω–∏"""
        if not contacts:
            return []
        
        print(f"   üîç –ù–∞—á–∏–Ω–∞—é –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        contact_groups = []
        
        for i, contact in enumerate(contacts):
            # –ò—â–µ–º –≥—Ä—É–ø–ø—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –º–æ–∂–µ—Ç –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å—Å—è
            matching_groups = []
            
            for group_idx, group in enumerate(contact_groups):
                should_merge = False
                
                for existing_contact in group:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ email
                    if contact.get('email') and existing_contact.get('email'):
                        if self._normalize_email(contact['email']) == self._normalize_email(existing_contact['email']):
                            should_merge = True
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
                    if contact.get('phone') and existing_contact.get('phone'):
                        if self._normalize_phone(contact['phone']) == self._normalize_phone(existing_contact['phone']):
                            should_merge = True
                            break
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ + –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                    if (contact.get('name') and contact.get('organization') and 
                        existing_contact.get('name') and existing_contact.get('organization')):
                        contact_key = f"{self._normalize_name(contact['name'])}|{self._normalize_name(contact['organization'])}"
                        existing_key = f"{self._normalize_name(existing_contact['name'])}|{self._normalize_name(existing_contact['organization'])}"
                        if contact_key == existing_key:
                            should_merge = True
                            break
                
                if should_merge:
                    matching_groups.append(group_idx)
            
            if not matching_groups:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                contact_groups.append([contact])
            elif len(matching_groups) == 1:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                contact_groups[matching_groups[0]].append(contact)
            else:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø
                new_group = [contact]
                for group_idx in sorted(matching_groups, reverse=True):
                    new_group.extend(contact_groups[group_idx])
                    del contact_groups[group_idx]
                contact_groups.append(new_group)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
        unique_contacts = []
        duplicates_count = 0
        
        for group in contact_groups:
            if len(group) > 1:
                print(f"   üîó –û–±—ä–µ–¥–∏–Ω—è—é {len(group)} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
                duplicates_count += len(group) - 1
            
            merged = self._merge_contact_group(group)
            unique_contacts.append(merged)
        
        if duplicates_count > 0:
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {duplicates_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
            print(f"   üìä –ò—Ç–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(unique_contacts)}")
        else:
            print(f"   ‚ÑπÔ∏è –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return unique_contacts

def test_contact_deduplication():
    """–¢–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = TestProcessor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    test_contacts = [
        {
            'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            'email': 'ivan.petrov@company.ru',
            'phone': '+7 (495) 123-45-67',
            'organization': '–û–û–û "–ö–æ–º–ø–∞–Ω–∏—è"',
            'position': '–ú–µ–Ω–µ–¥–∂–µ—Ä',
            'confidence': 0.9
        },
        {
            'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            'email': 'ivan.petrov@company.ru',
            'phone': '+7-495-123-45-67',  # –¢–æ—Ç –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω, –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
            'organization': '–û–û–û –ö–æ–º–ø–∞–Ω–∏—è',
            'position': '–°—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä',  # –ë–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å
            'confidence': 0.8
        },
        {
            'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            'email': 'maria@test.com',
            'phone': '+7 (916) 555-66-77',
            'organization': '–¢–µ—Å—Ç–ö–æ–º–ø–∞–Ω–∏',
            'position': '–î–∏—Ä–µ–∫—Ç–æ—Ä',
            'confidence': 0.7
        },
        {
            'name': '–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤',
            'email': '',
            'phone': '8-916-555-66-77',  # –¢–æ—Ç –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω —á—Ç–æ —É –ú–∞—Ä–∏–∏, –Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8
            'organization': '–î—Ä—É–≥–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
            'position': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
            'confidence': 0.6
        },
        {
            'name': '–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞',
            'email': 'anna@example.org',
            'phone': '+7 (903) 777-88-99',
            'organization': '–ü—Ä–∏–º–µ—Ä –û—Ä–≥',
            'position': '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
            'confidence': 0.85
        }
    ]
    
    print("üß™ –¢–ï–°–¢ –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò –ö–û–ù–¢–ê–ö–¢–û–í")
    print("=" * 50)
    print(f"üìä –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(test_contacts)}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    print("üìã –ò–°–•–û–î–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´:")
    for i, contact in enumerate(test_contacts, 1):
        print(f"   {i}. {contact['name']} | {contact['email']} | {contact['phone']} | {contact['organization']}")
    print()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
    unique_contacts = processor._deduplicate_contacts(test_contacts)
    
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(unique_contacts)}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("‚úÖ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ö–û–ù–¢–ê–ö–¢–´ –ü–û–°–õ–ï –î–ï–î–£–ü–õ–ò–ö–ê–¶–ò–ò:")
    for i, contact in enumerate(unique_contacts, 1):
        print(f"   {i}. {contact['name']} | {contact['email']} | {contact['phone']} | {contact['organization']} | {contact['position']} | conf: {contact['confidence']}")
        if 'other_phones' in contact:
            print(f"      üìû –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã: {contact['other_phones']}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    expected_unique = 3  # –û–∂–∏–¥–∞–µ–º 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if len(unique_contacts) == expected_unique:
        print(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –ù–∞–π–¥–µ–Ω–æ {len(unique_contacts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_unique})")
    else:
        print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ù–∞–π–¥–µ–Ω–æ {len(unique_contacts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected_unique})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏
    print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ email
    ivan_contacts = [c for c in unique_contacts if 'ivan.petrov@company.ru' in c.get('email', '')]
    if len(ivan_contacts) == 1:
        ivan = ivan_contacts[0]
        print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã –ò–≤–∞–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: {ivan['position']} (–¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤–∑—è—Ç–∞ –±–æ–ª–µ–µ –ø–æ–ª–Ω–∞—è)")
        print(f"   ‚úÖ Confidence –≤–∑—è—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {ivan['confidence']} (–±—ã–ª–æ 0.9 –∏ 0.8)")
    else:
        print(f"   ‚ùå –ö–æ–Ω—Ç–∞–∫—Ç—ã –ò–≤–∞–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞ –Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: –Ω–∞–π–¥–µ–Ω–æ {len(ivan_contacts)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    phone_916_contacts = [c for c in unique_contacts if '916' in c.get('phone', '') or ('other_phones' in c and any('916' in p for p in c['other_phones']))]
    if len(phone_916_contacts) == 1:
        print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º 916-555-66-77 –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã")
    else:
        print(f"   ‚ùå –ö–æ–Ω—Ç–∞–∫—Ç—ã —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º 916-555-66-77 –Ω–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: –Ω–∞–π–¥–µ–Ω–æ {len(phone_916_contacts)} –∑–∞–ø–∏—Å–µ–π")
    
    return len(unique_contacts) == expected_unique

if __name__ == '__main__':
    success = test_contact_deduplication()
    sys.exit(0 if success else 1)