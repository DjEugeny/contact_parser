#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º Replicate
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-27 02:30 (UTC+07)
"""

import os
import sys
import json
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from integrated_llm_processor import IntegratedLLMProcessor

def get_email_size_info(email_path):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–º–µ—Ä–µ –ø–∏—Å—å–º–∞"""
    try:
        with open(email_path, 'r', encoding='utf-8') as f:
            email_data = json.load(f)
        
        body_size = len(email_data.get('body', ''))
        total_size = len(json.dumps(email_data, ensure_ascii=False))
        
        return {
            'path': email_path,
            'body_size': body_size,
            'total_size': total_size,
            'subject': email_data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')[:50]
        }
    except Exception as e:
        return {'error': str(e), 'path': email_path}

def test_large_email_processing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º"""
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º —Å Replicate")
    print(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (UTC+07)")
    print("=" * 80)
    
    # –°–ø–∏—Å–æ–∫ –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_emails = [
        "data/emails/2025-08-01/email_009_20250801_20250801_dna-technology_ru_85384e9a.json",  # ~80KB
        "data/emails/2025-07-25/email_001_20250725_20250725_dna-technology_ru_ae879b4c.json",  # ~105KB
        "data/emails/2025-07-28/email_006_20250728_20250728_dna-technology_ru_da7eb20e.json",  # ~158KB
        "data/emails/2025-08-12/email_001_20250812_20250812_mail_ru_109d9715.json",           # ~274KB
        "data/emails/2025-07-07/email_006_20250707_20250707_dna-technology_ru_acd24939.json"   # ~506KB
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–∏—Å–µ–º
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∏—Å–µ–º:")
    for email_path in test_emails:
        if os.path.exists(email_path):
            info = get_email_size_info(email_path)
            if 'error' not in info:
                print(f"  üìß {os.path.basename(email_path)}")
                print(f"     –¢–µ–º–∞: {info['subject']}")
                print(f"     –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞: {info['body_size']:,} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"     –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {info['total_size']:,} —Å–∏–º–≤–æ–ª–æ–≤")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {email_path}: {info['error']}")
        else:
            print(f"  ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {email_path}")
    
    print("\n" + "=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
    processor = IntegratedLLMProcessor(test_mode=True)
    
    results = []
    
    for i, email_path in enumerate(test_emails, 1):
        if not os.path.exists(email_path):
            print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {email_path} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        print(f"\nüîÑ –¢–µ—Å—Ç {i}/{len(test_emails)}: {os.path.basename(email_path)}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–æ
            with open(email_path, 'r', encoding='utf-8') as f:
                email_data = json.load(f)
            
            info = get_email_size_info(email_path)
            print(f"   üìè –†–∞–∑–º–µ—Ä —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞: {info['body_size']:,} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            start_time = datetime.now()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ
            result = processor.process_single_email(email_data)
            
            end_time = datetime.now()
            processing_time = (end_time - start_time).total_seconds()
            
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            if result and 'contacts' in result:
                contacts_count = len(result['contacts'])
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_count}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                if contacts_count > 0:
                    print(f"   üìã –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
                    for j, contact in enumerate(result['contacts'][:3], 1):
                        name = contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                        phone = contact.get('phone', '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
                        email = contact.get('email', '–ù–µ—Ç email')
                        print(f"      {j}. {name} | {phone} | {email}")
                    
                    if contacts_count > 3:
                        print(f"      ... –∏ –µ—â–µ {contacts_count - 3} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            else:
                print(f"   ‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            
            results.append({
                'email_path': email_path,
                'body_size': info['body_size'],
                'processing_time': processing_time,
                'contacts_count': len(result.get('contacts', [])) if result else 0,
                'success': result is not None and 'contacts' in result
            })
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            results.append({
                'email_path': email_path,
                'body_size': info.get('body_size', 0),
                'processing_time': 0,
                'contacts_count': 0,
                'success': False,
                'error': str(e)
            })
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    successful_tests = [r for r in results if r['success']]
    failed_tests = [r for r in results if not r['success']]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful_tests)}/{len(results)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(failed_tests)}/{len(results)}")
    
    if successful_tests:
        avg_time = sum(r['processing_time'] for r in successful_tests) / len(successful_tests)
        total_contacts = sum(r['contacts_count'] for r in successful_tests)
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {avg_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìã –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total_contacts}")
        
        print("\nüìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º:")
        for result in successful_tests:
            filename = os.path.basename(result['email_path'])
            print(f"  {filename}:")
            print(f"    –†–∞–∑–º–µ—Ä: {result['body_size']:,} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"    –í—Ä–µ–º—è: {result['processing_time']:.2f}—Å")
            print(f"    –ö–æ–Ω—Ç–∞–∫—Ç—ã: {result['contacts_count']}")
    
    if failed_tests:
        print("\n‚ùå –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        for result in failed_tests:
            filename = os.path.basename(result['email_path'])
            error = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            print(f"  {filename}: {error}")
    
    print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (UTC+07)")
    return results

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    results = test_large_email_processing()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    results_file = f"test_results_large_emails_{datetime.now().strftime('%Y%m%d_%H%M')}.json"
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {results_file}")