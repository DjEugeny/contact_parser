#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import sys
import os
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from ocr_processor import OCRProcessor

def create_test_image_with_text():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –±–µ–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 400x200
    img = Image.new('RGB', (400, 200), color='white')
    draw = ImageDraw.Draw(img)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    text = "Test Image for OCR\nCaching Logic Test\n2025-12-31"
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 24)
    except:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        font = ImageFont.load_default()
    
    # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    draw.multiline_text((50, 50), text, fill='black', font=font)
    
    return img

def test_caching_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image = create_test_image_with_text()
    test_image_path = Path("/tmp/test_caching_image.png")
    test_image.save(test_image_path)
    print(f"üì∑ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    try:
        processor = OCRProcessor()
        print("‚úÖ OCRProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCRProcessor: {e}")
        return
    
    test_date = "2025-12-31"
    
    print(f"\nüîç –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å)")
    result1 = processor.extract_text_from_file(test_image_path, date=test_date)
    processor.save_result(result1, test_date)
    
    print(f"\nüîç –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≥–æ –∂–µ —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –≤ –∫—ç—à–µ)")
    result2 = processor.extract_text_from_file(test_image_path, date=test_date)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
    print(f"   –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –º–µ—Ç–æ–¥: {result1.get('method', 'N/A')}, —É—Å–ø–µ—Ö: {result1.get('success', False)}")
    print(f"   –í—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ - –º–µ—Ç–æ–¥: {result2.get('method', 'N/A')}, —É—Å–ø–µ—Ö: {result2.get('success', False)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∑–∞–ø—É—Å–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫—ç—à
    if 'cached' in result2.get('method', ''):
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("‚ùå –õ–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if test_image_path.exists():
        test_image_path.unlink()
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {test_image_path}")

if __name__ == "__main__":
    test_caching_logic()