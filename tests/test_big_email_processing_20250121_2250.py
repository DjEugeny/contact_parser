#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-21 22:50 (UTC+07)
–¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –ø–∏—Å—å–º–µ —Ä–∞–∑–º–µ—Ä–æ–º 2.5MB
"""

import json
import time
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / 'src'))

from integrated_llm_processor import IntegratedLLMProcessor

def test_big_email_processing():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –ø–∏—Å—å–º–∞ (2.5MB) —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
    """
    print("=== –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –ë–û–õ–¨–®–û–ì–û –ü–ò–°–¨–ú–ê (2.5MB) ===")
    print(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {time.strftime('%Y-%m-%d %H:%M:%S')} (UTC+07)")
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–∏—Å—å–º—É
    email_path = "/Users/evgenyzach/contact_parser/data/emails/2025-01-15/email_021_20250115_20250115_dna-technology_ru_f9c6cc02.json"
    
    if not os.path.exists(email_path):
        print(f"‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –ø–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {email_path}")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–æ
        with open(email_path, 'r', encoding='utf-8') as f:
            email_data = json.load(f)
        
        print(f"üìß –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∏—Å—å–º–æ:")
        print(f"   - –†–∞–∑–º–µ—Ä: {email_data.get('raw_size', 0):,} –±–∞–π—Ç")
        print(f"   - –°–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ: {email_data.get('char_count', 0):,}")
        print(f"   - –í–ª–æ–∂–µ–Ω–∏–π: {email_data.get('attachments_stats', {}).get('total', 0)}")
        print(f"   - –û—Ç: {email_data.get('from', 'N/A')}")
        print(f"   - –¢–µ–º–∞: {email_data.get('subject', 'N/A')}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IntegratedLLMProcessor –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        processor = IntegratedLLMProcessor(test_mode=True)
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.time()
        
        print("\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –ø–∏—Å—å–º–∞...")
        print("   –û–∂–∏–¥–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ
        result = processor.process_single_email(email_data)
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result:
            print("\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–†–ê–ë–û–¢–ö–ò:")
            print(f"   - –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            contacts = result.get('contacts', [])
            if contacts:
                print(f"   - –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
                # –ï—Å–ª–∏ contacts - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                if isinstance(contacts, list):
                    for i, contact in enumerate(contacts[:3]):
                        print(f"       ‚Ä¢ {contact.get('name', 'N/A')} ({contact.get('email', 'N/A')})")
                    if len(contacts) > 3:
                        print(f"       ... –∏ –µ—â–µ {len(contacts) - 3}")
                # –ï—Å–ª–∏ contacts - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                elif isinstance(contacts, dict):
                    for contact_type, contact_list in contacts.items():
                        if contact_list:
                            print(f"     * {contact_type}: {len(contact_list)}")
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
                            for i, contact in enumerate(contact_list[:3]):
                                print(f"       ‚Ä¢ {contact.get('name', 'N/A')} ({contact.get('email', 'N/A')})")
                            if len(contact_list) > 3:
                                print(f"       ... –∏ –µ—â–µ {len(contact_list) - 3}")
            else:
                print("   - –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            commercial_offers = result.get('commercial_offers', [])
            if commercial_offers:
                print(f"   - –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(commercial_offers)}")
                for i, offer in enumerate(commercial_offers[:2]):
                    print(f"     * –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {i+1}: {offer.get('summary', 'N/A')[:100]}...")
            else:
                print("   - –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–∞–Ω–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            processing_info = result.get('processing_info', {})
            if processing_info:
                print(f"\nüìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –û–ë–†–ê–ë–û–¢–ö–ï:")
                chunks_processed = processing_info.get('chunks_processed', 0)
                if chunks_processed > 0:
                    print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {chunks_processed}")
                    print(f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: –î–ê")
                else:
                    print(f"   - –ü–∏—Å—å–º–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ü–µ–ª–∏–∫–æ–º (–±–µ–∑ —Ä–∞–∑–±–∏–≤–∫–∏)")
                
                total_tokens = processing_info.get('total_tokens_used', 0)
                if total_tokens > 0:
                    print(f"   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {total_tokens:,}")
            
            print(f"\nüéØ –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
            chars_per_second = email_data.get('char_count', 0) / processing_time if processing_time > 0 else 0
            print(f"   - –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {chars_per_second:,.0f} —Å–∏–º–≤–æ–ª–æ–≤/—Å–µ–∫")
            
            if processing_time < 60:
                print(f"   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –û–¢–õ–ò–ß–ù–û–ï (< 1 –º–∏–Ω—É—Ç—ã)")
            elif processing_time < 180:
                print(f"   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –•–û–†–û–®–ï–ï (< 3 –º–∏–Ω—É—Ç)")
            else:
                print(f"   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ü–†–ò–ï–ú–õ–ï–ú–û–ï (> 3 –º–∏–Ω—É—Ç)")
            
            return True
        else:
            print("\n‚ùå –û–®–ò–ë–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')} (UTC+07)")
        print("=" * 60)

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
    """
    success = test_big_email_processing()
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
        print("–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return 0
    else:
        print("\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
        print("–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        return 1

if __name__ == "__main__":
    exit(main())