#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –±–æ–ª—å—à–∏—Ö –ø–∏—Å—å–º–∞—Ö
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-21 22:55 (UTC+07)

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –û–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º –±–µ–∑ –ø–∞–¥–µ–Ω–∏–π
2. –†–∞–±–æ—Ç—É –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å IntegratedLLMProcessor
4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ —Ü–µ–ø–æ—á–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–æ–∫
"""

import sys
import os
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from integrated_llm_processor import IntegratedLLMProcessor
from advanced_deduplication import AdvancedContactDeduplicator

def test_big_email_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –±–æ–ª—å—à–∏—Ö –ø–∏—Å—å–º–∞—Ö")
    print("=" * 60)
    
    # –ü—É—Ç—å –∫ –±–æ–ª—å—à–æ–º—É –ø–∏—Å—å–º—É
    big_email_path = Path("/Users/evgenyzach/contact_parser/data/emails/2025-07-07/email_006_20250707_20250707_dna-technology_ru_acd24939.json")
    
    if not big_email_path.exists():
        print("‚ùå –ë–æ–ª—å—à–æ–µ –ø–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    file_size = big_email_path.stat().st_size
    print(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:,} –±–∞–π—Ç ({file_size/1024:.1f} KB)")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–æ
        with open(big_email_path, 'r', encoding='utf-8') as f:
            email_data = json.load(f)
        
        print(f"üìß –ü–∏—Å—å–º–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {email_data.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä body
        body = email_data.get('body', '')
        body_size = len(body)
        print(f"üìù –†–∞–∑–º–µ—Ä body: {body_size:,} —Å–∏–º–≤–æ–ª–æ–≤ ({body_size/1024:.1f} KB)")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
        print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IntegratedLLMProcessor...")
        processor = IntegratedLLMProcessor(test_mode=True)
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = time.time()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ
        print("‚ö° –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–ª—å—à–æ–≥–æ –ø–∏—Å—å–º–∞...")
        result = processor.process_single_email(email_data)
        
        processing_time = time.time() - start_time
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result:
            contacts = result.get('contacts', [])
            print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            print(f"üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            for i, contact in enumerate(contacts[:3], 1):
                name = contact.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                email = contact.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                phone = contact.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                print(f"   {i}. {name} | {email} | {phone}")
            
            if len(contacts) > 3:
                print(f"   ... –∏ –µ—â–µ {len(contacts) - 3} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
            print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏...")
            deduplicator = AdvancedContactDeduplicator()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
            test_contacts = contacts.copy()
            if contacts:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç –ø–µ—Ä–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                duplicate = contacts[0].copy()
                duplicate['source'] = 'test_duplicate'
                test_contacts.append(duplicate)
            
            deduplicated = deduplicator.deduplicate_contacts(test_contacts)
            print(f"üìä –î–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(test_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            print(f"üìä –ü–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(deduplicated)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            
            return True
        else:
            print("‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_multiple_big_emails():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º")
    print("=" * 60)
    
    # –ò—â–µ–º –±–æ–ª—å—à–∏–µ –ø–∏—Å—å–º–∞ (>100KB)
    emails_dir = Path("/Users/evgenyzach/contact_parser/data/emails")
    big_emails = []
    
    for date_dir in emails_dir.iterdir():
        if date_dir.is_dir():
            for email_file in date_dir.glob("*.json"):
                if email_file.stat().st_size > 100_000:  # >100KB
                    big_emails.append(email_file)
    
    print(f"üìß –ù–∞–π–¥–µ–Ω–æ –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º: {len(big_emails)}")
    
    if not big_emails:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –±–æ–ª—å—à–∏—Ö –ø–∏—Å—å–º–∞
    test_emails = big_emails[:3]
    processor = IntegratedLLMProcessor(test_mode=True)
    
    total_contacts = 0
    total_time = 0
    
    for i, email_path in enumerate(test_emails, 1):
        print(f"\nüìß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞ {i}/{len(test_emails)}: {email_path.name}")
        
        try:
            with open(email_path, 'r', encoding='utf-8') as f:
                email_data = json.load(f)
            
            start_time = time.time()
            result = processor.process_single_email(email_data)
            processing_time = time.time() - start_time
            
            total_time += processing_time
            
            if result:
                contacts = result.get('contacts', [])
                total_contacts += len(contacts)
                print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {processing_time:.2f}—Å, –Ω–∞–π–¥–µ–Ω–æ {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            else:
                print(f"   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ {processing_time:.2f}—Å")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {len(test_emails)}")
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ø–∏—Å—å–º–æ: {total_time/len(test_emails):.2f} —Å–µ–∫—É–Ω–¥")
    print(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total_contacts}")
    
    return True

def test_memory_usage():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
    print("=" * 60)
    
    try:
        import psutil
        process = psutil.Process()
        
        # –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        memory_before = process.memory_info().rss / 1024 / 1024  # MB
        print(f"üíæ –ü–∞–º—è—Ç—å –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {memory_before:.1f} MB")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–µ –ø–∏—Å—å–º–æ
        big_email_path = Path("/Users/evgenyzach/contact_parser/data/emails/2025-07-07/email_006_20250707_20250707_dna-technology_ru_acd24939.json")
        
        if big_email_path.exists():
            with open(big_email_path, 'r', encoding='utf-8') as f:
                email_data = json.load(f)
            
            processor = IntegratedLLMProcessor(test_mode=True)
            result = processor.process_single_email(email_data)
            
            # –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            memory_after = process.memory_info().rss / 1024 / 1024  # MB
            memory_diff = memory_after - memory_before
            
            print(f"üíæ –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {memory_after:.1f} MB")
            print(f"üìà –ü—Ä–∏—Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏: {memory_diff:.1f} MB")
            
            if memory_diff < 100:  # –ú–µ–Ω–µ–µ 100MB –ø—Ä–∏—Ä–æ—Å—Ç–∞
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ")
                return True
            else:
                print("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
                return False
        else:
            print("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
            
    except ImportError:
        print("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ù–ê –ë–û–õ–¨–®–ò–• –ü–ò–°–¨–ú–ê–•")
    print("–î–∞—Ç–∞: 2025-01-21 22:55 (UTC+07)")
    print("=" * 70)
    
    tests = [
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –ø–∏—Å—å–º–∞", test_big_email_processing),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±–æ–ª—å—à–∏—Ö –ø–∏—Å–µ–º", test_multiple_big_emails),
        ("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏", test_memory_usage)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –±–æ–ª—å—à–∏–º–∏ –ø–∏—Å—å–º–∞–º–∏")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")