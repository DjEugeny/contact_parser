#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–π –≤ LLM
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-21 22:45 (UTC+07)
"""

import sys
import json
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "src"))

from integrated_llm_processor import IntegratedLLMProcessor
from email_loader import ProcessedEmailLoader
from ocr_processor_adapter import OCRProcessorAdapter
from llm_extractor import ContactExtractor

def test_email_attachments_integration():
    """
    üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–π –≤ LLM
    
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
    1. –ó–∞–≥—Ä—É–∑–∫—É –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
    2. –û–±—Ä–∞–±–æ—Ç–∫—É –≤–ª–æ–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ OCRProcessorAdapter
    3. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–π
    4. –ü–µ—Ä–µ–¥–∞—á—É –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ ContactExtractor
    5. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞
    """
    print("üß™ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–π –≤ LLM")
    print("=" * 70)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (UTC+07)")
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        print("\nüìã –≠—Ç–∞–ø 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        processor = IntegratedLLMProcessor(test_mode=True)
        email_loader = ProcessedEmailLoader()
        ocr_adapter = OCRProcessorAdapter()
        contact_extractor = ContactExtractor(test_mode=True)
        
        print("   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        
        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        print("\nüìã –≠—Ç–∞–ø 2: –ü–æ–∏—Å–∫ –ø–∏—Å—å–º–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏")
        
        # –ò—â–µ–º –ø–∏—Å—å–º–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –¥–∞—Ç—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
        test_dates = ['2025-07-28', '2025-07-29', '2025-07-30']
        test_email = None
        
        for date in test_dates:
            emails = email_loader.load_emails_by_date(date)
            for email in emails:
                if email.get('attachments') and len(email['attachments']) > 0:
                    test_email = email
                    print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –∑–∞ {date}")
                    print(f"      üìß –û—Ç: {email.get('from', 'N/A')[:50]}...")
                    print(f"      üìß –¢–µ–º–∞: {email.get('subject', 'N/A')[:60]}...")
                    print(f"      üìé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–∏–π: {len(email['attachments'])}")
                    break
            if test_email:
                break
        
        if not test_email:
            print("   ‚ö†Ô∏è –ü–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ")
            test_email = {
                'from': 'test@example.com',
                'to': 'recipient@example.com',
                'subject': '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏',
                'date': '2025-01-21',
                'thread_id': 'test_thread_001',
                'body': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.\n\n–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n–¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67\nEmail: ivan.petrov@company.ru',
                'attachments': []
            }
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π
        print("\nüìã –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π")
        attachments_result = ocr_adapter.process_email_attachments(test_email, email_loader)
        
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π:")
        print(f"      üìé –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: {attachments_result['attachments_processed']}")
        print(f"      üìù –û–±—â–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {attachments_result['total_text_length']} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–≥–æ –≤–ª–æ–∂–µ–Ω–∏—è
        for i, attachment in enumerate(attachments_result['attachments_text'], 1):
            print(f"      üìÑ –í–ª–æ–∂–µ–Ω–∏–µ {i}: {attachment['file_name']}")
            print(f"         –ú–µ—Ç–æ–¥: {attachment['method']}")
            print(f"         –£—Å–ø–µ—Ö: {attachment['success']}")
            print(f"         –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(attachment.get('text', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("\nüìã –≠—Ç–∞–ø 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∏—Å—å–º–∞ –∏ –≤–ª–æ–∂–µ–Ω–∏–π")
        combined_text = ocr_adapter.combine_email_with_attachments(test_email, attachments_result)
        
        print(f"   üìä –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        print(f"      üìù –û–±—â–∞—è –¥–ª–∏–Ω–∞: {len(combined_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"      üìß –°–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—Å—å–º–∞: {'–¢–ï–ú–ê:' in combined_text}")
        print(f"      üìé –°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏–π: {'–°–û–î–ï–†–ñ–ò–ú–û–ï –í–õ–û–ñ–ï–ù–ò–ô:' in combined_text}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        print(f"\n   üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞:")
        print(f"   {'-' * 50}")
        print(f"   {combined_text[:500]}...")
        print(f"   {'-' * 50}")
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        print("\nüìã –≠—Ç–∞–ø 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è LLM")
        email_metadata = {
            'from': test_email.get('from', ''),
            'to': test_email.get('to', ''),
            'cc': test_email.get('cc', ''),
            'subject': test_email.get('subject', ''),
            'date': test_email.get('date', ''),
            'thread_id': test_email.get('thread_id', ''),
            'has_attachments': len(test_email.get('attachments', [])) > 0,
            'attachments_count': len(test_email.get('attachments', []))
        }
        
        print(f"   üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞:")
        for key, value in email_metadata.items():
            print(f"      {key}: {value}")
        
        # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ ContactExtractor
        print("\nüìã –≠—Ç–∞–ø 6: –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ ContactExtractor")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ContactExtractor –∏–∑ IntegratedLLMProcessor, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–π
        processor_contact_extractor = processor.contact_extractor
        print(f"   ü§ñ ContactExtractor –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ: {processor_contact_extractor.test_mode}")
        
        # –í—ã–∑—ã–≤–∞–µ–º extract_contacts —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        extraction_result = processor_contact_extractor.extract_contacts(combined_text, email_metadata)
        
        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
        print(f"      ‚úÖ –£—Å–ø–µ—Ö: {extraction_result.get('success', False)}")
        print(f"      üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(extraction_result.get('contacts', []))}")
        print(f"      ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {extraction_result.get('provider_used', 'N/A')}")
        print(f"      üìù –î–ª–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {extraction_result.get('text_length', 0)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        contacts = extraction_result.get('contacts', [])
        for i, contact in enumerate(contacts, 1):
            print(f"      üë§ –ö–æ–Ω—Ç–∞–∫—Ç {i}:")
            print(f"         –ò–º—è: {contact.get('name', 'N/A')}")
            print(f"         Email: {contact.get('email', 'N/A')}")
            print(f"         –¢–µ–ª–µ—Ñ–æ–Ω: {contact.get('phone', 'N/A')}")
            print(f"         –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {contact.get('organization', 'N/A')}")
            print(f"         –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {contact.get('confidence', 0)}")
        
        # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ IntegratedLLMProcessor
        print("\nüìã –≠—Ç–∞–ø 7: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ IntegratedLLMProcessor")
        
        full_result = processor.process_single_email(test_email)
        
        if full_result:
            print(f"   ‚úÖ –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
            print(f"      üìé –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: {full_result['attachments_processed']}")
            print(f"      üìù –î–ª–∏–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {full_result['combined_text_length']}")
            print(f"      üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(full_result['contacts'])}")
            print(f"      üíº –ê–Ω–∞–ª–∏–∑ –ö–ü: {full_result.get('commercial_analysis', {}).get('commercial_offer_found', False)}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
        print("\nüìã –≠—Ç–∞–ø 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        checks_passed = 0
        total_checks = 6
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        if test_email.get('body', '') in combined_text or test_email.get('subject', '') in combined_text:
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ")
            checks_passed += 1
        else:
            print("   ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –î–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if email_metadata['subject'] == test_email.get('subject', ''):
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
            checks_passed += 1
        else:
            print("   ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –û—à–∏–±–∫–∞ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: ContactExtractor –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ
        if extraction_result and 'contacts' in extraction_result:
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: ContactExtractor –ø–æ–ª—É—á–∏–ª –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª –¥–∞–Ω–Ω—ã–µ")
            checks_passed += 1
        else:
            print("   ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: ContactExtractor –Ω–µ –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        provider_used = extraction_result.get('provider_used')
        print(f"   üîç DEBUG: provider_used = '{provider_used}'")
        if provider_used == 'Test Mode':
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            checks_passed += 1
        else:
            print(f"   ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º (–ø–æ–ª—É—á–µ–Ω: '{provider_used}', –æ–∂–∏–¥–∞–ª—Å—è: 'Test Mode')")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
        if full_result and 'contacts' in full_result:
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            checks_passed += 1
        else:
            print("   ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –î–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        if attachments_result['attachments_processed'] >= 0:  # –ú–æ–∂–µ—Ç –±—ã—Ç—å 0, –µ—Å–ª–∏ –Ω–µ—Ç –≤–ª–æ–∂–µ–Ω–∏–π
            print("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
            checks_passed += 1
        else:
            print("   ‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–ª–æ–∂–µ–Ω–∏–π")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   üìä –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {checks_passed}/{total_checks}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(checks_passed/total_checks)*100:.1f}%")
        
        if checks_passed == total_checks:
            print(f"   ‚úÖ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        elif checks_passed >= total_checks * 0.8:
            print(f"   ‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ, –µ—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
            return True
        else:
            print(f"   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
            return False
        
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    finally:
        print(f"\n‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} (UTC+07)")
        print("=" * 70)

if __name__ == "__main__":
    success = test_email_attachments_integration()
    sys.exit(0 if success else 1)