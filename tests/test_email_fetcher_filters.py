#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üß™ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –º–æ–¥—É–ª—è advanced_email_fetcher.py
"""

import os
import sys
import unittest
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.advanced_email_fetcher import AdvancedEmailFetcherV2, EXCLUDED_EXTENSIONS

class TestEmailFetcherFilters(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π –≤ email_fetcher"""
    
    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∏—Ö–∏–π –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        logger = logging.getLogger("TestLogger")
        logger.setLevel(logging.ERROR)  # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.fetcher = AdvancedEmailFetcherV2(logger)
    
    def test_specific_excluded_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞
        self.assertTrue(hasattr(self.fetcher, 'specific_excluded_files'), 
                       "–ê—Ç—Ä–∏–±—É—Ç specific_excluded_files –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ø–∏—Å–∫–∞
        specific_files = self.fetcher.specific_excluded_files
        
        # –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω—ã
        must_exclude = ["_.jpg", "blocked.gif", "WRD0004.jpg", "image001.png"]
        
        for filename in must_exclude:
            self.assertIn(filename, specific_files, 
                         f"–§–∞–π–ª {filename} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    
    def test_gif_extension_excluded(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è GIF —Ñ–∞–π–ª–æ–≤"""
        self.assertIn('.gif', EXCLUDED_EXTENSIONS, 
                     "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ .gif –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö")
    
    def test_specific_file_filtering(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        # –ù–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (True = –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω)
        test_cases = [
            ("_.jpg", True),       # –û–¥–∏–Ω–æ—á–Ω—ã–π —Å–∏–º–≤–æ–ª - –∏—Å–∫–ª—é—á–∏—Ç—å
            ("blocked.gif", True), # GIF —Ñ–∞–π–ª - –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –∏ –∏–º–µ–Ω–∏
            ("important.pdf", False), # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç - –Ω–µ –∏—Å–∫–ª—é—á–∞—Ç—å
            ("image001.png", True), # –ú—É—Å–æ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –∏—Å–∫–ª—é—á–∏—Ç—å
            ("contract.docx", False) # –†–∞–±–æ—á–∏–π –¥–æ–∫—É–º–µ–Ω—Ç - –Ω–µ –∏—Å–∫–ª—é—á–∞—Ç—å
        ]
        
        for filename, should_exclude in test_cases:
            # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            is_in_specific = filename in self.fetcher.specific_excluded_files
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            ext = Path(filename).suffix.lower()
            is_ext_excluded = ext in EXCLUDED_EXTENSIONS
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            is_excluded = is_in_specific or is_ext_excluded
            
            self.assertEqual(is_excluded, should_exclude, 
                           f"–§–∞–π–ª {filename}: –æ–∂–∏–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ={should_exclude}, –ø–æ–ª—É—á–µ–Ω–æ={is_excluded}")

if __name__ == "__main__":
    unittest.main()
