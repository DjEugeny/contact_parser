#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —á–∞—Å—Ç–µ–π –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
–°–æ–∑–¥–∞–Ω: 2025-01-27 02:00 (UTC+07)
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.llm_extractor import ContactExtractor
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_deduplicate_contacts():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    print("\n=== –¢–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ContactExtractor –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    extractor = ContactExtractor(test_mode=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    test_contacts = [
        {
            "name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            "email": "ivan@example.com",
            "phone": "+7 (123) 456-78-90",
            "confidence": 0.9
        },
        {
            "name": "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            "email": "ivan@example.com",  # –î—É–±–ª–∏–∫–∞—Ç –ø–æ email
            "phone": "8-123-456-78-90",   # –¢–æ—Ç –∂–µ –Ω–æ–º–µ—Ä –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            "confidence": 0.8
        },
        {
            "name": "–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞",
            "email": "maria@test.ru",
            "phone": "+7-987-654-32-10",
            "confidence": 0.95
        },
        {
            "name": "–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤",
            "email": "petr@company.com",
            "phone": "8 (987) 654 32 10",  # –î—É–±–ª–∏–∫–∞—Ç –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            "confidence": 0.85
        },
        {
            "name": "–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞",
            "email": "anna@mail.ru",
            "phone": "+7-555-123-45-67",
            "confidence": 0.7
        }
    ]
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {len(test_contacts)}")
    for i, contact in enumerate(test_contacts):
        print(f"  {i+1}. {contact['name']} - {contact['email']} - {contact['phone']}")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
    deduplicated = extractor._deduplicate_contacts(test_contacts)
    
    print(f"\n–ü–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {len(deduplicated)}")
    for i, contact in enumerate(deduplicated):
        print(f"  {i+1}. {contact['name']} - {contact['email']} - {contact['phone']} (confidence: {contact['confidence']})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    expected_count = 3  # –û–∂–∏–¥–∞–µ–º 3 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞
    if len(deduplicated) == expected_count:
        print(f"‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {len(deduplicated)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}, –ø–æ–ª—É—á–µ–Ω–æ {len(deduplicated)}")
        return False

def test_chunk_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —á–∞—Å—Ç—è–º"""
    print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ —á–∞—Å—Ç—è–º ===")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä ContactExtractor –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    extractor = ContactExtractor(test_mode=True)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    large_text = """
    –ß–∞—Å—Ç—å 1: –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂
    
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
    Email: ivan.petrov@company.com
    –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
    
    """ + "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏. " * 1000 + """
    
    –ß–∞—Å—Ç—å 2: –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–¥–µ–ª–∞
    
    –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä: –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞
    Email: maria.sidorova@company.com
    –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 987-65-43
    
    """ + "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è. " * 1000 + """
    
    –ß–∞—Å—Ç—å 3: –ö–æ–Ω—Ç–∞–∫—Ç—ã –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏
    
    –ì–ª–∞–≤–Ω—ã–π –±—É—Ö–≥–∞–ª—Ç–µ—Ä: –ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤
    Email: petr.ivanov@company.com
    –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 555-12-34
    
    """ + "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã. " * 1000
    
    print(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(large_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    try:
        result = extractor.extract_contacts(large_text)
        
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(result.get('contacts', []))}")
        
        for i, contact in enumerate(result.get('contacts', [])):
            print(f"  {i+1}. {contact.get('name', 'N/A')} - {contact.get('email', 'N/A')} - {contact.get('phone', 'N/A')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = extractor.get_stats()
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"  –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {stats.get('total_chunks', 0)}")
        print(f"  –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('successful_chunks', 0)}")
        print(f"  –û—à–∏–±–æ–∫: {stats.get('failed_chunks', 0)}")
        print(f"  –í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {stats.get('total_contacts_before_dedup', 0)}")
        print(f"  –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: {stats.get('total_contacts_after_dedup', 0)}")
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∫–æ–Ω—Ç–∞–∫—Ç–∞
        expected_contacts = 3
        if len(result.get('contacts', [])) >= expected_contacts:
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –º–µ–Ω—å—à–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {e}")
        return False

def test_text_chunking():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    print("\n=== –¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏ ===")
    
    extractor = ContactExtractor(test_mode=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    test_texts = [
        "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º: ivan@test.com",
        "–°—Ä–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç. " * 100 + " –ö–æ–Ω—Ç–∞–∫—Ç: maria@example.com, +7-123-456-78-90",
        "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. " * 1000 + " –ö–æ–Ω—Ç–∞–∫—Ç: petr@company.ru, 8-987-654-32-10"
    ]
    
    for i, text in enumerate(test_texts):
        print(f"\n–¢–µ–∫—Å—Ç {i+1}: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏
        chunks = extractor._create_text_chunks(text, max_chunk_size=2000, overlap_size=200)
        
        print(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        for j, chunk in enumerate(chunks):
            print(f"    –ß–∞–Ω–∫ {j+1}: {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è
        total_unique_chars = len(set(text))
        chunks_unique_chars = len(set(''.join(chunks)))
        
        if chunks_unique_chars >= total_unique_chars * 0.9:  # 90% —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è
            print(f"  ‚úÖ –†–∞–∑–±–∏–≤–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        else:
            print(f"  ‚ùå –ü–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ")
            return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏")
    print("=" * 60)
    
    tests = [
        ("–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", test_deduplicate_contacts),
        ("–†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏", test_text_chunking),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤", test_chunk_processing)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{len(results)}")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)