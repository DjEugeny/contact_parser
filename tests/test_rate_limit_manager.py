#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ rate limit
"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
src_path = Path(__file__).parent.parent / "src"
sys.path.insert(0, str(src_path))

from rate_limit_manager import RateLimitManager, RequestResult


def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    manager = RateLimitManager(
        initial_delay=2.0,
        min_delay=1.0,
        max_delay=5.0
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    stats = manager.get_statistics()
    print(f"   üìä –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {stats['current_delay']:.1f}—Å")
    assert stats['current_delay'] == 2.0
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    delay = manager.wait_if_needed()
    print(f"   ‚è≥ –ü–µ—Ä–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {delay:.1f}—Å")
    manager.record_request('success')
    
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ–Ω—å—à–∏—Ç—å—Å—è
    stats = manager.get_statistics()
    print(f"   üìä –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞: {stats['current_delay']:.1f}—Å")
    assert stats['current_delay'] < 2.0
    
    print("   ‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_rate_limit_adaptation():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ –æ—à–∏–±–∫–∞–º rate limit"""
    print("\nüß™ –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ rate limit...")
    
    manager = RateLimitManager(
        initial_delay=1.0,
        min_delay=0.5,
        max_delay=3.0
    )
    
    initial_delay = manager.get_statistics()['current_delay']
    print(f"   üìä –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {initial_delay:.1f}—Å")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É rate limit
    manager.record_request('rate_limit_error')
    
    after_error_delay = manager.get_statistics()['current_delay']
    print(f"   üìä –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ rate limit: {after_error_delay:.1f}—Å")
    
    # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è
    assert after_error_delay > initial_delay
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    for i in range(3):
        manager.record_request('success')
        delay = manager.get_statistics()['current_delay']
        print(f"   üìä –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ #{i+1}: {delay:.1f}—Å")
    
    final_delay = manager.get_statistics()['current_delay']
    print(f"   üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: {final_delay:.1f}—Å")
    
    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ–Ω—å—à–∏—Ç—å—Å—è
    assert final_delay < after_error_delay
    
    print("   ‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ rate limit —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_statistics():
    """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    
    manager = RateLimitManager(initial_delay=1.0)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    manager.record_request('success')
    manager.record_request('rate_limit_error')
    manager.record_request('timeout')
    manager.record_request('other_error')
    
    stats = manager.get_statistics()
    print(f"   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è
    assert stats['total_requests'] == 4
    assert 'recent_success_rate' in stats
    assert 'consecutive_errors' in stats
    
    print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_reset():
    """–¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    
    manager = RateLimitManager(initial_delay=2.0)
    
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    manager.record_request('rate_limit_error')
    manager.record_request('success')
    
    stats_before = manager.get_statistics()
    print(f"   üìä –î–æ —Å–±—Ä–æ—Å–∞: {stats_before['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º
    manager.reset()
    
    stats_after = manager.get_statistics()
    print(f"   üìä –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞: {stats_after['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±—Ä–æ—Å
    assert stats_after['total_requests'] == 0
    assert stats_after['current_delay'] == 2.0
    
    print("   ‚úÖ –°–±—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ RateLimitManager\n")
    
    try:
        test_basic_functionality()
        test_rate_limit_adaptation()
        test_statistics()
        test_reset()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main())