#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞ —Å test_mode –≤ ContactExtractor
"""

import sys
import os
from pathlib import Path
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent / "src"))

from integrated_llm_processor import IntegratedLLMProcessor
from llm_extractor import ContactExtractor


def test_test_mode_propagation():
    """
    üß™ –¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ test_mode –∏–∑ IntegratedLLMProcessor –≤ ContactExtractor
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ test_mode...")
    
    # –¢–µ—Å—Ç 1: test_mode=True –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ ContactExtractor
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç: test_mode=True")
    processor_test = IntegratedLLMProcessor(test_mode=True)
    assert processor_test.test_mode == True, "IntegratedLLMProcessor –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å test_mode=True"
    assert processor_test.contact_extractor.test_mode == True, "ContactExtractor –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å test_mode=True"
    print("   ‚úÖ test_mode=True –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ ContactExtractor")
    
    # –¢–µ—Å—Ç 2: test_mode=False –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ ContactExtractor
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç: test_mode=False")
    processor_prod = IntegratedLLMProcessor(test_mode=False)
    assert processor_prod.test_mode == False, "IntegratedLLMProcessor –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å test_mode=False"
    assert processor_prod.contact_extractor.test_mode == False, "ContactExtractor –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å test_mode=False"
    print("   ‚úÖ test_mode=False –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –≤ ContactExtractor")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥–∞—á–∏ test_mode –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


def test_test_mode_behavior():
    """
    üß™ –¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è ContactExtractor –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
    
    # –°–æ–∑–¥–∞–µ–º ContactExtractor –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    extractor = ContactExtractor(test_mode=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
    test_text = "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç test@example.com"
    
    # –í—ã–∑—ã–≤–∞–µ–º extract_contacts –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    result = extractor.extract_contacts(test_text, metadata=None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    assert 'contacts' in result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ 'contacts'"
    assert len(result['contacts']) > 0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"
    assert result['contacts'][0]['name'] == '–¢–µ—Å—Ç–æ–≤—ã–π –ö–æ–Ω—Ç–∞–∫—Ç', "–î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"
    assert result['provider_used'] == 'Test Mode', "–î–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Test Mode"
    
    print("   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print(f"   üìä –ü–æ–ª—É—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {result['contacts'][0]['name']}")
    
    print("\n‚úÖ –¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")


def test_real_email_mode_override():
    """
    üß™ –¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è test_mode –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º
    """
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è test_mode –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º...")
    
    # –°–æ–∑–¥–∞–µ–º ContactExtractor –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    extractor = ContactExtractor(test_mode=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    assert extractor.test_mode == True, "–ò—Å—Ö–æ–¥–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å test_mode=True"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞ (—Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏)
    real_email_text = "–ü–∏—Å—å–º–æ –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
    real_metadata = {
        'from': 'real@company.com',
        'subject': '–†–µ–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ',
        'date': '2025-01-21'
    }
    
    # –ú–æ–∫–∞–µ–º LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    with patch.object(extractor, 'providers', {}):
        result = extractor.extract_contacts(real_email_text, real_metadata)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ test_mode –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    assert extractor.test_mode == True, "test_mode –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"
    
    print("   ‚úÖ test_mode –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞")
    
    print("\n‚úÖ –¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è test_mode –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–≥–∞ —Å test_mode")
    
    try:
        test_test_mode_propagation()
        test_test_mode_behavior()
        test_real_email_mode_override()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –ë–∞–≥ —Å test_mode –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)