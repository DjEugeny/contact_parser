#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ google_sheets_bridge.py
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from google_sheets_bridge import LLM_Sheets_Bridge
from PIL import Image, ImageDraw, ImageFont
import os

def create_test_image_with_text(text: str, output_path: Path):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (800, 600), color='white')
    draw = ImageDraw.Draw(img)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 40)
    except:
        font = ImageFont.load_default()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    draw.text((50, 50), text, fill='black', font=font)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    img.save(output_path)
    print(f"–°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {output_path}")

def setup_test_data():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∞—Ç—ã
    test_date = "2024-01-15"
    attachments_dir = Path("data/attachments") / test_date
    attachments_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image_path = attachments_dir / "test_logging_image.png"
    create_test_image_with_text(
        "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç\n–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n+7-999-123-45-67\nivan@example.com\n–û–û–û –¢–µ—Å—Ç",
        test_image_path
    )
    
    return test_date, test_image_path

def test_detailed_logging():
    """–¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ google_sheets_bridge"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢ –î–ï–¢–ê–õ–¨–ù–û–ì–û –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
    test_date = "2025-07-01"
    attachments_dir = Path("data/attachments") / test_date
    attachments_dir.mkdir(parents=True, exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image_path = attachments_dir / "test_logging_image.png"
    create_test_image_with_text(
        "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç\n–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤\n+7-999-123-45-67\nivan@example.com\n–û–û–û –¢–µ—Å—Ç",
        test_image_path
    )
    
    print(f"\nüìÖ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞: {test_date}")
    print(f"üìé –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {test_image_path}")
    
    # –°–æ–∑–¥–∞–µ–º bridge
    print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM_Sheets_Bridge...")
    bridge = LLM_Sheets_Bridge()
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
    bridge.processor.test_mode = True
    print("   üß™ –í–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ª–∏–º–∏—Ç–æ–º 1 –ø–∏—Å—å–º–æ
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º –∑–∞ {test_date} (–ª–∏–º–∏—Ç: 1 –ø–∏—Å—å–º–æ)...")
    print("\n" + "-"*60)
    
    try:
        success = bridge.process_and_export(test_date, max_emails=1)
        
        print("\n" + "-"*60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:")
        if success:
            print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        else:
            print("   ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
            
        print("\n‚úÖ –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π OCR:")
        print("   - '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–ª–æ–∂–µ–Ω–∏–µ X'")
        print("   - '–í–ª–æ–∂–µ–Ω–∏–µ X —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—é.'")
        print("   - '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'")
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return success

if __name__ == "__main__":
    test_detailed_logging()