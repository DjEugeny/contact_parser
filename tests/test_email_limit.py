#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ max_emails –≤ IntegratedLLMProcessor
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
src_path = Path(__file__).parent / 'src'
sys.path.insert(0, str(src_path))

from integrated_llm_processor import IntegratedLLMProcessor
from email_loader import ProcessedEmailLoader

def test_email_limit():
    """üéØ –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º"""
    
    print("üß™ –¢–ï–°–¢ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ö–û–õ–ò–ß–ï–°–¢–í–ê –ü–ò–°–ï–ú")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    processor = IntegratedLLMProcessor(test_mode=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã
    available_dates = processor.email_loader.get_available_date_folders()
    
    if not available_dates:
        print("‚ùå –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    # –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É —Å –ø–∏—Å—å–º–∞–º–∏
    test_date = available_dates[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
    print(f"üìÖ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞: {test_date}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
    emails = processor.email_loader.load_emails_by_date(test_date)
    total_emails = len(emails)
    
    print(f"üìä –í—Å–µ–≥–æ –ø–∏—Å–µ–º –∑–∞ {test_date}: {total_emails}")
    
    if total_emails == 0:
        print("‚ùå –ù–µ—Ç –ø–∏—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    # –¢–µ—Å—Ç 1: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1 –ø–∏—Å—å–º–æ
    print("\nüß™ –¢–ï–°–¢ 1: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1 –ø–∏—Å—å–º–æ")
    print("-" * 30)
    
    limit = 1
    results = processor.process_emails_by_date(test_date, max_emails=limit)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ emails_results, –∞ –Ω–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    processed_results = results.get('emails_results', [])
    processed_count = len(processed_results)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {limit} (–ª–∏–º–∏—Ç)")
    
    if processed_count <= limit:
        print("‚úÖ –¢–ï–°–¢ 1 –ü–†–û–ô–î–ï–ù: –ª–∏–º–∏—Ç —Å–æ–±–ª—é–¥–µ–Ω")
        test1_passed = True
    else:
        print(f"‚ùå –¢–ï–°–¢ 1 –ü–†–û–í–ê–õ–ï–ù: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}, –æ–∂–∏–¥–∞–ª–æ—Å—å –Ω–µ –±–æ–ª–µ–µ {limit}")
        test1_passed = False
    
    # –¢–µ—Å—Ç 2: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º
    if total_emails > 1:
        print("\nüß™ –¢–ï–°–¢ 2: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º")
        print("-" * 30)
        
        limit = total_emails + 5
        results = processor.process_emails_by_date(test_date, max_emails=limit)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ emails_results
        processed_results = results.get('emails_results', [])
        processed_count = len(processed_results)
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {total_emails} (–≤—Å–µ–≥–æ –ø–∏—Å–µ–º)")
        
        if processed_count <= total_emails:
            print("‚úÖ –¢–ï–°–¢ 2 –ü–†–û–ô–î–ï–ù: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Å–µ–º")
            test2_passed = True
        else:
            print(f"‚ùå –¢–ï–°–¢ 2 –ü–†–û–í–ê–õ–ï–ù: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}, –¥–æ—Å—Ç—É–ø–Ω–æ {total_emails}")
            test2_passed = False
    else:
        print("\n‚è≠Ô∏è –¢–ï–°–¢ 2 –ü–†–û–ü–£–©–ï–ù: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∏—Å–µ–º")
        test2_passed = True
    
    # –¢–µ—Å—Ç 3: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    print("\nüß™ –¢–ï–°–¢ 3: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (max_emails=None)")
    print("-" * 30)
    
    results = processor.process_emails_by_date(test_date, max_emails=None)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ emails_results
    processed_results = results.get('emails_results', [])
    processed_count = len(processed_results)
    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –∏–∑ {total_emails} (–±–µ–∑ –ª–∏–º–∏—Ç–∞)")
    
    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –≤—Å–µ –ø–∏—Å—å–º–∞
    if processed_count <= total_emails:
        print("‚úÖ –¢–ï–°–¢ 3 –ü–†–û–ô–î–ï–ù: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        test3_passed = True
    else:
        print(f"‚ùå –¢–ï–°–¢ 3 –ü–†–û–í–ê–õ–ï–ù: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count}, –¥–æ—Å—Ç—É–ø–Ω–æ {total_emails}")
        test3_passed = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –¢–µ—Å—Ç 1 (–ª–∏–º–∏—Ç 1): {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   –¢–µ—Å—Ç 2 (–ª–∏–º–∏—Ç > –ø–∏—Å–µ–º): {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    print(f"   –¢–µ—Å—Ç 3 (–±–µ–∑ –ª–∏–º–∏—Ç–∞): {'‚úÖ –ü–†–û–ô–î–ï–ù' if test3_passed else '‚ùå –ü–†–û–í–ê–õ–ï–ù'}")
    
    all_passed = test1_passed and test2_passed and test3_passed
    
    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –§—É–Ω–∫—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\n‚ùå –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")
    
    return all_passed

if __name__ == "__main__":
    success = test_email_limit()
    sys.exit(0 if success else 1)