#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è file_utils
–°–æ–∑–¥–∞–Ω–æ: 2025-01-27 23:30 (UTC+07)
"""

import pytest
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from file_utils import normalize_filename, get_normalized_filename_variants, find_best_filename_match


class TestNormalizeFilename:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ normalize_filename"""
    
    def test_basic_normalization(self):
        """–ë–∞–∑–æ–≤–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        result = normalize_filename("Test File.pdf")
        assert result == "test_file"
    
    def test_remove_extension_default(self):
        """–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è"""
        result = normalize_filename("document.docx")
        assert result == "document"
    
    def test_preserve_extension(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ø—Ä–∏ remove_extension=False"""
        result = normalize_filename("document.docx", remove_extension=False)
        assert result == "document.docx"
    
    def test_preserve_case(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –ø—Ä–∏ to_lowercase=False"""
        result = normalize_filename("TestFile.pdf", to_lowercase=False)
        assert result == "TestFile"
    
    def test_timestamp_removal(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
        # –§–æ—Ä–º–∞—Ç YYYYMMDD_domain_lang_hash_HHMMSS_attach_
        result = normalize_filename("20250127_example_ru_abc123_143000_attach_document.pdf")
        assert result == "document"
        
        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç _YYYYMMDD_HHMMSS
        result = normalize_filename("document_20250127_143000.pdf")
        assert result == "document"
        
        # –§–æ—Ä–º–∞—Ç _YYYY-MM-DD_HH-MM-SS
        result = normalize_filename("document_2025-01-27_14-30-00.pdf")
        assert result == "document"
    
    def test_method_suffix_removal(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –º–µ—Ç–æ–¥–æ–≤"""
        result = normalize_filename("document___ocr_method.pdf")
        assert result == "document"
        
        result = normalize_filename("file___llm_extraction.txt")
        assert result == "file"
    
    def test_duplicate_suffix_removal(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        result = normalize_filename("document (1).pdf")
        assert result == "document"
        
        result = normalize_filename("file_copy.txt")
        assert result == "file"
        
        result = normalize_filename("data_copy2.xlsx")
        assert result == "data"
        
        result = normalize_filename("backup_duplicate3.doc")
        assert result == "backup"
    
    def test_special_characters(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        result = normalize_filename("file@#$%^&*()name.pdf")
        assert result == "file_name"
        
        result = normalize_filename("–¥–æ–∫—É–º–µ–Ω—Ç-—Ñ–∞–π–ª.pdf")
        assert result == "–¥–æ–∫—É–º–µ–Ω—Ç_—Ñ–∞–π–ª"
    
    def test_preserve_structure(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏ preserve_structure=True"""
        result = normalize_filename("Test-File_Name.pdf", preserve_structure=True)
        assert result == "test-file_name"
    
    def test_cyrillic_support(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã"""
        result = normalize_filename("–¢–µ—Å—Ç–æ–≤—ã–π –§–∞–π–ª.pdf")
        assert result == "—Ç–µ—Å—Ç–æ–≤—ã–π_—Ñ–∞–π–ª"
        
        result = normalize_filename("–î–û–ö–£–ú–ï–ù–¢.docx")
        assert result == "–¥–æ–∫—É–º–µ–Ω—Ç"
    
    def test_unicode_normalization(self):
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Unicode —Å–∏–º–≤–æ–ª–æ–≤"""
        # –¢–µ—Å—Ç —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        result = normalize_filename("caf√©.pdf")
        assert result == "caf√©"
    
    def test_empty_and_edge_cases(self):
        """–ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏"""
        result = normalize_filename("")
        assert result == ""
        
        result = normalize_filename(".pdf")
        assert result == ""
        
        result = normalize_filename("___test___.pdf")
        assert result == "test"


class TestFilenameVariants:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_normalized_filename_variants"""
    
    def test_variants_generation(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω"""
        variants = get_normalized_filename_variants("Test File.pdf")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        assert len(variants) > 1
        assert "test_file" in variants  # –ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        assert len(variants) == len(set(variants))


class TestBestMatch:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ find_best_filename_match"""
    
    def test_exact_match(self):
        """–¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ"""
        candidates = ["document.txt", "file.pdf", "test.docx"]
        result = find_best_filename_match("document.txt", candidates)
        assert result == "document.txt"
    
    def test_normalized_match(self):
        """–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
        candidates = ["Document File.txt", "other.pdf"]
        result = find_best_filename_match("document_file", candidates)
        assert result == "Document File.txt"
    
    def test_no_match(self):
        """–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
        candidates = ["file1.txt", "file2.pdf"]
        result = find_best_filename_match("nonexistent", candidates)
        assert result is None
    
    def test_empty_candidates(self):
        """–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        result = find_best_filename_match("test", [])
        assert result is None


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    pytest.main([__file__, "-v"])