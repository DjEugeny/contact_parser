#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
–î–∞—Ç–∞: 2025-01-24 23:00 (UTC+07)

–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
2. –†–∞–±–æ—Ç—É LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (Groq –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π, Replicate –∫–∞–∫ fallback)
3. –û–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from llm_extractor import ContactExtractor
from integrated_llm_processor import IntegratedLLMProcessor
from google_sheets_exporter import GoogleSheetsExporter
from local_exporter import LocalDataExporter

def test_system_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîß –¢–ï–°–¢ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç ContactExtractor
        print("üìû –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ContactExtractor...")
        extractor = ContactExtractor(test_mode=True)
        print(f"   ‚úÖ ContactExtractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (test_mode=True)")
        print(f"   üéØ –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {extractor.current_provider}")
        
        # –¢–µ—Å—Ç IntegratedLLMProcessor
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IntegratedLLMProcessor...")
        processor = IntegratedLLMProcessor(test_mode=True)
        print(f"   ‚úÖ IntegratedLLMProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (test_mode=True)")
        
        # –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤...")
        local_exporter = LocalDataExporter()
        print(f"   ‚úÖ LocalDataExporter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        try:
            sheets_exporter = GoogleSheetsExporter()
            if sheets_exporter.client:
                print(f"   ‚úÖ GoogleSheetsExporter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å API")
            else:
                print(f"   ‚ö†Ô∏è GoogleSheetsExporter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ API (fallback —Ä–µ–∂–∏–º)")
        except Exception as e:
            print(f"   ‚ö†Ô∏è GoogleSheetsExporter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def test_contact_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    print("\nüîç –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ö–û–ù–¢–ê–ö–¢–û–í")
    print("=" * 50)
    
    try:
        extractor = ContactExtractor(test_mode=True)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        test_text = """
        –£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏!
        
        –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≤–∞–º –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ –û–û–û "–¢–µ—Å—Ç –°–∏—Å—Ç–µ–º—ã".
        –ù–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
        Email: ivan.petrov@test-company.ru
        –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
        –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        """
        
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω ({len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ LLM –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        
        result = extractor.extract_contacts(test_text, "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ")
        
        if result and 'contacts' in result:
            contacts = result['contacts']
            print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
            
            for i, contact in enumerate(contacts, 1):
                print(f"   üìû –ö–æ–Ω—Ç–∞–∫—Ç {i}:")
                print(f"      –ò–º—è: {contact.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
                print(f"      –¢–µ–ª–µ—Ñ–æ–Ω: {contact.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"      Email: {contact.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"      –ö–æ–º–ø–∞–Ω–∏—è: {contact.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            
            return True
        else:
            print(f"   ‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            print(f"   üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            return False
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_provider_health():
    """–¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("\nüè• –¢–ï–°–¢ –°–û–°–¢–û–Ø–ù–ò–Ø –ü–†–û–í–ê–ô–î–ï–†–û–í")
    print("=" * 50)
    
    try:
        extractor = ContactExtractor(test_mode=True)
        
        print(f"üéØ –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {extractor.current_provider}")
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
        
        for provider_name, config in extractor.providers.items():
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if config.get('active', False) else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
            priority = config.get('priority', '–ù–µ —É–∫–∞–∑–∞–Ω')
            print(f"   {provider_name}: {status} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority})")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("üìÖ –î–∞—Ç–∞: 2025-01-24 23:00 (UTC+07)")
    print("üîß –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫")
    print("=" * 60)
    
    tests = [
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", test_system_initialization),
        ("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤", test_provider_health),
        ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", test_contact_extraction),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        try:
            if test_func():
                print(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"üí• –¢–µ—Å—Ç '{test_name}' –ó–ê–í–ï–†–®–ò–õ–°–Ø –° –û–®–ò–ë–ö–û–ô: {e}")
    
    print(f"\nüèÅ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –§–ò–ù–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print(f"=" * 60)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}/{total}")
    
    if passed == total:
        print(f"üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print(f"‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print(f"üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        return False

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)