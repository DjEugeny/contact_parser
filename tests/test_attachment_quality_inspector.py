#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –ü–∞–∫–µ—Ç–Ω—ã–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ OCR –¥–ª—è –í–°–ï–• –¥–∞—Ç
–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
"""

import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src
sys.path.append(str(Path(__file__).parent))

from email_loader import ProcessedEmailLoader
from attachment_processor import AttachmentProcessor


class BatchQualityInspector:
    """üîç –ü–∞–∫–µ—Ç–Ω—ã–π –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ OCR"""
    
    def __init__(self):
        self.email_loader = ProcessedEmailLoader()
        self.attachment_processor = AttachmentProcessor()
        
        # –ü–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        self.data_dir = Path("data")
        self.quality_dir = self.data_dir / "attachment_quality"
        self.extracted_texts_dir = self.quality_dir / "extracted_texts"
        self.reports_dir = self.quality_dir / "reports"
        
        for dir_path in [self.quality_dir, self.extracted_texts_dir, self.reports_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        print("üîç –ü–ê–ö–ï–¢–ù–´–ô –ò–ù–°–ü–ï–ö–¢–û–† –ö–ê–ß–ï–°–¢–í–ê OCR")
        print("="*70)
        print(f"   üìÅ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã: {self.extracted_texts_dir}")
        print(f"   üìä –û—Ç—á–µ—Ç—ã: {self.reports_dir}")

    def inspect_all_dates(self):
        """üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º"""
        
        available_dates = self.email_loader.get_available_date_folders()
        print(f"üìÖ –ù–∞–π–¥–µ–Ω–æ –¥–∞—Ç –¥–ª—è –∏–Ω—Å–ø–µ–∫—Ü–∏–∏: {len(available_dates)}")
        print(f"   –î–∞—Ç—ã: {', '.join(available_dates)}")
        
        all_results = {}
        total_attachments = 0
        total_success = 0
        
        for date_idx, date in enumerate(available_dates, 1):
            print(f"\n{'='*70}")
            print(f"üîç –ò–ù–°–ü–ï–ö–¶–ò–Ø –ö–ê–ß–ï–°–¢–í–ê –ó–ê {date} ({date_idx}/{len(available_dates)})")
            print(f"{'='*70}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –∑–∞ –¥–∞—Ç—É
            emails = self.email_loader.load_emails_by_date(date)
            emails_with_attachments = self.email_loader.get_emails_with_attachments(emails)
            
            if not emails_with_attachments:
                print(f"üì≠ –ù–µ—Ç –ø–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –∑–∞ {date}")
                continue
            
            print(f"üìé –ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {len(emails_with_attachments)} –∏–∑ {len(emails)}")
            
            date_results = self.inspect_date(date, emails_with_attachments)
            all_results[date] = date_results
            
            total_attachments += date_results['total_attachments']
            total_success += date_results['successful_extractions']
            
            print(f"\nüìä –ò–¢–û–ì –ó–ê {date}:")
            print(f"   üìé –í–ª–æ–∂–µ–Ω–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {date_results['total_attachments']}")
            print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π: {date_results['successful_extractions']}")
            if date_results['total_attachments'] > 0:
                success_rate = (date_results['successful_extractions'] / date_results['total_attachments']) * 100
                print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        self.create_summary_report(all_results, total_attachments, total_success)
        
        print(f"\nüéâ –ò–ù–°–ü–ï–ö–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print(f"   üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: {self.reports_dir}/batch_quality_summary.html")

    def inspect_date(self, date: str, emails_with_attachments: list) -> dict:
        """üîç –ò–Ω—Å–ø–µ–∫—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞ –æ–¥–Ω—É –¥–∞—Ç—É"""
        
        date_attachments = []
        total_attachments = 0
        successful_extractions = 0
        
        for email_idx, email in enumerate(emails_with_attachments, 1):
            print(f"\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            print(f"üìß –ü–ò–°–¨–ú–û {email_idx}/{len(emails_with_attachments)}")
            print(f"   –û—Ç: {email.get('from', 'N/A')[:50]}...")
            print(f"   –¢–µ–º–∞: {email.get('subject', 'N/A')[:60]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
            attachments = email.get('attachments', [])
            downloaded_attachments = [
                att for att in attachments 
                if att.get('status') == 'saved' and att.get('file_path')
            ]
            
            print(f"   üìé –í–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(downloaded_attachments)}")
            
            for att_idx, attachment in enumerate(downloaded_attachments, 1):
                print(f"\n   üîç –í–ª–æ–∂–µ–Ω–∏–µ {att_idx}/{len(downloaded_attachments)}: {attachment.get('original_filename')}")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                file_path = self.email_loader.get_attachment_file_path(email, attachment)
                if not file_path:
                    print(f"      ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {attachment.get('original_filename')}")
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏–µ
                result = self.attachment_processor.process_single_attachment(
                    email, attachment, self.email_loader
                )
                
                if result:
                    total_attachments += 1
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    extracted_text = result.get('extracted_text', '')
                    char_count = len(extracted_text)
                    
                    print(f"      üìÅ –§–∞–π–ª: {attachment.get('original_filename')}")
                    print(f"      üìä –¢–∏–ø: {attachment.get('file_type')}")
                    print(f"      üìè –†–∞–∑–º–µ—Ä: {attachment.get('file_size')} –±–∞–π—Ç")
                    print(f"      üîß –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('method')}")
                    print(f"      üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {char_count}")
                    
                    if char_count > 10:  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–æ –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
                        successful_extractions += 1
                        print(f"      ‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                        self.save_extracted_text(
                            date, email_idx, att_idx, 
                            attachment.get('original_filename', f'attachment_{att_idx}'),
                            extracted_text
                        )
                    else:
                        print(f"      ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è")
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
                    attachment_analysis = {
                        'email_idx': email_idx,
                        'attachment_idx': att_idx,
                        'filename': attachment.get('original_filename'),
                        'file_type': attachment.get('file_type'),
                        'file_size': attachment.get('file_size'),
                        'method': result.get('method'),
                        'char_count': char_count,
                        'success': char_count > 10
                    }
                    date_attachments.append(attachment_analysis)
        
        return {
            'date': date,
            'emails_count': len(emails_with_attachments),
            'total_attachments': total_attachments,
            'successful_extractions': successful_extractions,
            'attachments_details': date_attachments
        }

    def save_extracted_text(self, date: str, email_idx: int, att_idx: int, filename: str, text: str):
        """üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_filename = "".join(c for c in filename if c.isalnum() or c in (' ', '.', '_')).rstrip()
        text_filename = f"email_{email_idx:03d}_att_{att_idx:02d}_{safe_filename}.txt"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –ø–æ –¥–∞—Ç–µ
        date_dir = self.extracted_texts_dir / date
        date_dir.mkdir(exist_ok=True)
        
        text_path = date_dir / text_filename
        
        try:
            with open(text_path, 'w', encoding='utf-8') as f:
                f.write(text)
            print(f"      üíæ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {text_filename}")
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")

    def create_summary_report(self, all_results: dict, total_attachments: int, total_success: int):
        """üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ HTML –æ—Ç—á–µ—Ç–∞"""
        
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>–û—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ OCR - –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .header {{ background: #f0f8ff; padding: 20px; border-radius: 10px; }}
        .stats {{ background: #f9f9f9; padding: 15px; margin: 20px 0; border-radius: 5px; }}
        .date-section {{ margin: 20px 0; border-left: 4px solid #007acc; padding-left: 15px; }}
        .success {{ color: #008000; }}
        .warning {{ color: #ff8c00; }}
        .error {{ color: #dc143c; }}
        table {{ width: 100%; border-collapse: collapse; margin: 10px 0; }}
        th, td {{ padding: 10px; text-align: left; border: 1px solid #ddd; }}
        th {{ background-color: #f2f2f2; }}
        .progress-bar {{ width: 100%; height: 20px; background-color: #f0f0f0; border-radius: 10px; }}
        .progress-fill {{ height: 100%; background-color: #4CAF50; border-radius: 10px; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç –û—Ç—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ OCR - –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</h1>
        <p>–°–æ–∑–¥–∞–Ω–æ: {timestamp}</p>
    </div>
    
    <div class="stats">
        <h2>üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <p><strong>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞—Ç:</strong> {len(all_results)}</p>
        <p><strong>–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–∏–π:</strong> {total_attachments}</p>
        <p><strong>–£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π:</strong> <span class="success">{total_success}</span></p>
        <p><strong>–û–±—â–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å:</strong> {(total_success/total_attachments*100):.1f}% ({total_success}/{total_attachments})</p>
        
        <div class="progress-bar">
            <div class="progress-fill" style="width: {(total_success/total_attachments*100) if total_attachments > 0 else 0}%"></div>
        </div>
    </div>
"""
        
        for date, results in all_results.items():
            success_rate = (results['successful_extractions'] / results['total_attachments'] * 100) if results['total_attachments'] > 0 else 0
            
            html_content += f"""
    <div class="date-section">
        <h3>üìÖ {date}</h3>
        <p>–ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏: {results['emails_count']}</p>
        <p>–í–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {results['total_attachments']}</p>
        <p>–£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π: <span class="{'success' if success_rate > 80 else 'warning' if success_rate > 50 else 'error'}">{results['successful_extractions']} ({success_rate:.1f}%)</span></p>
        
        <table>
            <tr>
                <th>‚Ññ –ø–∏—Å—å–º–∞</th>
                <th>‚Ññ –≤–ª–æ–∂–µ–Ω–∏—è</th>
                <th>–§–∞–π–ª</th>
                <th>–¢–∏–ø</th>
                <th>–†–∞–∑–º–µ—Ä</th>
                <th>–ú–µ—Ç–æ–¥</th>
                <th>–°–∏–º–≤–æ–ª–æ–≤</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
            </tr>
"""
            
            for att in results['attachments_details']:
                status_class = 'success' if att['success'] else 'error'
                status_text = '‚úÖ –£—Å–ø–µ—à–Ω–æ' if att['success'] else '‚ùå –û—à–∏–±–∫–∞'
                
                html_content += f"""
            <tr>
                <td>{att['email_idx']}</td>
                <td>{att['attachment_idx']}</td>
                <td>{att['filename']}</td>
                <td>{att['file_type']}</td>
                <td>{att['file_size']} –±–∞–π—Ç</td>
                <td>{att['method']}</td>
                <td>{att['char_count']}</td>
                <td class="{status_class}">{status_text}</td>
            </tr>
"""
            
            html_content += """
        </table>
    </div>
"""
        
        html_content += """
</body>
</html>
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = self.reports_dir / "batch_quality_summary.html"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        print(f"üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")


def main():
    """üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    
    inspector = BatchQualityInspector()
    inspector.inspect_all_dates()


if __name__ == '__main__':
    main()
