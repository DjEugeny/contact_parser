#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å Replicate API
"""

import os
import requests
import json
import time
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_replicate_api():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Replicate API"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Replicate API")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º API —Ç–æ–∫–µ–Ω
    api_token = os.getenv('REPLICATE_API_KEY')
    if not api_token:
        print("‚ùå REPLICATE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print(f"üîë API —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {api_token[:10]}...{api_token[-4:]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫–∫–∞—É–Ω—Ç –∏ –±–∞–ª–∞–Ω—Å
    headers = {
        'Authorization': f'Token {api_token}',
        'Content-Type': 'application/json'
    }
    
    print("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å–∞...")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        response = requests.get(
            'https://api.replicate.com/v1/account',
            headers=headers,
            timeout=10
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 401:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–≤–µ—Ä–Ω—ã–π API —Ç–æ–∫–µ–Ω")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
        elif response.status_code == 200:
            data = response.json()
            print("‚úÖ API —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìß Email: {data.get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üéØ –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞: {data.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if 'billing' in data:
                billing = data['billing']
                print(f"üí≥ –ë–∞–ª–∞–Ω—Å: ${billing.get('balance', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: ${billing.get('current_month_usage', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            return True
            
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False

def check_replicate_model():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
    print("\nü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏...")
    
    api_token = os.getenv('REPLICATE_API_KEY')
    model = os.getenv('REPLICATE_MODEL', 'meta/llama-2-13b')
    
    headers = {
        'Authorization': f'Token {api_token}',
        'Content-Type': 'application/json'
    }
    
    print(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º–∞—è –º–æ–¥–µ–ª—å: {model}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        response = requests.get(
            f'https://api.replicate.com/v1/models/{model}',
            headers=headers,
            timeout=10
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")
            print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')[:100]}...")
            print(f"üè∑Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: {data.get('latest_version', {}).get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:12]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            if data.get('visibility') == 'public':
                print("üåê –ú–æ–¥–µ–ª—å –ø—É–±–ª–∏—á–Ω–∞—è")
            else:
                print(f"üîí –í–∏–¥–∏–º–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {data.get('visibility', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            
            return True
            
        elif response.status_code == 404:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏")
            print("   - –ú–æ–¥–µ–ª—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
            print("   - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏")
            
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
        
        return False
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False

def test_replicate_prediction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
    
    api_token = os.getenv('REPLICATE_API_KEY')
    model = os.getenv('REPLICATE_MODEL', 'meta/llama-2-13b')
    
    headers = {
        'Authorization': f'Token {api_token}',
        'Content-Type': 'application/json'
    }
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    payload = {
        'version': model,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –º–æ–¥–µ–ª–∏ –∫–∞–∫ –≤–µ—Ä—Å–∏—é
        'input': {
            'prompt': '–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ç–µ—Å—Ç',
            'max_tokens': 10,
            'temperature': 0
        }
    }
    
    try:
        print(f"üì§ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏: {model}")
        response = requests.post(
            'https://api.replicate.com/v1/predictions',
            headers=headers,
            json=payload,  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä model, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ version
            timeout=30
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 201:
            data = response.json()
            prediction_id = data.get('id')
            print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {prediction_id}")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"üîó URL: {data.get('urls', {}).get('get', '–ù–µ—Ç URL')}")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...")
            return wait_for_prediction(prediction_id, headers)
            
        elif response.status_code == 400:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (400)")
            error_data = response.json() if response.headers.get('content-type', '').startswith('application/json') else {}
            print(f"   –î–µ—Ç–∞–ª–∏: {error_data.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
        elif response.status_code == 402:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (402)")
            print("   –ë–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω")
            
        elif response.status_code == 429:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429)")
            print("   –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            
        else:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {response.status_code}")
            
        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text}")
        return False
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}")
        return False

def wait_for_prediction(prediction_id, headers, max_wait=60):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    start_time = time.time()
    
    while time.time() - start_time < max_wait:
        try:
            response = requests.get(
                f'https://api.replicate.com/v1/predictions/{prediction_id}',
                headers=headers,
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                status = data.get('status')
                
                print(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
                
                if status == 'succeeded':
                    output = data.get('output')
                    print(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                    print(f"üí¨ –†–µ–∑—É–ª—å—Ç–∞—Ç: {output}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    metrics = data.get('metrics', {})
                    if metrics:
                        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {metrics.get('predict_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}—Å")
                    
                    return True
                    
                elif status == 'failed':
                    error = data.get('error')
                    print(f"‚ùå –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: {error}")
                    return False
                    
                elif status in ['starting', 'processing']:
                    print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... ({status})")
                    time.sleep(2)
                    continue
                    
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {status}")
                    time.sleep(2)
                    continue
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
            return False
    
    print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({max_wait}—Å)")
    return False

def check_replicate_usage():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ª–∏–º–∏—Ç–æ–≤"""
    print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è...")
    
    api_token = os.getenv('REPLICATE_API_KEY')
    headers = {
        'Authorization': f'Token {api_token}',
        'Content-Type': 'application/json'
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        response = requests.get(
            'https://api.replicate.com/v1/predictions?limit=5',
            headers=headers,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            predictions = data.get('results', [])
            
            print(f"üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(predictions)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
            for pred in predictions:
                status = pred.get('status')
                created = pred.get('created_at', '')[:19].replace('T', ' ')
                model = pred.get('model', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   {created} | {status} | {model}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                if status == 'failed' and pred.get('error'):
                    print(f"     ‚ùå –û—à–∏–±–∫–∞: {pred.get('error')[:100]}...")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {response.status_code}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

if __name__ == "__main__":
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Replicate: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω –∏ –∞–∫–∫–∞—É–Ω—Ç
    api_valid = check_replicate_api()
    
    if api_valid:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å
        model_valid = check_replicate_model()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        check_replicate_usage()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        if model_valid:
            prediction_success = test_replicate_prediction()
        else:
            prediction_success = False
        
        print("\n" + "=" * 50)
        print("üìã –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò REPLICATE")
        print("=" * 50)
        print(f"üîë API —Ç–æ–∫–µ–Ω: {'‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' if api_valid else '‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'}")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞' if model_valid else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
        print(f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if prediction_success else '‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ'}")
        
        if not prediction_success:
            print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞ Replicate")
            print("2. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å meta/llama-2-13b –¥–æ—Å—Ç—É–ø–Ω–∞")
            print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞")
            print("4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª–∏")
            print("5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    print(f"\nüïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")