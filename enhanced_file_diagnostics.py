#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ñ–∞–π–ª–æ–≤
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:
1. –ù–µ—Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 10 –≤–º–µ—Å—Ç–æ 8 –¥–ª—è 2025-07-29)
2. –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
3. –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
4. –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import os
import json
import re
from pathlib import Path
from datetime import datetime
from collections import defaultdict
from src.file_utils import normalize_filename

# –§—É–Ω–∫—Ü–∏—è normalize_filename –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ src.file_utils

def analyze_date_detailed(date_str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    print(f"\n{'='*80}")
    print(f"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–¢–´: {date_str}")
    print(f"{'='*80}")
    
    # –ü—É—Ç–∏ –∫ –ø–∞–ø–∫–∞–º
    attachments_dir = f"/Users/evgenyzach/contact_parser/data/attachments/{date_str}"
    results_dir = f"/Users/evgenyzach/contact_parser/data/final_results/texts/{date_str}"
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤–æ –≤–ª–æ–∂–µ–Ω–∏—è—Ö
    attachment_files = []
    if os.path.exists(attachments_dir):
        for file in os.listdir(attachments_dir):
            if file.lower().endswith(('.pdf', '.docx', '.doc')):
                attachment_files.append(file)
    
    # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    result_files = []
    if os.path.exists(results_dir):
        for file in os.listdir(results_dir):
            if file.lower().endswith('.txt'):
                result_files.append(file)
    
    print(f"üìÅ –§–ê–ô–õ–´ –í–û –í–õ–û–ñ–ï–ù–ò–Ø–•: {len(attachment_files)}")
    for i, file in enumerate(attachment_files, 1):
        print(f"   {i:2d}. {file}")
    
    print(f"\nüìÑ –§–ê–ô–õ–´ –í –†–ï–ó–£–õ–¨–¢–ê–¢–ê–•: {len(result_files)}")
    for i, file in enumerate(result_files, 1):
        print(f"   {i:2d}. {file}")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–º–µ–Ω
    print(f"\nüîÑ –ê–ù–ê–õ–ò–ó –ù–û–†–ú–ê–õ–ò–ó–û–í–ê–ù–ù–´–• –ò–ú–ï–ù:")
    
    attachment_normalized = {}
    for file in attachment_files:
        normalized = normalize_filename(file)
        attachment_normalized[normalized] = file
        print(f"   üìé {file} ‚Üí {normalized}")
    
    result_normalized = {}
    for file in result_files:
        # –£–±–∏—Ä–∞–µ–º .txt –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
        base_name = file.replace('.txt', '')
        normalized = normalize_filename(base_name)
        result_normalized[normalized] = file
        print(f"   üìÑ {file} ‚Üí {normalized}")
    
    # –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
    print(f"\nüîó –ê–ù–ê–õ–ò–ó –°–û–û–¢–í–ï–¢–°–¢–í–ò–ô:")
    matched = set()
    unmatched_attachments = []
    unmatched_results = []
    
    for norm_name, att_file in attachment_normalized.items():
        if norm_name in result_normalized:
            matched.add(norm_name)
            print(f"   ‚úÖ {att_file} ‚Üî {result_normalized[norm_name]}")
        else:
            unmatched_attachments.append(att_file)
            print(f"   ‚ùå {att_file} ‚Üí –ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê")
    
    for norm_name, res_file in result_normalized.items():
        if norm_name not in attachment_normalized:
            unmatched_results.append(res_file)
            print(f"   ‚ö†Ô∏è  {res_file} ‚Üí –ù–ï–¢ –ò–°–•–û–î–ù–û–ì–û –§–ê–ô–õ–ê")
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã
    print(f"\nüìã –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í:")
    analyze_logs_for_date(date_str)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if len(unmatched_attachments) > 0:
        print(f"   üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤: {', '.join(unmatched_attachments)}")
    if len(unmatched_results) > 0:
        print(f"   üßπ –í–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–ª–∏ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã: {', '.join(unmatched_results)}")
    if len(attachment_files) != len(result_files):
        print(f"   ‚öñÔ∏è  –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {len(attachment_files)} –≤–ª–æ–∂–µ–Ω–∏–π vs {len(result_files)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    return {
        'date': date_str,
        'attachments_count': len(attachment_files),
        'results_count': len(result_files),
        'matched_count': len(matched),
        'unmatched_attachments': unmatched_attachments,
        'unmatched_results': unmatched_results
    }

def analyze_logs_for_date(date_str):
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã"""
    logs_dir = "/Users/evgenyzach/contact_parser/data/logs"
    
    # –ü–æ–∏—Å–∫ –ª–æ–≥–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –¥–∞—Ç—ã
    relevant_logs = []
    
    if os.path.exists(logs_dir):
        for log_file in os.listdir(logs_dir):
            if log_file.endswith('.log'):
                log_path = os.path.join(logs_dir, log_file)
                try:
                    with open(log_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if date_str in content or date_str.replace('-', '.') in content:
                            relevant_logs.append(log_file)
                except Exception as e:
                    continue
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –ª–æ–≥–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º {date_str}: {len(relevant_logs)}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –ª–æ–≥–∞
    if relevant_logs:
        latest_log = sorted(relevant_logs)[-1]
        print(f"   üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥: {latest_log}")
        
        log_path = os.path.join(logs_dir, latest_log)
        try:
            with open(log_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–∞–π–ª–æ–≤
            files_found = []
            errors_found = []
            
            for line in lines:
                if date_str in line or date_str.replace('-', '.') in line:
                    if '—Ñ–∞–π–ª' in line.lower() or '–æ–±—Ä–∞–±–æ—Ç–∫–∞' in line.lower():
                        files_found.append(line.strip())
                    if '–æ—à–∏–±–∫–∞' in line.lower() or 'error' in line.lower() or 'failed' in line.lower():
                        errors_found.append(line.strip())
            
            if files_found:
                print(f"   üìÅ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö ({len(files_found)} –∑–∞–ø–∏—Å–µ–π):")
                for info in files_found[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
                    print(f"      {info}")
            
            if errors_found:
                print(f"   ‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ ({len(errors_found)} –∑–∞–ø–∏—Å–µ–π):")
                for error in errors_found[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—à–∏–±–∫–∏
                    print(f"      {error}")
            
        except Exception as e:
            print(f"   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

def find_file_count_discrepancies():
    """–ü–æ–∏—Å–∫ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ –ø–æ–¥—Å—á–µ—Ç–µ —Ñ–∞–π–ª–æ–≤"""
    print(f"\n{'='*80}")
    print(f"üîç –ü–û–ò–°–ö –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –í –ü–û–î–°–ß–ï–¢–ï –§–ê–ô–õ–û–í")
    print(f"{'='*80}")
    
    attachments_base = "/Users/evgenyzach/contact_parser/data/attachments"
    results_base = "/Users/evgenyzach/contact_parser/data/final_results/texts"
    
    discrepancies = []
    
    if os.path.exists(attachments_base):
        for date_folder in os.listdir(attachments_base):
            if re.match(r'\d{4}-\d{2}-\d{2}', date_folder):
                att_path = os.path.join(attachments_base, date_folder)
                res_path = os.path.join(results_base, date_folder)
                
                if os.path.isdir(att_path):
                    att_count = len([f for f in os.listdir(att_path) 
                                   if f.lower().endswith(('.pdf', '.docx', '.doc'))])
                    
                    res_count = 0
                    if os.path.exists(res_path):
                        res_count = len([f for f in os.listdir(res_path) 
                                       if f.lower().endswith('.txt')])
                    
                    if att_count != res_count:
                        discrepancies.append({
                            'date': date_folder,
                            'attachments': att_count,
                            'results': res_count,
                            'difference': att_count - res_count
                        })
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–Ω–æ—Å—Ç–∏
    discrepancies.sort(key=lambda x: abs(x['difference']), reverse=True)
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: {len(discrepancies)}")
    print(f"\n{'–î–∞—Ç–∞':<12} {'–í–ª–æ–∂–µ–Ω–∏—è':<10} {'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã':<11} {'–†–∞–∑–Ω–æ—Å—Ç—å':<9} {'–°—Ç–∞—Ç—É—Å':<15}")
    print(f"{'-'*60}")
    
    for disc in discrepancies[:15]:  # –¢–æ–ø 15 —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
        status = "‚ùå –ù–µ–¥–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞" if disc['difference'] > 0 else "‚ö†Ô∏è –õ–∏—à–Ω–∏–µ —Ñ–∞–π–ª—ã"
        print(f"{disc['date']:<12} {disc['attachments']:<10} {disc['results']:<11} {disc['difference']:>+8} {status}")
    
    return discrepancies

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –£–õ–£–ß–®–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –û–ë–†–ê–ë–û–¢–ö–û–ô –§–ê–ô–õ–û–í")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π
    discrepancies = find_file_count_discrepancies()
    
    # 2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –¥–∞—Ç
    problem_dates = ['2025-07-29', '2025-08-25', '2025-07-15', '2025-08-15', '2025-08-20', '2025-07-11']
    
    results = []
    for date in problem_dates:
        result = analyze_date_detailed(date)
        results.append(result)
    
    # 3. –°–≤–æ–¥–∫–∞
    print(f"\n{'='*80}")
    print(f"üìã –°–í–û–î–ö–ê –ê–ù–ê–õ–ò–ó–ê")
    print(f"{'='*80}")
    
    total_unmatched_att = sum(len(r['unmatched_attachments']) for r in results)
    total_unmatched_res = sum(len(r['unmatched_results']) for r in results)
    
    print(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–∞—Ç: {len(results)}")
    print(f"üìé –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π: {total_unmatched_att}")
    print(f"üìÑ –õ–∏—à–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_unmatched_res}")
    print(f"üîç –í—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(discrepancies)}")
    
    print(f"\nüí° –û–°–ù–û–í–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print(f"1. –£–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤")
    print(f"2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print(f"3. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print(f"4. –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print(f"5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()