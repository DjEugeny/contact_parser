#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 2025-01-27 02:00 (UTC+07)
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.llm_extractor import ContactExtractor

def test_deduplicate_contacts():
    """–¢–µ—Å—Ç –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
    
    extractor = ContactExtractor(test_mode=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    test_contacts = [
        {
            'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
            'email': 'ivan@example.com',
            'phone': '+7 (999) 123-45-67',
            'organization': '–û–û–û –¢–µ—Å—Ç',
            'confidence': 0.9
        },
        {
            'name': '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',  # –î—É–±–ª–∏–∫–∞—Ç –ø–æ email
            'email': 'ivan@example.com',
            'phone': '+7 999 123 45 67',  # –¢–æ—Ç –∂–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            'organization': '–û–û–û –¢–µ—Å—Ç',
            'confidence': 0.8
        },
        {
            'name': '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
            'email': 'maria@example.com',
            'phone': '+7 (888) 987-65-43',
            'organization': '–ò–ü –°–∏–¥–æ—Ä–æ–≤–∞',
            'confidence': 0.95
        },
        {
            'name': '–ü–µ—Ç—Ä –ò–≤–∞–Ω–æ–≤',
            'email': 'petr@example.com',
            'phone': '8-888-987-65-43',  # –î—É–±–ª–∏–∫–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ú–∞—Ä–∏–∏ –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            'organization': '–û–û–û –ò–≤–∞–Ω–æ–≤',
            'confidence': 0.7
        }
    ]
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
    unique_contacts = extractor._deduplicate_contacts(test_contacts)
    
    print(f"   üìä –ò—Å—Ö–æ–¥–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(test_contacts)}")
    print(f"   üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(unique_contacts)}")
    
    # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    print("   üìã –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:")
    for i, contact in enumerate(unique_contacts):
        print(f"      {i+1}. {contact['name']} - {contact['email']} - {contact['phone']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞
    # (–ò–≤–∞–Ω –∏ –ú–∞—Ä–∏—è, —Ç–∞–∫ –∫–∞–∫ —É –ü–µ—Ç—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –¥—É–±–ª–∏—Ä—É–µ—Ç –ú–∞—Ä–∏—é)
    expected_count = 2
    
    if len(unique_contacts) == expected_count:
        print("   ‚úÖ –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}, –ø–æ–ª—É—á–µ–Ω–æ {len(unique_contacts)}")
        return False

def test_chunk_processing():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–æ —á–∞—Å—Ç—è–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤...")
    
    extractor = ContactExtractor(test_mode=True)
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–±–æ–ª—å—à–µ 6000 —Å–∏–º–≤–æ–ª–æ–≤)
    large_text = """–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏!
    
    –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤, —è –¥–∏—Ä–µ–∫—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –û–û–û "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏". 
    –ú–æ–π email: alex.ivanov@innovations.ru, —Ç–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67.
    
    –•–æ—á—É –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É:
    
    1. –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞ - –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
       Email: maria.petrova@innovations.ru
       –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 234-56-78
       
    2. –°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤ - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –¥–∏—Ä–µ–∫—Ç–æ—Ä
       Email: sergey.sidorov@innovations.ru
       –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 345-67-89
    
    """ * 50  # –ü–æ–≤—Ç–æ—Ä—è–µ–º 50 —Ä–∞–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    print(f"   üìù –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(large_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç
    result = extractor.extract_contacts(large_text)
    
    print(f"   üìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(result.get('contacts', []))}")
    print(f"   ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–æ–ª—è
    required_fields = ['contacts', 'business_context', 'recommended_actions']
    
    for field in required_fields:
        if field not in result:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")
            return False
    
    # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç
    if len(result['contacts']) > 0:
        print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print("   ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –±–æ–ª—å—à–æ–º —Ç–µ–∫—Å—Ç–µ")
        return False

def test_text_chunking():
    """–¢–µ—Å—Ç —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∏–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏...")
    
    extractor = ContactExtractor(test_mode=True)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    test_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±–∏–≤–∫–∏ –Ω–∞ —á–∞—Å—Ç–∏. " * 200
    
    print(f"   üìù –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(test_text)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Ç–æ–¥ _create_text_chunks
    if hasattr(extractor, '_create_text_chunks'):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é chunking
        chunking_config = extractor._load_chunking_config() if hasattr(extractor, '_load_chunking_config') else {
            'max_tokens_per_chunk': 4000,
            'overlap_tokens': 200
        }
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏
        chunks = extractor._create_text_chunks(test_text, chunking_config)
        
        print(f"   üìä –°–æ–∑–¥–∞–Ω–æ —á–∞—Å—Ç–µ–π: {len(chunks)}")
        
        if len(chunks) > 0:
            print(f"   üìè –†–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏: {len(chunks[0])} —Å–∏–º–≤–æ–ª–æ–≤")
            print("   ‚úÖ –†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("   ‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏")
            return False
    else:
        print("   ‚ö†Ô∏è –ú–µ—Ç–æ–¥ _create_text_chunks –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ª–æ–≥–∏–∫–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("=" * 60)
    
    tests = [
        ("–î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤", test_deduplicate_contacts),
        ("–†–∞–∑–±–∏–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏", test_text_chunking),
        ("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤", test_chunk_processing)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        return False

if __name__ == "__main__":
    main()