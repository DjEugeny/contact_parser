#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º
–±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è LLM –∑–∞–ø—Ä–æ—Å–æ–≤

–°—Ü–µ–Ω–∞—Ä–∏–∏:
1. JSON –∏ –≤–ª–æ–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
2. –¢–æ–ª—å–∫–æ JSON —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è
3. –¢–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ JSON
4. –ù–∏—á–µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—ë
"""

import os
import sys
import json
import shutil
from datetime import datetime, timedelta
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append(str(Path(__file__).parent / 'src'))

from advanced_email_fetcher import AdvancedEmailFetcherV2, setup_logging

class EmailScenarioTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º"""
    
    def __init__(self, base_dir: Path):
        self.base_dir = base_dir
        self.test_date = "2025-01-21"
        self.test_data_dir = base_dir / "data"
        self.test_emails_dir = self.test_data_dir / "emails" / self.test_date
        self.test_attachments_dir = self.test_data_dir / "attachments" / self.test_date
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.test_emails_dir.mkdir(parents=True, exist_ok=True)
        self.test_attachments_dir.mkdir(parents=True, exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logs_dir = base_dir / "logs"
        logs_dir.mkdir(exist_ok=True)
        start_date = datetime.strptime(self.test_date, "%Y-%m-%d")
        end_date = start_date + timedelta(days=1)
        self.logger = setup_logging(logs_dir, start_date, end_date)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è fetcher
        self.fetcher = AdvancedEmailFetcherV2(self.logger)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.test_message_id = "test_message_123@example.com"
        self.test_thread_id = "thread_test_123"
        
    def cleanup_test_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.test_emails_dir.exists():
            shutil.rmtree(self.test_emails_dir)
        if self.test_attachments_dir.exists():
            shutil.rmtree(self.test_attachments_dir)
        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
    def create_test_json(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JSON —Ñ–∞–π–ª–∞ –ø–∏—Å—å–º–∞"""
        test_email_data = {
            "message_id": self.test_message_id,
            "thread_id": self.test_thread_id,
            "from": "test@example.com",
            "subject": "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ",
            "date": self.test_date,
            "body": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤",
            "attachments": [
                {
                    "filename": "test_document.pdf",
                    "size": 1024,
                    "content_type": "application/pdf"
                }
            ],
            "stats": {
                "saved_attachments": 1,
                "excluded_attachments": 0
            }
        }
        
        json_file = self.test_emails_dir / f"{self.test_thread_id}.json"
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(test_email_data, f, ensure_ascii=False, indent=2)
        
        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π JSON: {json_file}")
        return json_file
        
    def create_test_attachment(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤–ª–æ–∂–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–º–µ–Ω–µ–º, –≤–∫–ª—é—á–∞—é—â–∏–º thread_id –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        attachment_file = self.test_attachments_dir / f"{self.test_thread_id}_test_document.pdf"
        with open(attachment_file, 'w') as f:
            f.write("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞")
        
        print(f"üìé –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ: {attachment_file}")
        return attachment_file
        
    def test_scenario_1_both_exist(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 1: JSON –∏ –≤–ª–æ–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–Ø 1: JSON –∏ –≤–ª–æ–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        print("="*60)
        
        # –°–æ–∑–¥–∞–µ–º –∏ JSON –∏ –≤–ª–æ–∂–µ–Ω–∏–µ
        self.create_test_json()
        self.create_test_attachment()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = self.fetcher.get_processing_scenario(self.test_message_id, self.test_date)
        print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
        
        expected = "skip_all"
        if scenario == expected:
            print(f"‚úÖ –£–°–ü–ï–•: –°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ '{expected}'")
            return True
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è '{expected}', –ø–æ–ª—É—á–µ–Ω '{scenario}'")
            return False
            
    def test_scenario_2_only_json(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 2: –¢–æ–ª—å–∫–æ JSON —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–Ø 2: –¢–æ–ª—å–∫–æ JSON —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("="*60)
        
        # –û—á–∏—â–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ JSON
        self.cleanup_test_data()
        self.test_emails_dir.mkdir(parents=True, exist_ok=True)
        self.test_attachments_dir.mkdir(parents=True, exist_ok=True)
        self.create_test_json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = self.fetcher.get_processing_scenario(self.test_message_id, self.test_date)
        print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
        
        expected = "download_attachments"
        if scenario == expected:
            print(f"‚úÖ –£–°–ü–ï–•: –°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ '{expected}'")
            return True
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è '{expected}', –ø–æ–ª—É—á–µ–Ω '{scenario}'")
            return False
            
    def test_scenario_3_only_attachments(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 3: –¢–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–Ø 3: –¢–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        print("="*60)
        
        # –û—á–∏—â–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–∏–µ
        self.cleanup_test_data()
        self.test_emails_dir.mkdir(parents=True, exist_ok=True)
        self.test_attachments_dir.mkdir(parents=True, exist_ok=True)
        self.create_test_attachment()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = self.fetcher.get_processing_scenario(self.test_message_id, self.test_date)
        print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
        
        expected = "download_json"
        if scenario == expected:
            print(f"‚úÖ –£–°–ü–ï–•: –°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ '{expected}'")
            return True
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è '{expected}', –ø–æ–ª—É—á–µ–Ω '{scenario}'")
            return False
            
    def test_scenario_4_nothing_exists(self):
        """–°—Ü–µ–Ω–∞—Ä–∏–π 4: –ù–∏—á–µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—ë"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢ –°–¶–ï–ù–ê–†–ò–Ø 4: –ù–∏—á–µ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("="*60)
        
        # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        self.cleanup_test_data()
        self.test_emails_dir.mkdir(parents=True, exist_ok=True)
        self.test_attachments_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = self.fetcher.get_processing_scenario(self.test_message_id, self.test_date)
        print(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario}")
        
        expected = "download_all"
        if scenario == expected:
            print(f"‚úÖ –£–°–ü–ï–•: –°—Ü–µ–Ω–∞—Ä–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ '{expected}'")
            return True
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª—Å—è '{expected}', –ø–æ–ª—É—á–µ–Ω '{scenario}'")
            return False
            
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–¶–ï–ù–ê–†–ò–ï–í –û–ë–†–ê–ë–û–¢–ö–ò –ü–ò–°–ï–ú")
        print(f"üìÖ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∞—Ç–∞: {self.test_date}")
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {self.test_data_dir}")
        
        results = []
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        results.append(self.test_scenario_1_both_exist())
        results.append(self.test_scenario_2_only_json())
        results.append(self.test_scenario_3_only_attachments())
        results.append(self.test_scenario_4_nothing_exists())
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*60)
        
        passed = sum(results)
        total = len(results)
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}/{total}")
        
        if passed == total:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        else:
            print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´")
            
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        self.cleanup_test_data()
        
        return passed == total

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    base_dir = Path(__file__).parent
    tester = EmailScenarioTester(base_dir)
    
    try:
        success = tester.run_all_tests()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()