#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üåç –†–µ–≥–∏–æ–Ω—ã –∏ —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
"""

from typing import Dict, Any

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
PRIORITY_REGIONS = [
    '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ö–∞–∑–∞–Ω—å', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫',
    '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–°–æ—á–∏', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥', '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫'
]

# –û—Ç—Ä–∞—Å–ª–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
PRIORITY_INDUSTRIES = [
    '–º–µ–¥–∏—Ü–∏–Ω–∞', '—Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞', '–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è', '–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
    '–∫–ª–∏–Ω–∏–∫–∞', '–±–æ–ª—å–Ω–∏—Ü–∞', '–Ω–∞—É—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä', '–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç',
    '–±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—Ü–∏—Ç–æ–≥–µ–Ω–µ—Ç–∏–∫–∞', '–≥–µ–Ω–µ—Ç–∏–∫–∞'
]

# –î–æ–ª–∂–Ω–æ—Å—Ç–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
PRIORITY_POSITIONS = [
    '–¥–∏—Ä–µ–∫—Ç–æ—Ä', '–≥–ª–∞–≤–Ω—ã–π –≤—Ä–∞—á', '–∑–∞–≤–µ–¥—É—é—â–∏–π', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å',
    'ceo', 'cto', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–≥–ª–∞–≤–∞', '–æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç'
]

def calculate_contact_priority(contact: Dict[str, Any], business_context: Dict[str, Any] = None) -> Dict[str, Any]:
    """üéØ –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    score = 0.5  # –ë–∞–∑–æ–≤—ã–π —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    reasons = []
    
    # 1. –ê–Ω–∞–ª–∏–∑ –ø–æ –≥–æ—Ä–æ–¥—É/—Ä–µ–≥–∏–æ–Ω—É
    city = contact.get('city') or ''
    if city and isinstance(city, str):
        city_lower = city.lower()
        if any(region.lower() in city_lower for region in PRIORITY_REGIONS):
            score += 0.15
            reasons.append(f"–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: {city}")
    
    # 2. –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    position = contact.get('position') or ''
    if position and isinstance(position, str):
        position_lower = position.lower()
        if any(pos in position_lower for pos in PRIORITY_POSITIONS):
            score += 0.2
            reasons.append(f"–≤–∞–∂–Ω–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å: {position}")
    
    # 3. –ê–Ω–∞–ª–∏–∑ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    organization = contact.get('organization') or ''
    if organization and isinstance(organization, str):
        org_lower = organization.lower()
        if any(ind in org_lower for ind in PRIORITY_INDUSTRIES):
            score += 0.15
            reasons.append(f"–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å: {organization}")
    
    # 4. –ê–Ω–∞–ª–∏–∑ –ø–æ –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if business_context and isinstance(business_context, dict):
        # 4.1 –°—Ä–æ—á–Ω–æ—Å—Ç—å
        urgency = business_context.get('urgency') or ''
        if urgency and isinstance(urgency, str):
            urgency_lower = urgency.lower()
            if '–≤—ã—Å–æ–∫' in urgency_lower:
                score += 0.1
                reasons.append(f"–≤—ã—Å–æ–∫–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å")
        
        # 4.2 –ò–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–¥—É–∫—Ç—É
        product_interest = business_context.get('product_interest') or ''
        if product_interest and isinstance(product_interest, str):
            product_lower = product_interest.lower()
            if '–∞–º–ø–ª–∏—Ñ–∏–∫–∞—Ç–æ—Ä' in product_lower:
                score += 0.2
                reasons.append(f"–∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫–ª—é—á–µ–≤–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É")
    
    # 5. –ù–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if contact.get('email'):
        score += 0.05
        if contact.get('phone'):
            score += 0.05
            reasons.append("–ø–æ–ª–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    # 6. –£—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è confidence
    confidence = contact.get('confidence', 0)
    if confidence > 0.9:
        score += 0.05
        reasons.append("–≤—ã—Å–æ–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
    elif confidence < 0.7:
        score -= 0.1
        reasons.append("–Ω–∏–∑–∫–∞—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º score –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [0, 1]
    score = max(0, min(1, score))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    if score >= 0.8:
        level = "–≤—ã—Å–æ–∫–∏–π"
    elif score >= 0.6:
        level = "—Å—Ä–µ–¥–Ω–∏–π"
    else:
        level = "–Ω–∏–∑–∫–∏–π"
    
    return {
        "score": score,
        "level": level,
        "reasons": reasons
    }
