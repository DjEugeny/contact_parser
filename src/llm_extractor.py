#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ LLM —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å JSON Schema –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
"""

import json
import re
import time
import requests
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime

from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class ContactExtractor:
    """üî• –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å LLM –∏ JSON Schema –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π + Fallback —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self, test_mode=False, config_path=None):
        self.test_mode = test_mode
        self.config_path = config_path or Path(__file__).parent.parent / "config" / "providers.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self.provider_config = self._load_provider_config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.providers = self._initialize_providers()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.current_provider = self._get_first_active_provider()
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ fallback
        self.max_fallback_attempts = 2
        
        # –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
        current_file = Path(__file__)
        project_root = current_file.parent.parent  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç src –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
        self.prompts_dir = project_root / "prompts"
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
             'total_requests': 0,
             'successful_requests': 0,
             'failed_requests': 0,
             'retry_attempts': 0,
             'json_validation_errors': 0,
             'fallback_switches': 0,
             'provider_failures': {
                 'openrouter': 0,
                 'groq': 0,
                 'replicate': 0
             }
         }
        
        print(f"ü§ñ ContactExtractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (test_mode={test_mode})")
        print(f"   üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config_path}")
        print(f"   üîÑ Fallback —Å–∏—Å—Ç–µ–º–∞: OpenRouter -> Groq")
        print(f"   üéØ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.providers[self.current_provider]['name']}")
    
    def _initialize_providers(self) -> dict:
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        providers = {
            'openrouter': {
                'name': 'OpenRouter',
                'api_key': os.getenv('OPENROUTER_API_KEY', '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'),
                'model': "qwen/qwen3-235b-a22b:free",
                'base_url': "https://openrouter.ai/api/v1/chat/completions",
                'priority': 1,
                'active': True,
                'failure_count': 0,
                'last_failure': None,
                'headers': {
                    'Authorization': f'Bearer {os.getenv("OPENROUTER_API_KEY", "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")}',
                    'Content-Type': 'application/json',
                    'HTTP-Referer': 'https://localhost:3000',
                    'X-Title': 'Contact Extractor LLM'
                }
            },
            'groq': {
                'name': 'Groq',
                'api_key': os.getenv('GROQ_API_KEY', ''),
                'model': os.getenv('GROQ_MODEL', 'llama3-8b-8192'),
                'base_url': "https://api.groq.com/openai/v1/chat/completions",
                'priority': 2,
                'active': True,
                'failure_count': 0,
                'last_failure': None,
                'headers': {
                    'Authorization': f'Bearer {os.getenv("GROQ_API_KEY", "")}',
                    'Content-Type': 'application/json'
                }
            },
            'replicate': {
                'name': 'Replicate',
                'api_key': os.getenv('REPLICATE_API_TOKEN', ''),
                'model': os.getenv('REPLICATE_MODEL', 'meta/meta-llama-3-8b-instruct'),
                'base_url': "https://api.replicate.com/v1/predictions",
                'priority': 3,
                'active': True,
                'failure_count': 0,
                'last_failure': None,
                'headers': {
                    'Authorization': f'Bearer {os.getenv("REPLICATE_API_TOKEN", "")}',
                    'Content-Type': 'application/json'
                }
            }
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if self.provider_config:
            for provider_id, provider_data in providers.items():
                if provider_id in self.provider_config:
                    config = self.provider_config[provider_id]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if 'active' in config:
                        provider_data['active'] = config['active']
                    if 'priority' in config:
                        provider_data['priority'] = config['priority']
                    if 'model' in config:
                        provider_data['model'] = config['model']
                    if 'api_key' in config and config['api_key']:
                        provider_data['api_key'] = config['api_key']
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–æ–≤—ã–º API –∫–ª—é—á–æ–º
                        provider_data['headers']['Authorization'] = f'Bearer {config["api_key"]}'
                    
                    print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_data['name']}: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        return providers
    
    def _get_first_active_provider(self) -> str:
        """üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        active_providers = [
            (pid, provider) for pid, provider in self.providers.items()
            if provider['active'] and provider['api_key']
        ]
        
        if not active_providers:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å API –∫–ª—é—á–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º openrouter")
            return 'openrouter'
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π
        active_providers.sort(key=lambda x: x[1]['priority'])
        return active_providers[0][0]
    
    def _load_provider_config(self) -> dict:
        """üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.config_path.exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_path}")
                    return config
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            return {}
    
    def _load_prompt(self, filename: str) -> str:
        """üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        
        prompt_path = self.prompts_dir / filename
        try:
            with open(prompt_path, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                return content
        except FileNotFoundError:
            print(f"‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}")
            return f"ERROR: –ü—Ä–æ–º–ø—Ç {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ {filename}: {e}")
            return f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {filename}"
    
    def _validate_json_schema(self, response_data: dict) -> bool:
        """‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON Schema –¥–ª—è –æ—Ç–≤–µ—Ç–∞ LLM"""
        
        if not isinstance(response_data, dict):
            print("‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
            return False
        
        required_fields = ['contacts', 'business_context', 'recommended_actions']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        for field in required_fields:
            if field not in response_data:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        if not isinstance(response_data['business_context'], str):
            print("‚ùå –ü–æ–ª–µ 'business_context' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return False
            
        if not isinstance(response_data['recommended_actions'], str):
            print("‚ùå –ü–æ–ª–µ 'recommended_actions' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É contacts
        if not isinstance(response_data['contacts'], list):
            print("‚ùå –ü–æ–ª–µ 'contacts' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        valid_contacts = []
        for i, contact in enumerate(response_data['contacts']):
            if not isinstance(contact, dict):
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {i} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_required = ['name', 'email', 'phone', 'organization', 'confidence']
            
            for field in contact_required:
                if field not in contact:
                    print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    contact[field] = '' if field != 'confidence' else 0.0
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            if self._validate_contact_fields(contact, i):
                valid_contacts.append(contact)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º–∏
        response_data['contacts'] = valid_contacts
        
        # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        # (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã)
        return True

    def _validate_contact_fields(self, contact: dict, index: int) -> bool:
        """üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        email = contact.get('email', '')
        if email and not self._is_valid_email(email):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email '{email}'")
            contact['email'] = ''  # –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = contact.get('phone', '')
        if phone and not self._is_valid_phone(phone):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω '{phone}'")
            contact['phone'] = ''  # –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è confidence
        confidence = contact.get('confidence', 0)
        if not isinstance(confidence, (int, float)):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: confidence –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω {type(confidence)}")
            contact['confidence'] = 0.0
        elif confidence < 0 or confidence > 1:
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: confidence –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1, –ø–æ–ª—É—á–µ–Ω {confidence}")
            contact['confidence'] = max(0, min(1, float(confidence)))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
        string_fields = ['name', 'organization', 'position', 'city']
        for field in string_fields:
            if field in contact and not isinstance(contact[field], str):
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: –ø–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                contact[field] = str(contact[field]) if contact[field] is not None else ''
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∏–º—è –∏–ª–∏ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        has_name = contact.get('name', '').strip()
        has_email = contact.get('email', '').strip()
        has_phone = contact.get('phone', '').strip()
        
        if not (has_name or has_email or has_phone):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω)")
            return False
        
        return True
    
    def _is_valid_email(self, email: str) -> bool:
        """üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email"""
        import re
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return bool(re.match(pattern, email.strip()))
    
    def _is_valid_phone(self, phone: str) -> bool:
        """üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        import re
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
        cleaned = re.sub(r'[^\d+]', '', phone.strip())
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ + –≤ –Ω–∞—á–∞–ª–µ
        # –ú–∏–Ω–∏–º—É–º 7 —Ü–∏—Ñ—Ä, –º–∞–∫—Å–∏–º—É–º 15 (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
        if cleaned.startswith('+'):
            digits = cleaned[1:]
        else:
            digits = cleaned
        
        return len(digits) >= 7 and len(digits) <= 15 and digits.isdigit()

    def _make_llm_request_with_retries(self, prompt: str, text: str, max_retries: int = 3) -> dict:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        for attempt in range(max_retries):
            try:
                self.stats['total_requests'] += 1
                if attempt > 0:
                    self.stats['retry_attempts'] += 1
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                    time.sleep(2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = self._make_llm_request(prompt, text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é JSON Schema
                if self._validate_json_schema(result):
                    self.stats['successful_requests'] += 1
                    return result
                else:
                    self.stats['json_validation_errors'] += 1
                    print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: JSON Schema –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                    
                    if attempt == max_retries - 1:
                        print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π")
                        self.stats['failed_requests'] += 1
                        return {
                            'contacts': [],
                            'business_context': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON Schema',
                            'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ LLM',
                            'error': 'JSON Schema validation failed after retries'
                        }
            
            except Exception as e:
                error_msg = str(e)
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {e}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ rate limit —Å exponential backoff
                if "Rate limit (HTTP 429)" in error_msg:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                    import re
                    wait_match = re.search(r'–æ–∂–∏–¥–∞–Ω–∏–µ (\d+) —Å–µ–∫', error_msg)
                    base_wait_time = int(wait_match.group(1)) if wait_match else 60
                    
                    # Exponential backoff: –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è * 2^–ø–æ–ø—ã—Ç–∫–∞
                    exponential_wait = base_wait_time * (2 ** attempt)
                    max_wait = 300  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
                    actual_wait = min(exponential_wait, max_wait)
                    
                    print(f"‚è≥ Rate limit: exponential backoff {actual_wait} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    
                    if attempt < max_retries - 1:  # –ù–µ –∂–¥–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
                        time.sleep(actual_wait)
                        self.stats['retry_attempts'] += 1
                        continue
                
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if self._switch_to_next_provider():
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º")
                    continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
                
                if attempt == max_retries - 1:
                    self.stats['failed_requests'] += 1
                    return {
                        'contacts': [],
                        'business_context': f'–û—à–∏–±–∫–∞ LLM: {str(e)}',
                        'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM –∏ API –∫–ª—é—á–∏',
                        'error': str(e)
                    }
        
        # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        self.stats['failed_requests'] += 1
        return {
            'contacts': [],
            'business_context': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            'recommended_actions': '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É',
            'error': 'Unknown error in retry logic'
        }
    
    def _make_llm_request(self, prompt: str, text: str) -> dict:
        """ü§ñ –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback"""
        
        if self.test_mode:
            return {
                'contacts': [{
                    'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–æ–Ω—Ç–∞–∫—Ç',
                    'email': 'test@example.com',
                    'phone': '+7 (999) 123-45-67',
                    'organization': '–¢–µ—Å—Ç–æ–≤–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                    'position': '–¢–µ—Å—Ç–æ–≤–∞—è –î–æ–ª–∂–Ω–æ—Å—Ç—å',
                    'city': '–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Ä–æ–¥',
                    'confidence': 0.95
                }],
                'business_context': '–¢–µ—Å—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç',
                'recommended_actions': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                'provider_used': 'Test Mode'
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        current_provider = self.providers[self.current_provider]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.current_provider == 'replicate':
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Replicate API
            payload = {
                "version": current_provider['model'],
                "input": {
                    "prompt": f"{prompt}\n\nüìß –¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}",
                    "max_tokens": 4000,
                    "temperature": 0.1
                }
            }
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è OpenRouter –∏ Groq
            messages = [
                {
                    "role": "user",
                    "content": f"{prompt}\n\nüìß –¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}"
                }
            ]
            
            payload = {
                "model": current_provider['model'],
                "messages": messages,
                "temperature": 0.1,
                "max_tokens": 4000
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {current_provider['api_key']}"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenRouter
        if self.current_provider == 'openrouter':
            headers["HTTP-Referer"] = "https://github.com/contact-parser"
            headers["X-Title"] = "Contact Parser"
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                current_provider['base_url'],
                headers=headers,
                json=payload,
                timeout=60
            )
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ rate limit (HTTP 429)
            if response.status_code == 429:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                current_provider['failure_count'] += 1
                current_provider['last_failure'] = datetime.now().isoformat()
                self.stats['provider_failures'][self.current_provider] += 1
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                retry_after = response.headers.get('Retry-After')
                if retry_after:
                    try:
                        wait_time = int(retry_after)
                        print(f"‚è≥ Rate limit –æ—Ç {current_provider['name']}: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫")
                    except ValueError:
                        wait_time = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
                else:
                    wait_time = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
                
                raise Exception(f"Rate limit (HTTP 429): —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫. {response.text}")
            
            if response.status_code != 200:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                current_provider['failure_count'] += 1
                current_provider['last_failure'] = datetime.now().isoformat()
                self.stats['provider_failures'][self.current_provider] += 1
                
                raise Exception(f"HTTP {response.status_code}: {response.text}")
            
            response_data = response.json()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if self.current_provider == 'replicate':
                # –î–ª—è Replicate API –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if 'status' in response_data:
                    if response_data['status'] == 'failed':
                        raise Exception(f"Replicate prediction failed: {response_data.get('error', 'Unknown error')}")
                    elif response_data['status'] == 'processing':
                        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∂–¥–µ–º
                        prediction_id = response_data.get('id')
                        content = self._wait_for_replicate_result(prediction_id, current_provider)
                    elif response_data['status'] == 'succeeded':
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ output
                        output = response_data.get('output', [])
                        if isinstance(output, list) and output:
                            content = ''.join(output)
                        elif isinstance(output, str):
                            content = output
                        else:
                            raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate")
                    else:
                        raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å Replicate: {response_data['status']}")
                else:
                    raise Exception("–û—Ç–≤–µ—Ç –æ—Ç Replicate –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö API
                if 'choices' not in response_data or not response_data['choices']:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    current_provider['failure_count'] += 1
                    current_provider['last_failure'] = datetime.now().isoformat()
                    self.stats['provider_failures'][self.current_provider] += 1
                    
                    raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
                
                content = response_data['choices'][0]['message']['content']
            
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            result = self._parse_llm_response(content)
            result['provider_used'] = current_provider['name']
            
            return result
            
        except Exception as e:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            current_provider['failure_count'] += 1
            current_provider['last_failure'] = datetime.now().isoformat()
            self.stats['provider_failures'][self.current_provider] += 1
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {current_provider['name']}: {e}")
            raise e
    
    def _wait_for_replicate_result(self, prediction_id: str, provider_config: dict, max_wait: int = 300) -> str:
        """‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Replicate API"""
        import time
        
        if not prediction_id:
            raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç Replicate")
        
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        status_url = f"https://api.replicate.com/v1/predictions/{prediction_id}"
        headers = {
            "Authorization": f"Bearer {provider_config['api_key']}",
            "Content-Type": "application/json"
        }
        
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            try:
                response = requests.get(status_url, headers=headers, timeout=30)
                
                if response.status_code != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ Replicate: HTTP {response.status_code}")
                
                data = response.json()
                status = data.get('status')
                
                if status == 'succeeded':
                    output = data.get('output', [])
                    if isinstance(output, list) and output:
                        return ''.join(output)
                    elif isinstance(output, str):
                        return output
                    else:
                        raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Replicate")
                
                elif status == 'failed':
                    error_msg = data.get('error', 'Unknown error')
                    raise Exception(f"Replicate prediction failed: {error_msg}")
                
                elif status in ['starting', 'processing']:
                    print(f"‚è≥ Replicate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å... (—Å—Ç–∞—Ç—É—Å: {status})")
                    time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    continue
                
                else:
                    raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å Replicate: {status}")
                    
            except requests.RequestException as e:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Replicate: {e}")
        
        raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Replicate ({max_wait} —Å–µ–∫)")
    
    def _parse_llm_response(self, response_text: str) -> dict:
        """üìù –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM"""
        
        try:
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                result = json.loads(json_str)
                return result
            else:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ LLM")
        
        except json.JSONDecodeError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
    
    def _process_large_text(self, text: str, prompt: str, metadata: dict = None) -> dict:
        """üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ —á–∞—Å—Ç–∏"""
        
        chunk_size = 10000  # –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏
        overlap = 1000      # –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        chunks = []
        start = 0
        
        while start < len(text):
            end = min(start + chunk_size, len(text))
            chunk = text[start:end]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏
            chunk_info = f"\n\n[–ß–ê–°–¢–¨ {len(chunks) + 1} –ò–ó –ë–û–õ–¨–®–û–ì–û –ü–ò–°–¨–ú–ê, –°–ò–ú–í–û–õ–´ {start}-{end}]\n"
            chunk = chunk_info + chunk
            
            chunks.append(chunk)
            
            # –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
            start = end - overlap
            if start >= len(text):
                break
        
        print(f"   üìä –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —á–∞—Å—Ç–µ–π –ø–æ ~{chunk_size} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        all_contacts = []
        all_contexts = []
        all_actions = []
        
        for i, chunk in enumerate(chunks):
            print(f"   üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ {i + 1}/{len(chunks)}")
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å
                chunk_result = self._make_llm_request_with_retries(prompt, chunk)
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if 'contacts' in chunk_result and chunk_result['contacts']:
                    all_contacts.extend(chunk_result['contacts'])
                
                if 'business_context' in chunk_result:
                    all_contexts.append(f"–ß–∞—Å—Ç—å {i + 1}: {chunk_result['business_context']}")
                
                if 'recommended_actions' in chunk_result:
                    all_actions.append(f"–ß–∞—Å—Ç—å {i + 1}: {chunk_result['recommended_actions']}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i < len(chunks) - 1:
                    time.sleep(2)
            
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ {i + 1}: {e}")
                all_contexts.append(f"–ß–∞—Å—Ç—å {i + 1}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        unique_contacts = self._deduplicate_contacts(all_contacts)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            'contacts': unique_contacts,
            'business_context': ' | '.join(all_contexts) if all_contexts else '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω',
            'recommended_actions': ' | '.join(all_actions) if all_actions else '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã',
            'provider_used': f"{self.providers[self.current_provider]['name']} ({self.providers[self.current_provider]['model']}) - {len(chunks)} —á–∞—Å—Ç–µ–π",
            'processing_time': datetime.now().isoformat(),
            'text_length': len(text),
            'chunks_processed': len(chunks),
            'total_contacts_found': len(all_contacts),
            'unique_contacts_found': len(unique_contacts)
        }
        
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(unique_contacts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–∑ {len(all_contacts)} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö")
        
        return result
    
    def _deduplicate_contacts(self, contacts: List[dict]) -> List[dict]:
        """üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        
        if not contacts:
            return []
        
        unique_contacts = []
        seen_emails = set()
        seen_phones = set()
        
        for contact in contacts:
            email = contact.get('email', '').lower().strip()
            phone = contact.get('phone', '').strip()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã)
            normalized_phone = re.sub(r'[\s\-\(\)\+]', '', phone)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            is_duplicate = False
            
            if email and email in seen_emails:
                is_duplicate = True
            
            if normalized_phone and len(normalized_phone) > 6 and normalized_phone in seen_phones:
                is_duplicate = True
            
            if not is_duplicate:
                unique_contacts.append(contact)
                if email:
                    seen_emails.add(email)
                if normalized_phone and len(normalized_phone) > 6:
                    seen_phones.add(normalized_phone)
        
        return unique_contacts
    
    def extract_contacts(self, text: str, metadata: dict = None) -> dict:
        """üë§ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π test_mode
        original_test_mode = self.test_mode
        
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (test_mode={self.test_mode})")
            print(f"   üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if metadata:
                print(f"   üìß –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º
            if metadata and not self.test_mode:
                self.test_mode = False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self._load_prompt("contact_extraction.txt")
            
            if prompt.startswith("ERROR:"):
                return {
                    'contacts': [],
                    'business_context': prompt,
                    'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–∞',
                    'error': 'Prompt loading failed'
                }
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ —á–∞—Å—Ç–∏
            if len(text) > 12000:
                print(f"   üìÑ –ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏")
                return self._process_large_text(text, prompt, metadata)
            else:
                print(f"   üìù –û–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_info = f"{self.providers[self.current_provider]['name']} ({self.providers[self.current_provider]['model']})"
            
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if self.test_mode and not metadata:
                print("   üß™ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
                result = {
                    'contacts': [{
                        'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–æ–Ω—Ç–∞–∫—Ç',
                        'email': 'test@example.com',
                        'phone': '+7 (999) 123-45-67',
                        'organization': '–¢–µ—Å—Ç–æ–≤–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                        'position': '–¢–µ—Å—Ç–æ–≤–∞—è –î–æ–ª–∂–Ω–æ—Å—Ç—å',
                        'city': '–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Ä–æ–¥',
                        'confidence': 0.95
                    }],
                    'business_context': '–¢–µ—Å—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç',
                    'recommended_actions': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                    'provider_used': 'Test Mode'
                }
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π test_mode
                self.test_mode = original_test_mode
                return result
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            result = self._make_llm_request_with_retries(prompt, text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            result['provider_used'] = provider_info
            result['processing_time'] = datetime.now().isoformat()
            result['text_length'] = len(text)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            contacts_count = len(result.get('contacts', []))
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_count}")
            print(f"   ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_info}")
            
            return result
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return {
                'contacts': [],
                'business_context': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}',
                'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å',
                'error': str(e),
                'provider_used': 'Error'
            }
        
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π test_mode
            self.test_mode = original_test_mode
    
    def get_stats(self) -> dict:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        return self.stats.copy()
    
    def reset_stats(self):
        """üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'retry_attempts': 0,
            'json_validation_errors': 0,
            'fallback_switches': 0,
            'provider_failures': {
                'openrouter': 0,
                'groq': 0
            }
        }
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def get_provider_health(self) -> dict:
        """üè• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        health_status = {
            'current_provider': self.current_provider,
            'system_health': 'healthy',
            'providers': {},
            'recommendations': []
        }
        
        for provider_id, provider in self.providers.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            has_api_key = bool(provider['api_key'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if not provider['active']:
                status = 'disabled'
            elif not has_api_key:
                status = 'no_api_key'
            elif provider['failure_count'] > 3:
                status = 'unhealthy'
            elif provider['failure_count'] > 0:
                status = 'degraded'
            else:
                status = 'healthy'
            
            health_status['providers'][provider_id] = {
                'name': provider['name'],
                'status': status,
                'active': provider['active'],
                'has_api_key': has_api_key,
                'failure_count': provider['failure_count'],
                'last_failure': provider['last_failure'],
                'priority': provider['priority']
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if not has_api_key:
                health_status['recommendations'].append(f"–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á –¥–ª—è {provider['name']}")
            elif status == 'unhealthy':
                health_status['recommendations'].append(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {provider['name']} - –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        active_providers = [p for p in self.providers.values() if p['active'] and p['api_key']]
        if not active_providers:
            health_status['system_health'] = 'critical'
            health_status['recommendations'].append('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å API –∫–ª—é—á–∞–º–∏')
        elif len(active_providers) == 1:
            health_status['system_health'] = 'warning'
            health_status['recommendations'].append('–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä - –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ')
        
        return health_status
    
    def _switch_to_next_provider(self) -> bool:
        """üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        active_providers = [
            (pid, provider) for pid, provider in self.providers.items()
            if provider['active'] and provider['api_key']
        ]
        active_providers.sort(key=lambda x: x[1]['priority'])
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
        current_index = -1
        for i, (pid, _) in enumerate(active_providers):
            if pid == self.current_provider:
                current_index = i
                break
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if current_index >= 0 and current_index + 1 < len(active_providers):
            next_provider_id = active_providers[current_index + 1][0]
            old_provider = self.current_provider
            self.current_provider = next_provider_id
            self.stats['fallback_switches'] += 1
            
            print(f"üîÑ Fallback: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å {self.providers[old_provider]['name']} –Ω–∞ {self.providers[next_provider_id]['name']}")
            return True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –æ–Ω –Ω–µ —Ç–µ–∫—É—â–∏–π)
        if active_providers and active_providers[0][0] != self.current_provider:
            next_provider_id = active_providers[0][0]
            old_provider = self.current_provider
            self.current_provider = next_provider_id
            self.stats['fallback_switches'] += 1
            
            print(f"üîÑ Fallback: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å {self.providers[old_provider]['name']} –Ω–∞ {self.providers[next_provider_id]['name']}")
            return True
        
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è fallback")
        return False
    
    def simulate_provider_failure(self, provider_id: str) -> dict:
        """üß™ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback"""
        if provider_id not in self.providers:
            return {
                'success': False,
                'error': f'–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        self.providers[provider_id]['active'] = False
        self.providers[provider_id]['failure_count'] += 1
        self.providers[provider_id]['last_failure'] = datetime.now().isoformat()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        if self.current_provider == provider_id:
            self._switch_to_next_provider()
        
        return {
            'success': True,
            'message': f'–ü—Ä–æ–≤–∞–π–¥–µ—Ä {self.providers[provider_id]["name"]} –æ—Ç–∫–ª—é—á–µ–Ω',
            'current_provider': self.current_provider,
            'fallback_occurred': True
        }
    
    def reset_system_state(self) -> dict:
        """üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è fallback —Å–∏—Å—Ç–µ–º—ã"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        for provider in self.providers.values():
            provider['active'] = True
            provider['failure_count'] = 0
            provider['last_failure'] = None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
        self.current_provider = 'openrouter'
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É fallback
        self.stats['fallback_switches'] = 0
        self.stats['provider_failures'] = {
            'openrouter': 0,
            'groq': 0
        }
        
        return {
            'success': True,
            'message': '–°–æ—Å—Ç–æ—è–Ω–∏–µ fallback —Å–∏—Å—Ç–µ–º—ã —Å–±—Ä–æ—à–µ–Ω–æ',
            'current_provider': self.current_provider,
            'active_providers': [pid for pid, p in self.providers.items() if p['active']]
        }


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    extractor = ContactExtractor(test_mode=True)
    
    test_text = "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç test@example.com"
    result = extractor.extract_contacts(test_text)
    
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(json.dumps(result, ensure_ascii=False, indent=2))
    
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(json.dumps(extractor.get_stats(), ensure_ascii=False, indent=2))