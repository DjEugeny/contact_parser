#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ LLM —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å JSON Schema –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
"""

import json
import re
import time
import requests
from pathlib import Path
from typing import Dict, List, Optional, Any
from datetime import datetime
import asyncio
import concurrent.futures
from functools import partial

from dotenv import load_dotenv
import os

# –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ç–æ–∫–µ–Ω-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ chunking
try:
    import tiktoken
except ImportError:
    tiktoken = None
    print("‚ö†Ô∏è tiktoken –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–º–≤–æ–ª—å–Ω—ã–π chunking")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class ContactExtractor:
    """üî• –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å LLM –∏ JSON Schema –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π + Fallback —Å–∏—Å—Ç–µ–º–∞"""
    
    def __init__(self, test_mode=False, config_path=None):
        self.test_mode = test_mode
        self.config_path = config_path or Path(__file__).parent.parent / "config" / "providers.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self.provider_config = self._load_provider_config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.providers = self._initialize_providers()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.current_provider = self._get_first_active_provider()
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ fallback
        self.max_fallback_attempts = 2
        
        # –ü–∞–ø–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏
        current_file = Path(__file__)
        project_root = current_file.parent.parent  # –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç src –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
        self.prompts_dir = project_root / "prompts"
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
             'total_requests': 0,
             'successful_requests': 0,
             'failed_requests': 0,
             'retry_attempts': 0,
             'json_validation_errors': 0,
             'fallback_switches': 0,
             'provider_failures': {
                 'openrouter': 0,
                 'groq': 0,
                 'replicate': 0
             }
         }
        
        print(f"ü§ñ ContactExtractor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (test_mode={test_mode})")
        print(f"   üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {self.config_path}")
        print(f"   üîÑ Fallback —Å–∏—Å—Ç–µ–º–∞: OpenRouter -> Groq")
        print(f"   üéØ –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.providers[self.current_provider]['name']}")
    
    def _initialize_providers(self) -> dict:
        """üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        providers = {
            'openrouter': {
                'name': 'OpenRouter',
                'api_key': os.getenv('OPENROUTER_API_KEY'),
                'model': os.getenv('OPENROUTER_MODEL'),
                'base_url': os.getenv('OPENROUTER_BASE_URL', "https://openrouter.ai/api/v1/chat/completions"),
                'priority': 3,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                'active': True,
                'failure_count': 0,
                'last_failure': None,
                'headers': {
                    'Authorization': f'Bearer {os.getenv("OPENROUTER_API_KEY")}',
                    'Content-Type': 'application/json',
                    'HTTP-Referer': 'https://localhost:3000',
                    'X-Title': 'Contact Extractor LLM'
                }
            },
            'groq': {
                'name': 'Groq',
                'api_key': os.getenv('GROQ_API_KEY'),
                'model': os.getenv('GROQ_MODEL'),
                'base_url': os.getenv('GROQ_BASE_URL', "https://api.groq.com/openai/v1/chat/completions"),
                'priority': 2,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                'active': True,
                'failure_count': 0,
                'last_failure': None,
                'headers': {
                    'Authorization': f'Bearer {os.getenv("GROQ_API_KEY")}',
                    'Content-Type': 'application/json'
                }
            },
            'replicate': {
                'name': 'Replicate',
                'api_key': os.getenv('REPLICATE_API_KEY'),
                'model': os.getenv('REPLICATE_MODEL'),
                'base_url': "https://api.replicate.com/v1/predictions",
                'priority': 1,  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                'active': True,
                'failure_count': 0,
                'last_failure': None,
                'headers': {
                    'Authorization': f'Bearer {os.getenv("REPLICATE_API_KEY")}',
                    'Content-Type': 'application/json'
                }
            }
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ providers.json
        if self.provider_config and 'provider_settings' in self.provider_config:
            for provider_id, provider_data in providers.items():
                if provider_id in self.provider_config['provider_settings']:
                    config = self.provider_config['provider_settings'][provider_id]
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    if 'enabled' in config:
                        provider_data['active'] = config['enabled']
                    if 'priority' in config:
                        provider_data['priority'] = config['priority']
                    
                    print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_data['name']}: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        return providers
    
    def _get_first_active_provider(self) -> str:
        """üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        active_providers = [
            (pid, provider) for pid, provider in self.providers.items()
            if provider['active'] and provider['api_key']
        ]
        
        if not active_providers:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å API –∫–ª—é—á–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º openrouter")
            return 'openrouter'
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π
        active_providers.sort(key=lambda x: x[1]['priority'])
        return active_providers[0][0]
    
    def _load_provider_config(self) -> dict:
        """üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.config_path.exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_path}")
                    return config
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.config_path}")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {e}")
            return {}
    
    def _load_prompt(self, filename: str) -> str:
        """üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        
        prompt_path = self.prompts_dir / filename
        try:
            with open(prompt_path, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                return content
        except FileNotFoundError:
            print(f"‚ùå –ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {prompt_path}")
            return f"ERROR: –ü—Ä–æ–º–ø—Ç {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ {filename}: {e}")
            return f"ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {filename}"
    
    def _validate_json_schema(self, response_data: dict) -> bool:
        """‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON Schema –¥–ª—è –æ—Ç–≤–µ—Ç–∞ LLM"""
        
        if not isinstance(response_data, dict):
            print("‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º")
            return False
        
        required_fields = ['contacts', 'business_context', 'recommended_actions']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        for field in required_fields:
            if field not in response_data:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        if not isinstance(response_data['business_context'], str):
            print("‚ùå –ü–æ–ª–µ 'business_context' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return False
            
        if not isinstance(response_data['recommended_actions'], str):
            print("‚ùå –ü–æ–ª–µ 'recommended_actions' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É contacts
        if not isinstance(response_data['contacts'], list):
            print("‚ùå –ü–æ–ª–µ 'contacts' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        valid_contacts = []
        for i, contact in enumerate(response_data['contacts']):
            if not isinstance(contact, dict):
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {i} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
            contact_required = ['name', 'email', 'phone', 'organization', 'confidence']
            
            for field in contact_required:
                if field not in contact:
                    print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {i}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    contact[field] = '' if field != 'confidence' else 0.0
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
            if self._validate_contact_fields(contact, i):
                valid_contacts.append(contact)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º–∏
        response_data['contacts'] = valid_contacts
        
        # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        # (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –±—ã–ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã)
        return True

    def _validate_contact_fields(self, contact: dict, index: int) -> bool:
        """üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        email = contact.get('email', '')
        if email and not self._is_valid_email(email):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email '{email}'")
            contact['email'] = ''  # –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone = contact.get('phone', '')
        if phone and not self._is_valid_phone(phone):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω '{phone}'")
            contact['phone'] = ''  # –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è confidence
        confidence = contact.get('confidence', 0)
        if not isinstance(confidence, (int, float)):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: confidence –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω {type(confidence)}")
            contact['confidence'] = 0.0
        elif confidence < 0 or confidence > 1:
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: confidence –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 1, –ø–æ–ª—É—á–µ–Ω {confidence}")
            contact['confidence'] = max(0, min(1, float(confidence)))
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–ª–µ–π
        string_fields = ['name', 'organization', 'position', 'city']
        for field in string_fields:
            if field in contact and not isinstance(contact[field], str):
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: –ø–æ–ª–µ '{field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                contact[field] = str(contact[field]) if contact[field] is not None else ''
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –∏–º—è –∏–ª–∏ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
        has_name = contact.get('name', '').strip()
        has_email = contact.get('email', '').strip()
        has_phone = contact.get('phone', '').strip()
        
        if not (has_name or has_email or has_phone):
            print(f"‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç {index}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–º—è, email, —Ç–µ–ª–µ—Ñ–æ–Ω)")
            return False
        
        return True
    
    def _is_valid_email(self, email: str) -> bool:
        """üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email"""
        import re
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return bool(re.match(pattern, email.strip()))
    
    def _is_valid_phone(self, phone: str) -> bool:
        """üìû –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        import re
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ +
        cleaned = re.sub(r'[^\d+]', '', phone.strip())
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ + –≤ –Ω–∞—á–∞–ª–µ
        # –ú–∏–Ω–∏–º—É–º 7 —Ü–∏—Ñ—Ä, –º–∞–∫—Å–∏–º—É–º 15 (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
        if cleaned.startswith('+'):
            digits = cleaned[1:]
        else:
            digits = cleaned
        
        return len(digits) >= 7 and len(digits) <= 15 and digits.isdigit()

    def _load_chunking_config(self) -> dict:
        """üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ chunking –∏–∑ processing_config.json"""
        try:
            config_path = Path(__file__).parent.parent / "config" / "processing_config.json"
            if config_path.exists():
                with open(config_path, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    return config.get('chunking', {})
            else:
                print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
                return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ chunking: {e}")
            return {}
    
    def _create_text_chunks(self, text: str, config: dict) -> List[str]:
        """‚úÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞ —Å —Ç–æ–∫–µ–Ω-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–ª–∏ —Å–∏–º–≤–æ–ª—å–Ω—ã–º chunking"""
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            'use_token_based': True,
            'max_tokens_per_chunk': 3000,
            'overlap_tokens': 300,
            'max_chunks_per_text': 20,
            'encoding_model': 'cl100k_base',
            'auto_adjust_chunk_size': True,
            'min_chunk_size': 1000,
            'max_chunk_size': 6000
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        chunking_config = {**default_config, **config}
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ chunking
        if tiktoken and chunking_config.get('use_token_based', True):
            return self._create_token_based_chunks(text, chunking_config)
        else:
            return self._create_character_based_chunks(text, chunking_config)
    
    def _create_token_based_chunks(self, text: str, config: dict) -> List[str]:
        """üéØ –¢–æ–∫–µ–Ω-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∏—Å–ª–∞ —á–∞–Ω–∫–æ–≤"""
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–Ω–∫–æ–¥–µ—Ä
            encoding = tiktoken.get_encoding(config.get('encoding_model', 'cl100k_base'))
            
            # –ö–æ–¥–∏—Ä—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç
            tokens = encoding.encode(text)
            total_tokens = len(tokens)
            
            print(f"   üéØ –¢–æ–∫–µ–Ω-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: {total_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã chunking
            max_tokens = config.get('max_tokens_per_chunk', 3000)
            overlap_tokens = config.get('overlap_tokens', 300)
            max_chunks = config.get('max_chunks_per_text', 20)
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∏—Å–ª–∞ —á–∞–Ω–∫–æ–≤
            chunk_alert_threshold = config.get('chunk_alert_threshold', 20)
            chunk_abort_threshold = config.get('chunk_abort_threshold', 50)
            allow_chunk_abort = config.get('allow_chunk_abort', True)
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞–Ω–∫–æ–≤
            estimated_chunks = max(1, total_tokens // (max_tokens - overlap_tokens))
            
            print(f"   üìä –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: ~{estimated_chunks} —á–∞–Ω–∫–æ–≤")
            
            # Alert –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞
            if estimated_chunks > chunk_alert_threshold:
                print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û–∂–∏–¥–∞–µ—Ç—Å—è {estimated_chunks} —á–∞–Ω–∫–æ–≤ (>{chunk_alert_threshold})")
                print(f"   üìà –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –≤—ã—Å–æ–∫–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é API —Ç–æ–∫–µ–Ω–æ–≤")
            
            # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏
            if allow_chunk_abort and estimated_chunks > chunk_abort_threshold:
                print(f"   üö´ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–í–´–®–ï–ù–ò–ï: {estimated_chunks} —á–∞–Ω–∫–æ–≤ (>{chunk_abort_threshold})")
                print(f"   ‚õî –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —á—Ä–µ–∑–º–µ—Ä–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è API")
                print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É–≤–µ–ª–∏—á—å—Ç–µ max_tokens_per_chunk –∏–ª–∏ —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ –∫–∞–∫ fallback
                fallback_chunks = min(5, chunk_abort_threshold // 2)
                print(f"   üîÑ Fallback: —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ {fallback_chunks} —á–∞–Ω–∫–æ–≤")
                max_chunks = fallback_chunks
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ chunk –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
            if config.get('auto_adjust_chunk_size', True) and total_tokens > max_tokens * max_chunks:
                adjusted_max_tokens = min(
                    config.get('max_chunk_size', 6000),
                    total_tokens // max_chunks + overlap_tokens
                )
                if adjusted_max_tokens > max_tokens:
                    max_tokens = adjusted_max_tokens
                    print(f"   üìà –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: —É–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä chunk –¥–æ {max_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            
            chunks = []
            start_token = 0
            smart_boundary_detection = config.get('smart_boundary_detection', True)
            
            while start_token < total_tokens and len(chunks) < max_chunks:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ chunk
                end_token = min(start_token + max_tokens, total_tokens)
                
                # –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è
                if smart_boundary_detection and end_token < total_tokens:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
                    boundary_start = max(0, end_token - 100)
                    boundary_end = min(total_tokens, end_token + 100)
                    boundary_text = encoding.decode(tokens[boundary_start:boundary_end])
                    
                    # –ò—â–µ–º –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
                    boundary_patterns = [
                        r'\n\n',  # –î–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (–Ω–æ–≤—ã–π –∞–±–∑–∞—Ü)
                        r'\n[A-Z–ê-–Ø]',  # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
                        r'\. [A-Z–ê-–Ø]',  # –ö–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è + –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ
                        r'\n',  # –û–±—ã—á–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                        r'[.!?] ',  # –ö–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                        r', ',  # –ó–∞–ø—è—Ç–∞—è
                    ]
                    
                    best_boundary = None
                    relative_pos = end_token - boundary_start
                    
                    for pattern in boundary_patterns:
                        matches = list(re.finditer(pattern, boundary_text))
                        if matches:
                            # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫ –Ω–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏
                            closest_match = min(matches, key=lambda m: abs(m.start() - relative_pos))
                            if abs(closest_match.start() - relative_pos) <= 50:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 50 —Å–∏–º–≤–æ–ª–æ–≤
                                best_boundary = boundary_start + closest_match.end()
                                break
                    
                    if best_boundary and boundary_start <= best_boundary <= boundary_end:
                        end_token = best_boundary
                        print(f"   üéØ –£–º–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Ç–æ–∫–µ–Ω–µ {end_token}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ chunk
                chunk_tokens = tokens[start_token:end_token]
                
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç
                chunk_text = encoding.decode(chunk_tokens)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏
                chunk_info = f"\n\n[–ß–ê–°–¢–¨ {len(chunks) + 1} –ò–ó –ë–û–õ–¨–®–û–ì–û –ü–ò–°–¨–ú–ê, –¢–û–ö–ï–ù–´ {start_token}-{end_token}]\n"
                chunk_with_info = chunk_info + chunk_text
                
                chunks.append(chunk_with_info)
                
                # –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
                start_token = end_token - overlap_tokens
                if start_token >= total_tokens:
                    break
            
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞—Å—Ç–µ–π (—Ç–æ–∫–µ–Ω-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)")
            return chunks
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ chunking: {e}")
            print("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–º–≤–æ–ª—å–Ω—ã–π chunking")
            return self._create_character_based_chunks(text, config)
    
    def _create_character_based_chunks(self, text: str, config: dict) -> List[str]:
        """üìù –°–∏–º–≤–æ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ (fallback –º–µ—Ç–æ–¥)"""
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.current_provider == 'replicate':
            base_chunk_size = 6000
            base_overlap = 600
        else:
            base_chunk_size = 4000
            base_overlap = 400
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        chunk_size = config.get('max_chunk_size', base_chunk_size)
        overlap = min(config.get('overlap_tokens', base_overlap), chunk_size // 10)
        max_chunks = config.get('max_chunks_per_text', 20)
        
        print(f"   üìù –°–∏–º–≤–æ–ª—å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤, chunk_size={chunk_size}")
        
        chunks = []
        start = 0
        
        while start < len(text) and len(chunks) < max_chunks:
            end = min(start + chunk_size, len(text))
            chunk = text[start:end]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–∏
            chunk_info = f"\n\n[–ß–ê–°–¢–¨ {len(chunks) + 1} –ò–ó –ë–û–õ–¨–®–û–ì–û –ü–ò–°–¨–ú–ê, –°–ò–ú–í–û–õ–´ {start}-{end}]\n"
            chunk_with_info = chunk_info + chunk
            
            chunks.append(chunk_with_info)
            
            # –°–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ–º
            start = end - overlap
            if start >= len(text):
                break
        
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞—Å—Ç–µ–π (—Å–∏–º–≤–æ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)")
        return chunks

    def _make_llm_request_with_retries(self, prompt: str, text: str, max_retries: int = 3) -> dict:
        """üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if self.test_mode:
            return {
                'contacts': [{
                    'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–æ–Ω—Ç–∞–∫—Ç',
                    'email': 'test@example.com',
                    'phone': '+7 (999) 123-45-67',
                    'organization': '–¢–µ—Å—Ç–æ–≤–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                    'position': '–¢–µ—Å—Ç–æ–≤–∞—è –î–æ–ª–∂–Ω–æ—Å—Ç—å',
                    'city': '–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Ä–æ–¥',
                    'confidence': 0.95
                }],
                'business_context': '–¢–µ—Å—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç',
                'recommended_actions': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                'provider_used': 'Test Mode'
            }
        
        for attempt in range(max_retries):
            try:
                self.stats['total_requests'] += 1
                if attempt > 0:
                    self.stats['retry_attempts'] += 1
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                    
                    # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è Replicate
                    if self.current_provider == 'replicate':
                        delay = min(5 * (2 ** attempt), 60)  # –û—Ç 10 –¥–æ 60 —Å–µ–∫—É–Ω–¥
                    else:
                        delay = 2 ** attempt  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    
                    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                    time.sleep(delay)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = self._make_llm_request(prompt, text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é JSON Schema
                if self._validate_json_schema(result):
                    self.stats['successful_requests'] += 1
                    return result
                else:
                    self.stats['json_validation_errors'] += 1
                    print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: JSON Schema –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                    
                    if attempt == max_retries - 1:
                        print("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—à–∏–±–∫–æ–π")
                        self.stats['failed_requests'] += 1
                        return {
                            'contacts': [],
                            'business_context': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON Schema',
                            'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ LLM',
                            'error': 'JSON Schema validation failed after retries'
                        }
            
            except Exception as e:
                error_msg = str(e)
                print(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {e}")
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –æ—à–∏–±–æ–∫ —Å –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–æ–º
                if "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON" in error_msg and attempt < max_retries - 1:
                    print(f"üîÑ JSON –æ—à–∏–±–∫–∞: –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å —Å 'Strict JSON only!' (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 2})")
                    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º prompt –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                    if "STRICT JSON ONLY!" not in prompt:
                        prompt += "\n\nSTRICT JSON ONLY! –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
                    continue
                
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ rate limit —Å exponential backoff
                if "Rate limit (HTTP 429)" in error_msg:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
                    import re
                    wait_match = re.search(r'–æ–∂–∏–¥–∞–Ω–∏–µ (\d+) —Å–µ–∫', error_msg)
                    base_wait_time = int(wait_match.group(1)) if wait_match else 60
                    
                    # Exponential backoff: –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è * 2^–ø–æ–ø—ã—Ç–∫–∞
                    exponential_wait = base_wait_time * (2 ** attempt)
                    max_wait = 300  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
                    actual_wait = min(exponential_wait, max_wait)
                    
                    print(f"‚è≥ Rate limit: exponential backoff {actual_wait} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    
                    if attempt < max_retries - 1:  # –ù–µ –∂–¥–µ–º –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–µ
                        time.sleep(actual_wait)
                        self.stats['retry_attempts'] += 1
                        continue
                
                # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                if self._switch_to_next_provider():
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º")
                    continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å –Ω–æ–≤—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
                
                if attempt == max_retries - 1:
                    self.stats['failed_requests'] += 1
                    return {
                        'contacts': [],
                        'business_context': f'–û—à–∏–±–∫–∞ LLM: {str(e)}',
                        'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LLM –∏ API –∫–ª—é—á–∏',
                        'error': str(e)
                    }
        
        # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        self.stats['failed_requests'] += 1
        return {
            'contacts': [],
            'business_context': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
            'recommended_actions': '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É',
            'error': 'Unknown error in retry logic'
        }
    
    def _make_llm_request(self, prompt: str, text: str) -> dict:
        """ü§ñ –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π fallback"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        current_provider = self.providers[self.current_provider]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        if self.current_provider == 'replicate':
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Replicate API
            payload = {
                "version": current_provider['model'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º version –≤–º–µ—Å—Ç–æ model
                "input": {
                    "prompt": f"{prompt}\n\nüìß –¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}\n\nSTRICT JSON ONLY! –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
                    "max_tokens": 8000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
                    "temperature": 0,     # –£–±–∏—Ä–∞–µ–º —Ñ–∞–Ω—Ç–∞–∑–∏–∏
                    "top_p": 0.9,
                    "frequency_penalty": 0,
                    "presence_penalty": 0
                }
            }
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è OpenRouter –∏ Groq
            messages = [
                {
                    "role": "user",
                    "content": f"{prompt}\n\nüìß –¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}"
                }
            ]
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π max_tokens –¥–ª—è Groq —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–æ–≤
            if self.current_provider == 'groq':
                # –î–ª—è Groq –ª–∏–º–∏—Ç 6000 —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å
                estimated_input_tokens = len(f"{prompt}\n\nüìß –¢–ï–ö–°–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:\n{text}") // 4  # –ü—Ä–∏–º–µ—Ä–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω
                max_output_tokens = min(2000, 6000 - estimated_input_tokens - 500)  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
                
                if estimated_input_tokens > 5000:  # –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
                    print(f"‚ö†Ô∏è Groq: –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({estimated_input_tokens} —Ç–æ–∫–µ–Ω–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É")
                    return self._process_large_text_for_groq(text, prompt, metadata={})
                    
                max_output_tokens = max(500, max_output_tokens)  # –ú–∏–Ω–∏–º—É–º 500 —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            else:
                max_output_tokens = 4000
            
            payload = {
                "model": current_provider['model'],
                "messages": messages,
                "temperature": 0.1,
                "max_tokens": max_output_tokens
            }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {current_provider['api_key']}"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è OpenRouter
        if self.current_provider == 'openrouter':
            headers["HTTP-Referer"] = "https://github.com/contact-parser"
            headers["X-Title"] = "Contact Parser"
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Replicate
        if self.current_provider == 'replicate':
            print(f"üîß Replicate –∑–∞–ø—Ä–æ—Å:")
            print(f"   URL: {current_provider['base_url']}")
            print(f"   Model: {current_provider['model']}")
            print(f"   Payload size: {len(str(payload))} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   Text length: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   Headers: {list(headers.keys())}")
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π SSL –æ—à–∏–±–æ–∫
            response = requests.post(
                current_provider['base_url'],
                headers=headers,
                json=payload,
                timeout=60,
                verify=True  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Replicate
            if self.current_provider == 'replicate':
                print(f"üì° Replicate –æ—Ç–≤–µ—Ç: status={response.status_code}, size={len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ rate limit (HTTP 429)
            if response.status_code == 429:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                current_provider['failure_count'] += 1
                current_provider['last_failure'] = datetime.now().isoformat()
                self.stats['provider_failures'][self.current_provider] += 1
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                retry_after = response.headers.get('Retry-After')
                if retry_after:
                    try:
                        wait_time = int(retry_after)
                        print(f"‚è≥ Rate limit –æ—Ç {current_provider['name']}: –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫")
                    except ValueError:
                        wait_time = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
                else:
                    wait_time = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫—É–Ω–¥
                
                raise Exception(f"Rate limit (HTTP 429): —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫. {response.text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è Replicate –ø—Ä–∏–Ω–∏–º–∞–µ–º 200 –∏ 201)
            success_codes = [200, 201] if self.current_provider == 'replicate' else [200]
            if response.status_code not in success_codes:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                current_provider['failure_count'] += 1
                current_provider['last_failure'] = datetime.now().isoformat()
                self.stats['provider_failures'][self.current_provider] += 1
                
                raise Exception(f"HTTP {response.status_code}: {response.text}")
            
            response_data = response.json()
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            content = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            
            if self.current_provider == 'replicate':
                # –î–ª—è Replicate API –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if 'status' in response_data:
                    if response_data['status'] == 'failed':
                        raise Exception(f"Replicate prediction failed: {response_data.get('error', 'Unknown error')}")
                    elif response_data['status'] in ['starting', 'processing']:
                        # –ï—Å–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∂–¥–µ–º
                        prediction_id = response_data.get('id')
                        content = self._wait_for_replicate_result(prediction_id, current_provider)
                    elif response_data['status'] == 'succeeded':
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ output
                        output = response_data.get('output', [])
                        if isinstance(output, list) and output:
                            content = ''.join(output)
                        elif isinstance(output, str):
                            content = output
                        else:
                            raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate")
                    else:
                        raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å Replicate: {response_data['status']}")
                else:
                    raise Exception("–û—Ç–≤–µ—Ç –æ—Ç Replicate –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö API
                if 'choices' not in response_data or not response_data['choices']:
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                    current_provider['failure_count'] += 1
                    current_provider['last_failure'] = datetime.now().isoformat()
                    self.stats['provider_failures'][self.current_provider] += 1
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print(f"üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {current_provider['name']}:")
                    print(f"   Response data keys: {list(response_data.keys()) if response_data else 'None'}")
                    print(f"   Response data: {response_data}")
                    
                    raise Exception(f"–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM {current_provider['name']}: {response_data}")
                
                content = response_data['choices'][0]['message']['content']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ content –ø–æ–ª—É—á–µ–Ω
            if content is None:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM")
            
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            try:
                result = self._parse_llm_response(content)
                result['provider_used'] = current_provider['name']
                return result
            except ValueError as parse_error:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
                current_provider['failure_count'] += 1
                current_provider['last_failure'] = datetime.now().isoformat()
                self.stats['provider_failures'][self.current_provider] += 1
                
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç {current_provider['name']}: {parse_error}")
                raise Exception(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {parse_error}")
            
        except requests.exceptions.SSLError as ssl_error:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SSL –æ—à–∏–±–æ–∫
            current_provider['failure_count'] += 1
            current_provider['last_failure'] = datetime.now().isoformat()
            self.stats['provider_failures'][self.current_provider] += 1
            
            print(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {current_provider['name']}: {ssl_error}")
            print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL")
            raise Exception(f"SSL record layer failure: {ssl_error}")
            
        except requests.exceptions.ConnectionError as conn_error:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            current_provider['failure_count'] += 1
            current_provider['last_failure'] = datetime.now().isoformat()
            self.stats['provider_failures'][self.current_provider] += 1
            
            print(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º {current_provider['name']}: {conn_error}")
            raise Exception(f"Connection error: {conn_error}")
            
        except requests.exceptions.Timeout as timeout_error:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
            current_provider['failure_count'] += 1
            current_provider['last_failure'] = datetime.now().isoformat()
            self.stats['provider_failures'][self.current_provider] += 1
            
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {current_provider['name']}: {timeout_error}")
            raise Exception(f"Request timeout: {timeout_error}")
            
        except Exception as e:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            current_provider['failure_count'] += 1
            current_provider['last_failure'] = datetime.now().isoformat()
            self.stats['provider_failures'][self.current_provider] += 1
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {current_provider['name']}: {e}")
            raise e
    
    def _wait_for_replicate_result(self, prediction_id: str, provider_config: dict, max_wait: int = 600) -> str:
        """‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Replicate API"""
        import time
        
        if not prediction_id:
            raise Exception("–ù–µ –ø–æ–ª—É—á–µ–Ω ID –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ—Ç Replicate")
        
        # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        status_url = f"https://api.replicate.com/v1/predictions/{prediction_id}"
        headers = {
            "Authorization": f"Bearer {provider_config['api_key']}",
            "Content-Type": "application/json"
        }
        
        start_time = time.time()
        
        while time.time() - start_time < max_wait:
            try:
                response = requests.get(status_url, headers=headers, timeout=30, verify=True)
                
                if response.status_code != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ Replicate: HTTP {response.status_code}")
                
                data = response.json()
                status = data.get('status')
                
                if status == 'succeeded':
                    output = data.get('output', [])
                    if isinstance(output, list) and output:
                        return ''.join(output)
                    elif isinstance(output, str):
                        return output
                    else:
                        raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Replicate")
                
                elif status == 'failed':
                    error_msg = data.get('error', 'Unknown error')
                    raise Exception(f"Replicate prediction failed: {error_msg}")
                
                elif status in ['starting', 'processing']:
                    print(f"‚è≥ Replicate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å... (—Å—Ç–∞—Ç—É—Å: {status})")
                    time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    continue
                
                else:
                    raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å Replicate: {status}")
                    
            except requests.exceptions.SSLError as ssl_error:
                print(f"üîí SSL –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Replicate: {ssl_error}")
                raise Exception(f"SSL record layer failure –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {ssl_error}")
                
            except requests.exceptions.ConnectionError as conn_error:
                print(f"üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Replicate: {conn_error}")
                raise Exception(f"Connection error –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {conn_error}")
                
            except requests.exceptions.Timeout as timeout_error:
                print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Replicate: {timeout_error}")
                raise Exception(f"Request timeout –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {timeout_error}")
                
            except requests.RequestException as e:
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ Replicate: {e}")
        
        raise Exception(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç Replicate ({max_wait} —Å–µ–∫)")
    
    def _process_large_text_for_groq(self, text: str, prompt: str, metadata: dict = None) -> dict:
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è Groq —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω–æ 500 —Ç–æ–∫–µ–Ω–æ–≤)
        chunk_size = 2000
        text_chunks = []
        
        for i in range(0, len(text), chunk_size):
            chunk = text[i:i + chunk_size]
            text_chunks.append(chunk)
        
        print(f"üìÑ Groq: —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ {len(text_chunks)} —á–∞—Å—Ç–µ–π")
        
        all_contacts = []
        all_business_contexts = []
        all_recommendations = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        for i, chunk in enumerate(text_chunks):
            print(f"‚è≥ Groq: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å {i+1}/{len(text_chunks)}")
            
            try:
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
                original_provider = self.current_provider
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Groq –¥–ª—è —ç—Ç–æ–π —á–∞—Å—Ç–∏
                self.current_provider = 'groq'
                
                # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
                chunk_result = self._make_llm_request(prompt, chunk)
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                self.current_provider = original_provider
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if 'contacts' in chunk_result and chunk_result['contacts']:
                    all_contacts.extend(chunk_result['contacts'])
                
                if 'business_context' in chunk_result:
                    all_business_contexts.append(chunk_result['business_context'])
                
                if 'recommended_actions' in chunk_result:
                    all_recommendations.append(chunk_result['recommended_actions'])
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Å—Ç–∏ {i+1}: {e}")
                continue
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        combined_result = {
            'contacts': self._deduplicate_contacts(all_contacts),
            'business_context': ' | '.join(all_business_contexts) if all_business_contexts else '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            'recommended_actions': ' | '.join(all_recommendations) if all_recommendations else '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã',
            'provider_used': 'Groq (chunked)',
            'chunks_processed': len(text_chunks),
            'total_contacts_found': len(all_contacts)
        }
        
        print(f"‚úÖ Groq: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞–π–¥–µ–Ω–æ {len(all_contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        return combined_result
    
    def _deduplicate_contacts(self, contacts: list) -> list:
        """üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É"""
        seen = set()
        unique_contacts = []
        
        for contact in contacts:
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            key_parts = []
            if contact.get('email'):
                key_parts.append(contact['email'].lower().strip())
            if contact.get('phone'):
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã)
                phone_normalized = ''.join(filter(str.isdigit, contact['phone']))
                key_parts.append(phone_normalized)
            
            if key_parts:
                contact_key = '|'.join(key_parts)
                if contact_key not in seen:
                    seen.add(contact_key)
                    unique_contacts.append(contact)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                unique_contacts.append(contact)
        
        return unique_contacts
    
    def _parse_llm_response(self, response_text: str) -> dict:
        """üìù –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ LLM —Å —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π JSON"""
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        print(f"üîç –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç LLM ({len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"'{response_text[:500]}{'...' if len(response_text) > 500 else ''}'")
        
        try:
            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Replicate
            if self.current_provider == 'replicate':
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ —Å—É—Ñ—Ñ–∏–∫—Å—ã
                response_text = response_text.strip()
                # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                response_text = re.sub(r'^```json\s*', '', response_text, flags=re.MULTILINE)
                response_text = re.sub(r'\s*```$', '', response_text, flags=re.MULTILINE)
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–æ JSON
                response_text = re.sub(r'^[^{]*(?=\{)', '', response_text, flags=re.DOTALL)
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{.*\}', response_text, re.DOTALL)
            if json_match:
                json_str = json_match.group()
                print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π JSON: {json_str[:200]}{'...' if len(json_str) > 200 else ''}")
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                try:
                    result = json.loads(json_str)
                except json.JSONDecodeError as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                    json_str = json_str.replace("'", '"')  # –û–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                    json_str = re.sub(r',\s*}', '}', json_str)  # –õ–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
                    json_str = re.sub(r',\s*]', ']', json_str)  # –õ–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ –≤ –º–∞—Å—Å–∏–≤–∞—Ö
                    result = json.loads(json_str)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                if not isinstance(result, dict):
                    raise ValueError("–û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON –æ–±—ä–µ–∫—Ç–æ–º")
                
                # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate
                result = self._normalize_replicate_response(result)
                    
                return result
            else:
                raise ValueError("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ LLM")
        
        except json.JSONDecodeError as e:
            raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å —Å 'Strict JSON only!'")
    
    def _normalize_replicate_response(self, response: dict) -> dict:
        """üîß –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Replicate API"""
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º action_items –≤ recommended_actions
        if 'action_items' in response and 'recommended_actions' not in response:
            action_items = response.get('action_items', [])
            if isinstance(action_items, list):
                response['recommended_actions'] = '; '.join(action_items) if action_items else '–ù–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'
            else:
                response['recommended_actions'] = str(action_items)
            print("üîß –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ action_items -> recommended_actions")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç business_context –≤ —Å—Ç—Ä–æ–∫—É
        if 'business_context' in response and isinstance(response['business_context'], dict):
            bc = response['business_context']
            context_parts = []
            for key, value in bc.items():
                if value:
                    context_parts.append(f"{key}: {value}")
            response['business_context'] = '; '.join(context_parts) if context_parts else '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
            print("üîß –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –æ–±—ä–µ–∫—Ç business_context –≤ —Å—Ç—Ä–æ–∫—É")
        
        return response
    
    def _process_large_text(self, text: str, prompt: str, metadata: dict = None) -> dict:
        """üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ —á–∞—Å—Ç–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if self.test_mode:
            print("   üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞")
            return {
                'success': True,
                'contacts': [{
                    'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–æ–Ω—Ç–∞–∫—Ç',
                    'email': 'test@example.com',
                    'phone': '+7 (999) 123-45-67',
                    'organization': '–¢–µ—Å—Ç–æ–≤–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                    'position': '–¢–µ—Å—Ç–æ–≤–∞—è –î–æ–ª–∂–Ω–æ—Å—Ç—å',
                    'city': '–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Ä–æ–¥',
                    'confidence': 0.95
                }],
                'business_context': '–¢–µ—Å—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
                'recommended_actions': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
                'provider_used': 'Test Mode'
            }
        
        import gc  # –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é chunking
        chunking_config = self._load_chunking_config()
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ (250K+ —Å–∏–º–≤–æ–ª–æ–≤)
        text_length = len(text)
        very_large_threshold = chunking_config.get('very_large_text_threshold', 250000)
        
        if text_length > very_large_threshold:
            print(f"   üî• –û–ß–ï–ù–¨ –ë–û–õ–¨–®–û–ô –¢–ï–ö–°–¢: {text_length} —Å–∏–º–≤–æ–ª–æ–≤ (>{very_large_threshold})")
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤
            chunking_config.update({
                'max_tokens_per_chunk': chunking_config.get('very_large_max_tokens_per_chunk', 6000),
                'overlap_tokens': chunking_config.get('very_large_overlap_tokens', 600),
                'max_chunks_per_text': chunking_config.get('very_large_max_chunks', 50)
            })
        
        # –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        chunks = self._create_text_chunks(text, chunking_config)
        
        print(f"   üìä –†–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —á–∞—Å—Ç–µ–π (–º–µ—Ç–æ–¥: {'—Ç–æ–∫–µ–Ω-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' if tiktoken else '—Å–∏–º–≤–æ–ª—å–Ω—ã–π'})")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏
        all_contacts = []
        all_contexts = []
        all_actions = []
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏
        memory_optimization = chunking_config.get('memory_optimization', True)
        progressive_chunking = chunking_config.get('progressive_chunking', True)
        
        # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if text_length > very_large_threshold and progressive_chunking:
            print(f"   üöÄ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(chunks)} —á–∞—Å—Ç–µ–π")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –±–∞—Ç—á–∞–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            batch_size = min(5, len(chunks))  # –ú–∞–∫—Å–∏–º—É–º 5 —á–∞—Å—Ç–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            
            for batch_start in range(0, len(chunks), batch_size):
                batch_end = min(batch_start + batch_size, len(chunks))
                batch_chunks = chunks[batch_start:batch_end]
                
                print(f"   üì¶ –ë–∞—Ç—á {batch_start//batch_size + 1}: —á–∞—Å—Ç–∏ {batch_start + 1}-{batch_end}")
                
                for i, chunk in enumerate(batch_chunks):
                    chunk_index = batch_start + i
                    self._process_single_chunk(chunk, chunk_index + 1, len(chunks), prompt, 
                                             all_contacts, all_contexts, all_actions, memory_optimization)
                
                # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
                if memory_optimization:
                    del batch_chunks
                    gc.collect()
                    print(f"   üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –±–∞—Ç—á–∞ {batch_start//batch_size + 1}")
        else:
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
            if chunking_config.get('enable_async_processing', True) and len(chunks) > 2:
                return self._process_chunks_async(chunks, prompt, chunking_config)
            else:
                return self._process_chunks_sync(chunks, prompt, chunking_config)
    
    def _process_single_chunk(self, chunk, chunk_index, total_chunks, prompt, 
                             all_contacts, all_contexts, all_actions, memory_optimization):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞"""
        print(f"   üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ {chunk_index}/{total_chunks} (—Ä–∞–∑–º–µ—Ä: {len(chunk)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç—å
            chunk_result = self._make_llm_request_with_retries(prompt, chunk)
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if 'contacts' in chunk_result and chunk_result['contacts']:
                all_contacts.extend(chunk_result['contacts'])
            
            if 'business_context' in chunk_result:
                all_contexts.append(f"–ß–∞—Å—Ç—å {chunk_index}: {chunk_result['business_context']}")
            
            if 'recommended_actions' in chunk_result:
                all_actions.append(f"–ß–∞—Å—Ç—å {chunk_index}: {chunk_result['recommended_actions']}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if chunk_index < total_chunks:
                time.sleep(2)
                
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
            if memory_optimization:
                del chunk_result
                gc.collect()
        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ {chunk_index}: {e}")
            all_contexts.append(f"–ß–∞—Å—Ç—å {chunk_index}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {str(e)}")
            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if memory_optimization:
                gc.collect()
    
    def _process_chunks_async(self, chunks: List[str], prompt: str, chunking_config: dict) -> dict:
        """üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        
        import gc
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        max_concurrent_chunks = chunking_config.get('max_concurrent_chunks', 3)
        api_rate_limit_delay = chunking_config.get('api_rate_limit_delay', 1.0)
        enable_async_processing = chunking_config.get('enable_async_processing', True)
        
        if not enable_async_processing or len(chunks) <= 2:
            print(f"   üìù –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤ (async –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –º–∞–ª–æ —á–∞–Ω–∫–æ–≤)")
            return self._process_chunks_sync(chunks, prompt, chunking_config)
        
        print(f"   üöÄ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤ (max_concurrent: {max_concurrent_chunks})")
        
        all_contacts = []
        all_contexts = []
        all_actions = []
        
        def process_single_chunk_wrapper(chunk_data):
            """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞"""
            chunk, chunk_index = chunk_data
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
                if chunk_index > 1:
                    time.sleep(api_rate_limit_delay)
                
                print(f"   üîç –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏ {chunk_index}/{len(chunks)}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫
                chunk_result = self._make_llm_request_with_retries(prompt, chunk)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω–¥–µ–∫—Å–æ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                return {
                    'index': chunk_index,
                    'contacts': chunk_result.get('contacts', []),
                    'business_context': chunk_result.get('business_context', ''),
                    'recommended_actions': chunk_result.get('recommended_actions', ''),
                    'success': True
                }
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ {chunk_index}: {e}")
                return {
                    'index': chunk_index,
                    'contacts': [],
                    'business_context': f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {str(e)}",
                    'recommended_actions': '',
                    'success': False
                }
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        chunk_data = [(chunk, i+1) for i, chunk in enumerate(chunks)]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with concurrent.futures.ThreadPoolExecutor(max_workers=max_concurrent_chunks) as executor:
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
                future_to_chunk = {executor.submit(process_single_chunk_wrapper, data): data[1] 
                                 for data in chunk_data}
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                completed_chunks = 0
                for future in concurrent.futures.as_completed(future_to_chunk):
                    chunk_index = future_to_chunk[future]
                    completed_chunks += 1
                    
                    try:
                        result = future.result()
                        
                        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if result['contacts']:
                            all_contacts.extend(result['contacts'])
                        
                        if result['business_context']:
                            all_contexts.append(f"–ß–∞—Å—Ç—å {result['index']}: {result['business_context']}")
                        
                        if result['recommended_actions']:
                            all_actions.append(f"–ß–∞—Å—Ç—å {result['index']}: {result['recommended_actions']}")
                        
                        print(f"   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —á–∞—Å—Ç—å {result['index']} ({completed_chunks}/{len(chunks)})")
                        
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–∞—Å—Ç–∏ {chunk_index}: {e}")
                        all_contexts.append(f"–ß–∞—Å—Ç—å {chunk_index}: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - {str(e)}")
                
            except Exception as e:
                print(f"   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                print(f"   üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
                return self._process_chunks_sync(chunks, prompt, chunking_config)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        if chunking_config.get('memory_optimization', True):
            gc.collect()
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        unique_contacts = self._deduplicate_contacts(all_contacts)
        
        print(f"   üéØ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(all_contacts)} -> {len(unique_contacts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        
        return {
            'contacts': unique_contacts,
            'business_context': ' | '.join(all_contexts) if all_contexts else '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            'recommended_actions': ' | '.join(all_actions) if all_actions else '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã',
            'provider_used': f'{self.providers[self.current_provider]["name"]} (async chunked)',
            'chunks_processed': len(chunks),
            'total_contacts_found': len(all_contacts),
            'unique_contacts_found': len(unique_contacts),
            'processing_method': 'async'
        }
    
    def _process_chunks_sync(self, chunks: List[str], prompt: str, chunking_config: dict) -> dict:
        """üìù –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ (fallback –º–µ—Ç–æ–¥)"""
        
        import gc
        
        print(f"   üìù –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        all_contacts = []
        all_contexts = []
        all_actions = []
        memory_optimization = chunking_config.get('memory_optimization', True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        for i, chunk in enumerate(chunks):
            self._process_single_chunk(
                chunk, i+1, len(chunks), prompt,
                all_contacts, all_contexts, all_actions, memory_optimization
            )
        
        # –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        unique_contacts = self._deduplicate_contacts(all_contacts)
        
        print(f"   üéØ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(all_contacts)} -> {len(unique_contacts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        
        return {
            'contacts': unique_contacts,
            'business_context': ' | '.join(all_contexts) if all_contexts else '–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω',
            'recommended_actions': ' | '.join(all_actions) if all_actions else '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã',
            'provider_used': f'{self.providers[self.current_provider]["name"]} (sync chunked)',
            'chunks_processed': len(chunks),
            'total_contacts_found': len(all_contacts),
            'unique_contacts_found': len(unique_contacts),
            'processing_method': 'sync'
        }
    
    def _deduplicate_contacts(self, contacts: List[dict]) -> List[dict]:
        """üîÑ –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        
        if not contacts:
            return []
        
        unique_contacts = []
        seen_emails = set()
        seen_phones = set()
        
        for contact in contacts:
            email = contact.get('email', '').lower().strip()
            phone = contact.get('phone', '').strip()
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã, –ø–ª—é—Å—ã)
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            normalized_phone = re.sub(r'[^0-9]', '', phone)
            
            # –î–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            if normalized_phone.startswith('8') and len(normalized_phone) == 11:
                normalized_phone = '7' + normalized_phone[1:]  # 8xxx -> 7xxx
            elif normalized_phone.startswith('7') and len(normalized_phone) == 11:
                pass  # –£–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            elif len(normalized_phone) == 10:
                normalized_phone = '7' + normalized_phone  # xxx -> 7xxx
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            is_duplicate = False
            
            if email and email in seen_emails:
                is_duplicate = True
            
            if normalized_phone and len(normalized_phone) > 6 and normalized_phone in seen_phones:
                is_duplicate = True
            
            if not is_duplicate:
                unique_contacts.append(contact)
                if email:
                    seen_emails.add(email)
                if normalized_phone and len(normalized_phone) > 6:
                    seen_phones.add(normalized_phone)
        
        return unique_contacts
    
    def extract_contacts(self, text: str, metadata: dict = None) -> dict:
        """üë§ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π test_mode
        original_test_mode = self.test_mode
        
        try:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            print(f"\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (test_mode={self.test_mode})")
            print(f"   üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            if metadata:
                print(f"   üìß –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∫–∞–∫ –µ—Å—Ç—å
            # (—É–±—Ä–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
            prompt = self._load_prompt("contact_extraction.txt")
            
            if prompt.startswith("ERROR:"):
                return {
                    'contacts': [],
                    'business_context': prompt,
                    'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–∞',
                    'error': 'Prompt loading failed'
                }
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–∞–∑–±–∏–≤–∫—É –Ω–∞ —á–∞—Å—Ç–∏ (—Å–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)
            if len(text) > 6000:
                print(f"   üìÑ –ë–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏")
                return self._process_large_text(text, prompt, metadata)
            else:
                print(f"   üìù –û–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            provider_info = f"{self.providers[self.current_provider]['name']} ({self.providers[self.current_provider]['model']})"
            
            # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if self.test_mode:
                print("   üß™ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º")
                result = {
                    'success': True,
                    'contacts': [{
                        'name': '–¢–µ—Å—Ç–æ–≤—ã–π –ö–æ–Ω—Ç–∞–∫—Ç',
                        'email': 'test@example.com',
                        'phone': '+7 (999) 123-45-67',
                        'organization': '–¢–µ—Å—Ç–æ–≤–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
                        'position': '–¢–µ—Å—Ç–æ–≤–∞—è –î–æ–ª–∂–Ω–æ—Å—Ç—å',
                        'city': '–¢–µ—Å—Ç–æ–≤—ã–π –ì–æ—Ä–æ–¥',
                        'confidence': 0.95
                    }],
                    'business_context': '–¢–µ—Å—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç',
                    'recommended_actions': '–¢–µ—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
                    'provider_used': 'Test Mode'
                }
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π test_mode
                self.test_mode = original_test_mode
                return result
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            result = self._make_llm_request_with_retries(prompt, text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
            if not isinstance(result, dict):
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
                return {
                    'contacts': [],
                    'business_context': f'–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω {type(result)} –≤–º–µ—Å—Ç–æ dict',
                    'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ LLM',
                    'error': f'Invalid result type: {type(result)}',
                    'provider_used': 'Error'
                }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            result['provider_used'] = provider_info
            result['processing_time'] = datetime.now().isoformat()
            result['text_length'] = len(text)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            contacts_count = len(result.get('contacts', []))
            print(f"   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_count}")
            print(f"   ü§ñ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {provider_info}")
            
            return result
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
            return {
                'contacts': [],
                'business_context': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}',
                'recommended_actions': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å',
                'error': str(e),
                'provider_used': 'Error'
            }
        
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π test_mode
            self.test_mode = original_test_mode
    
    def get_stats(self) -> dict:
        """üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        return self.stats.copy()
    
    def reset_stats(self):
        """üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.stats = {
            'total_requests': 0,
            'successful_requests': 0,
            'failed_requests': 0,
            'retry_attempts': 0,
            'json_validation_errors': 0,
            'fallback_switches': 0,
            'provider_failures': {
                'openrouter': 0,
                'groq': 0
            }
        }
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
    
    def get_provider_health(self) -> dict:
        """üè• –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        health_status = {
            'current_provider': self.current_provider,
            'system_health': 'healthy',
            'providers': {},
            'recommendations': []
        }
        
        for provider_id, provider in self.providers.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
            has_api_key = bool(provider['api_key'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            if not provider['active']:
                status = 'disabled'
            elif not has_api_key:
                status = 'no_api_key'
            elif provider['failure_count'] > 3:
                status = 'unhealthy'
            elif provider['failure_count'] > 0:
                status = 'degraded'
            else:
                status = 'healthy'
            
            health_status['providers'][provider_id] = {
                'name': provider['name'],
                'status': status,
                'active': provider['active'],
                'has_api_key': has_api_key,
                'failure_count': provider['failure_count'],
                'last_failure': provider['last_failure'],
                'priority': provider['priority']
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            if not has_api_key:
                health_status['recommendations'].append(f"–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á –¥–ª—è {provider['name']}")
            elif status == 'unhealthy':
                health_status['recommendations'].append(f"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {provider['name']} - –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        active_providers = [p for p in self.providers.values() if p['active'] and p['api_key']]
        if not active_providers:
            health_status['system_health'] = 'critical'
            health_status['recommendations'].append('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å API –∫–ª—é—á–∞–º–∏')
        elif len(active_providers) == 1:
            health_status['system_health'] = 'warning'
            health_status['recommendations'].append('–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä - –Ω–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ')
        
        return health_status
    
    def _switch_to_next_provider(self) -> bool:
        """üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        active_providers = [
            (pid, provider) for pid, provider in self.providers.items()
            if provider['active'] and provider['api_key']
        ]
        active_providers.sort(key=lambda x: x[1]['priority'])
        
        # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ
        current_index = -1
        for i, (pid, _) in enumerate(active_providers):
            if pid == self.current_provider:
                current_index = i
                break
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        if current_index >= 0 and current_index + 1 < len(active_providers):
            next_provider_id = active_providers[current_index + 1][0]
            old_provider = self.current_provider
            self.current_provider = next_provider_id
            self.stats['fallback_switches'] += 1
            
            print(f"üîÑ Fallback: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å {self.providers[old_provider]['name']} –Ω–∞ {self.providers[next_provider_id]['name']}")
            return True
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ (–µ—Å–ª–∏ –æ–Ω –Ω–µ —Ç–µ–∫—É—â–∏–π)
        if active_providers and active_providers[0][0] != self.current_provider:
            next_provider_id = active_providers[0][0]
            old_provider = self.current_provider
            self.current_provider = next_provider_id
            self.stats['fallback_switches'] += 1
            
            print(f"üîÑ Fallback: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å {self.providers[old_provider]['name']} –Ω–∞ {self.providers[next_provider_id]['name']}")
            return True
        
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è fallback")
        return False
    
    def simulate_provider_failure(self, provider_id: str) -> dict:
        """üß™ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback"""
        if provider_id not in self.providers:
            return {
                'success': False,
                'error': f'–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_id} –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        self.providers[provider_id]['active'] = False
        self.providers[provider_id]['failure_count'] += 1
        self.providers[provider_id]['last_failure'] = datetime.now().isoformat()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
        if self.current_provider == provider_id:
            self._switch_to_next_provider()
        
        return {
            'success': True,
            'message': f'–ü—Ä–æ–≤–∞–π–¥–µ—Ä {self.providers[provider_id]["name"]} –æ—Ç–∫–ª—é—á–µ–Ω',
            'current_provider': self.current_provider,
            'fallback_occurred': True
        }
    
    def reset_system_state(self) -> dict:
        """üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è fallback —Å–∏—Å—Ç–µ–º—ã"""
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        for provider in self.providers.values():
            provider['active'] = True
            provider['failure_count'] = 0
            provider['last_failure'] = None
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
        self.current_provider = 'openrouter'
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É fallback
        self.stats['fallback_switches'] = 0
        self.stats['provider_failures'] = {
            'openrouter': 0,
            'groq': 0
        }
        
        return {
            'success': True,
            'message': '–°–æ—Å—Ç–æ—è–Ω–∏–µ fallback —Å–∏—Å—Ç–µ–º—ã —Å–±—Ä–æ—à–µ–Ω–æ',
            'current_provider': self.current_provider,
            'active_providers': [pid for pid, p in self.providers.items() if p['active']]
        }


def get_available_dates():
    """üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏–∑ –ø–∞–ø–∫–∏ data/emails"""
    from pathlib import Path
    import os
    
    current_file = Path(__file__)
    project_root = current_file.parent.parent
    emails_dir = project_root / "data" / "emails"
    
    if not emails_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {emails_dir}")
        return []
    
    dates = []
    for item in os.listdir(emails_dir):
        item_path = emails_dir / item
        if item_path.is_dir() and item.startswith('2025-'):
            dates.append(item)
    
    return sorted(dates)

def show_date_menu():
    """üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç"""
    dates = get_available_dates()
    
    if not dates:
        print("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    print("\nüìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:")
    for i, date in enumerate(dates, 1):
        print(f"   {i:2d}. {date}")
    
    print(f"   {len(dates)+1:2d}. –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
    print(f"   {len(dates)+2:2d}. –í—Å–µ –¥–∞—Ç—ã")
    print("    0. –ù–∞–∑–∞–¥")
    
    while True:
        try:
            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (–Ω–æ–º–µ—Ä): ").strip()
            
            if choice == '0':
                return None
            
            choice_num = int(choice)
            
            if 1 <= choice_num <= len(dates):
                return [dates[choice_num - 1]]
            elif choice_num == len(dates) + 1:
                # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
                print("\nüìä –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç:")
                start_idx = int(input(f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (1-{len(dates)}): ")) - 1
                end_idx = int(input(f"–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (1-{len(dates)}): ")) - 1
                
                if 0 <= start_idx <= end_idx < len(dates):
                    return dates[start_idx:end_idx + 1]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
                    continue
            elif choice_num == len(dates) + 2:
                return dates
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                continue
                
        except (ValueError, IndexError):
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
            continue

def show_provider_menu():
    """üîß –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    providers = {
        '1': 'groq',
        '2': 'replicate', 
        '3': 'openrouter'
    }
    
    print("\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:")
    print("   1. Groq (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
    print("   2. Replicate")
    print("   3. OpenRouter")
    print("   4. –ê–≤—Ç–æ–≤—ã–±–æ—Ä (fallback —Å–∏—Å—Ç–µ–º–∞)")
    print("   0. –ù–∞–∑–∞–¥")
    
    while True:
        choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ (–Ω–æ–º–µ—Ä): ").strip()
        
        if choice == '0':
            return None
        elif choice in providers:
            return providers[choice]
        elif choice == '4':
            return 'auto'
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            continue

def run_interactive_mode():
    """üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –º–µ–Ω—é"""
    print("\n" + "="*60)
    print("ü§ñ LLM –≠–ö–°–¢–†–ê–ö–¢–û–† –ö–û–ù–¢–ê–ö–¢–û–í - –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    print("="*60)
    
    while True:
        print("\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        print("   1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º —Å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        print("   2. –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets")
        print("   3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
        print("   4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        print("   0. –í—ã—Ö–æ–¥")
        
        choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–æ–º–µ—Ä): ").strip()
        
        if choice == '0':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == '1':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º
            selected_dates = show_date_menu()
            if selected_dates:
                selected_provider = show_provider_menu()
                if selected_provider:
                    process_emails_for_dates(selected_dates, selected_provider)
        elif choice == '2':
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets
            selected_dates = show_date_menu()
            if selected_dates:
                export_to_sheets(selected_dates)
        elif choice == '3':
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
            test_providers()
        elif choice == '4':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            show_system_stats()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def load_emails_for_date(date):
    """üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ –ø–∏—Å–µ–º –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
    from pathlib import Path
    import json
    
    current_file = Path(__file__)
    project_root = current_file.parent.parent
    emails_dir = project_root / "data" / "emails" / date
    
    if not emails_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –ø–∏—Å—å–º–∞–º–∏ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {emails_dir}")
        return []
    
    emails = []
    json_files = sorted(list(emails_dir.glob("*.json")), key=lambda x: x.name)
    
    print(f"   üìÅ –ù–∞–π–¥–µ–Ω–æ {len(json_files)} JSON —Ñ–∞–π–ª–æ–≤ –ø–∏—Å–µ–º (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∏–º–µ–Ω–∏)")
    
    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                email_data = json.load(f)
                emails.append(email_data)
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {json_file.name}: {e}")
    
    return emails

def check_and_run_ocr_for_date(date):
    """üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ OCR –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π –∑–∞ –¥–∞—Ç—É"""
    from pathlib import Path
    import subprocess
    import sys
    
    current_file = Path(__file__)
    project_root = current_file.parent.parent
    final_results_dir = project_root / "data" / "final_results" / "texts" / date
    attachments_dir = project_root / "data" / "attachments" / date
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
    if not attachments_dir.exists():
        print(f"   üìé –ü–∞–ø–∫–∞ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    attachment_files = list(attachments_dir.glob("*"))
    attachment_files = [f for f in attachment_files if f.is_file() and not f.name.startswith('.')]
    
    if not attachment_files:
        print(f"   üìé –í–ª–æ–∂–µ–Ω–∏—è –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR
    if final_results_dir.exists():
        ocr_files = list(final_results_dir.glob("*.txt"))
        if len(ocr_files) >= len(attachment_files):
            print(f"   ‚úÖ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ({len(ocr_files)} —Ñ–∞–π–ª–æ–≤)")
            return True
    
    print(f"   üîÑ –ó–∞–ø—É—Å–∫–∞—é OCR –¥–ª—è {len(attachment_files)} –≤–ª–æ–∂–µ–Ω–∏–π...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    ocr_script = project_root / "src" / "ocr_processor.py"
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
        result = subprocess.run([
            sys.executable, str(ocr_script), "--auto", "--date", date
        ], capture_output=True, text=True, cwd=str(project_root))
        
        if result.returncode == 0:
            print(f"   ‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ OCR: {result.stderr}")
            return False
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ OCR: {e}")
        return False

def load_ocr_results_for_date(date):
    """üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR –∑–∞ –¥–∞—Ç—É"""
    from pathlib import Path
    
    current_file = Path(__file__)
    project_root = current_file.parent.parent
    final_results_dir = project_root / "data" / "final_results" / "texts" / date
    
    if not final_results_dir.exists():
        return []
    
    ocr_results = []
    txt_files = list(final_results_dir.glob("*.txt"))
    
    for txt_file in txt_files:
        try:
            with open(txt_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)
                lines = content.split('\n')
                text_start_idx = 0
                for i, line in enumerate(lines):
                    if line.startswith('# ==='):
                        text_start_idx = i + 1
                        break
                
                text = '\n'.join(lines[text_start_idx:]).strip()
                
                if text:
                    ocr_results.append({
                        'file_name': txt_file.name,
                        'text': text,
                        'source': 'ocr_attachment'
                    })
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {txt_file.name}: {e}")
    
    return ocr_results

def process_emails_for_dates(dates, provider):
    """üìß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã"""
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏—Å–µ–º –∑–∞ {len(dates)} –¥–∞—Ç(—ã) —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º {provider}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    extractor = ContactExtractor(test_mode=False)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if provider != 'auto':
        if provider in extractor.providers:
            extractor.current_provider = provider
            print(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {extractor.providers[provider]['name']}")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–≤—ã–±–æ—Ä")
    
    total_contacts = 0
    total_emails_processed = 0
    
    for date in dates:
        print(f"\nüìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã: {date}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∏—Å—å–º–∞ –∑–∞ –¥–∞—Ç—É
        print(f"   üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º –∑–∞ {date}...")
        emails = load_emails_for_date(date)
        
        if not emails:
            print(f"   üì≠ –ü–∏—Å—å–º–∞ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º OCR –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        print(f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR...")
        check_and_run_ocr_for_date(date)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR
        ocr_results = load_ocr_results_for_date(date)
        print(f"   üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ocr_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OCR")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–∏—Å—å–º–æ
        print(f"   ü§ñ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é {extractor.providers[extractor.current_provider]['name']}...")
        
        date_contacts = 0
        for email in emails:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                text_parts = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
                if email.get('body'):
                    text_parts.append(f"–ü–ò–°–¨–ú–û:\n{email['body']}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã OCR –≤–ª–æ–∂–µ–Ω–∏–π
                for ocr_result in ocr_results:
                    text_parts.append(f"–í–õ–û–ñ–ï–ù–ò–ï ({ocr_result['file_name']}):\n{ocr_result['text']}")
                
                if not text_parts:
                    continue
                
                combined_text = "\n\n" + "="*50 + "\n\n".join(text_parts)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    'subject': email.get('subject', ''),
                    'from': email.get('from', ''),
                    'date': email.get('date', ''),
                    'message_id': email.get('message_id', '')
                }
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
                result = extractor.extract_contacts(combined_text, metadata)
                
                if result.get('contacts'):
                    contacts_count = len(result['contacts'])
                    date_contacts += contacts_count
                    print(f"     ‚úÖ –ù–∞–π–¥–µ–Ω–æ {contacts_count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ –ø–∏—Å—å–º–µ {email.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')[:50]}...")
                    
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    
            except Exception as e:
                print(f"     ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
        
        total_emails_processed += len(emails)
        total_contacts += date_contacts
        print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {len(emails)}, –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {date_contacts}")
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {total_contacts}")
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {total_emails_processed}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {extractor.get_stats()}")

def export_to_sheets(dates):
    """üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
    print(f"\nüìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets –∑–∞ {len(dates)} –¥–∞—Ç(—ã)")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
    try:
        from google_sheets_exporter import GoogleSheetsExporter
        exporter = GoogleSheetsExporter()
        
        for date in dates:
            print(f"üìÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}...")
            success = exporter.export_results_by_date(date)
            if success:
                print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {date} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {date}")
                
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Google Sheets —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

def test_providers():
    """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...")
    
    test_text = """
    –î–æ–±—Ä—ã–π –¥–µ–Ω—å!
    
    –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, —è —Ä–∞–±–æ—Ç–∞—é –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "–¢–µ—Ö–Ω–æ–õ–∞–±" –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º.
    –ú–æ–π email: ivan.petrov@technolab.ru, —Ç–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67.
    
    –•–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.
    
    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
    –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
    –û–û–û "–¢–µ—Ö–Ω–æ–õ–∞–±"
    –≥. –ú–æ—Å–∫–≤–∞
    """
    
    extractor = ContactExtractor(test_mode=False)
    
    for provider_id, provider_info in extractor.providers.items():
        if provider_info['active'] and provider_info['api_key']:
            print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider_info['name']}...")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            original_provider = extractor.current_provider
            extractor.current_provider = provider_id
            
            try:
                result = extractor.extract_contacts(test_text)
                contacts_count = len(result.get('contacts', []))
                print(f"   ‚úÖ {provider_info['name']}: –Ω–∞–π–¥–µ–Ω–æ {contacts_count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
            except Exception as e:
                print(f"   ‚ùå {provider_info['name']}: –æ—à–∏–±–∫–∞ - {e}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            extractor.current_provider = original_provider
        else:
            print(f"   ‚ö†Ô∏è {provider_info['name']}: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞")

def show_system_stats():
    """üìà –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:")
    
    extractor = ContactExtractor(test_mode=False)
    stats = extractor.get_stats()
    
    print(f"   üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['successful_requests']}")
    print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['failed_requests']}")
    print(f"   üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {stats['retry_attempts']}")
    print(f"   üìù –û—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON: {stats['json_validation_errors']}")
    print(f"   üîÄ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {stats['fallback_switches']}")
    
    print("\nü§ñ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
    for provider, failures in stats['provider_failures'].items():
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if extractor.providers[provider]['active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
        print(f"   {provider}: {failures} –æ—à–∏–±–æ–∫, {status}")

if __name__ == "__main__":
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        print("üß™ –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        extractor = ContactExtractor(test_mode=True)
        
        test_text = """
        –î–æ–±—Ä—ã–π –¥–µ–Ω—å!
        
        –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, —è —Ä–∞–±–æ—Ç–∞—é –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "–¢–µ—Ö–Ω–æ–õ–∞–±" –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º.
        –ú–æ–π email: ivan.petrov@technolab.ru, —Ç–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67.
        
        –•–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.
        
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
        –û–û–û "–¢–µ—Ö–Ω–æ–õ–∞–±"
        –≥. –ú–æ—Å–∫–≤–∞
        """
        
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        result = extractor.extract_contacts(test_text)
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(json.dumps(result, ensure_ascii=False, indent=2))
        
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(json.dumps(extractor.get_stats(), ensure_ascii=False, indent=2))
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        run_interactive_mode()