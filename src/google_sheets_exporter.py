#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ LLM –∞–Ω–∞–ª–∏–∑–∞ –≤ Google Sheets
"""

import os
import json
import time
import sys
from pathlib import Path
from typing import Dict, List, Optional, Union
from datetime import datetime

# –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import gspread
# –ó–∞–º–µ–Ω–∞ oauth2client –Ω–∞ google.oauth2
from google.oauth2.service_account import Credentials
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class GoogleSheetsExporter:
    """üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ LLM –∞–Ω–∞–ª–∏–∑–∞ –≤ Google Sheets"""
    
    def __init__(self):
        # –ü–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
        current_file = Path(__file__)
        project_root = current_file.parent.parent
        
        self.data_dir = project_root / "data"
        self.results_dir = self.data_dir / "llm_results"
        self.config_dir = project_root / "config"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets API
        scope = ['https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive']
        
        self.credentials_path = self.config_dir / "service_account.json"
        
        print(f"   üìÅ –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {self.credentials_path}")
        
        if not self.credentials_path.exists():
            print(f"‚ùå –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.credentials_path}")
            print("   –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets –Ω—É–∂–µ–Ω —Ñ–∞–π–ª service_account.json")
            self.client = None
            return
            
        try:
            creds = Credentials.from_service_account_file(
                str(self.credentials_path), scopes=scope)
            self.client = gspread.authorize(creds)
            print("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google Sheets API —É—Å–ø–µ—à–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Google Sheets API: {e}")
            self.client = None
        
        # ID —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã (–ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –±–µ—Ä–µ–º –∏–∑ .env)
        self.spreadsheet_id = os.getenv('GOOGLE_SHEET_ID', '')
        
        print(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞ Google Sheets")
        if self.spreadsheet_id:
            print(f"   üîó ID —Ç–∞–±–ª–∏—Ü—ã: {self.spreadsheet_id}")
        else:
            print(f"   ‚ö†Ô∏è ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env (GOOGLE_SHEET_ID)")
    
    def create_new_spreadsheet(self, title: str) -> Optional[str]:
        """üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã Google Sheets"""
        
        if not self.client:
            print("‚ùå –ö–ª–∏–µ–Ω—Ç Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        try:
            spreadsheet = self.client.create(title)
            
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ email (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
            share_email = os.getenv('GOOGLE_SHARE_EMAIL')
            if share_email:
                spreadsheet.share(share_email, perm_type='user', role='writer')
                print(f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {share_email}")
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {title}")
            print(f"   URL: {spreadsheet.url}")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ª–∏—Å—Ç–æ–≤
            self._setup_spreadsheet_structure(spreadsheet)
            
            return spreadsheet.id
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return None
    
    def _setup_spreadsheet_structure(self, spreadsheet):
        """üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        worksheet = spreadsheet.get_worksheet(0)
        worksheet.update_title("–ö–æ–Ω—Ç–∞–∫—Ç—ã")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        headers = [
            "–î–∞—Ç–∞", "–ò–º—è", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", 
            "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–ì–æ—Ä–æ–¥", "Confidence", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "–¢–µ–º–∞ –ø–∏—Å—å–º–∞", "Thread ID"
        ]
        worksheet.update('A1:K1', [headers])
        worksheet.format('A1:K1', {'textFormat': {'bold': True}})
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è –ö–ü
        co_worksheet = spreadsheet.add_worksheet(title="–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", rows=100, cols=20)
        co_headers = [
            "–î–∞—Ç–∞", "–û—Ç", "‚Ññ –ö–ü", "–î–∞—Ç–∞ –ö–ü", "–ö–æ–Ω–µ—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "–ì–æ—Ä–æ–¥", "–ü–æ—Å—Ä–µ–¥–Ω–∏–∫", "–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã", "–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏",
            "–î–æ—Å—Ç–∞–≤–∫–∞", "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ", "–ö—Ç–æ –≤—ã—Å—Ç–∞–≤–∏–ª", "–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
            "–í–∞–ª—é—Ç–∞", "Thread ID"
        ]
        co_worksheet.update('A1:O1', [co_headers])
        co_worksheet.format('A1:O1', {'textFormat': {'bold': True}})
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_worksheet = spreadsheet.add_worksheet(title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", rows=50, cols=10)
        stats_headers = [
            "–î–∞—Ç–∞", "–ü–∏—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", "–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ", 
            "–ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏", "–í–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", "–ö–ü –Ω–∞–π–¥–µ–Ω–æ"
        ]
        stats_worksheet.update('A1:F1', [stats_headers])
        stats_worksheet.format('A1:F1', {'textFormat': {'bold': True}})
    
    def export_results_by_date(self, date: str, results: Dict = None) -> bool:
        """üìä –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
        
        Args:
            date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            results (Dict, optional): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞. –ï—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞.
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        
        if not self.client:
            print("‚ùå –ö–ª–∏–µ–Ω—Ç Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –∏–∑ —Ñ–∞–π–ª–∞
        if results is None:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results_path = self.results_dir / f"llm_analysis_{date.replace('-', '')}.json"
            
            if not results_path.exists():
                print(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            try:
                with open(results_path, 'r', encoding='utf-8') as f:
                    results = json.load(f)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                return False
        
        # –ï—Å–ª–∏ ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if not self.spreadsheet_id:
            title = f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ ({date})"
            self.spreadsheet_id = self.create_new_spreadsheet(title)
            if not self.spreadsheet_id:
                return False
        
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            print(f"   üîó –û—Ç–∫—Ä—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É: {self.spreadsheet_id}")
            spreadsheet = self.client.open_by_key(self.spreadsheet_id)
            print(f"   ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
            print(f"   üë§ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
            self._export_contacts(spreadsheet, results, date)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ö–ü
            print(f"   üíº –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –ö–ü...")
            self._export_commercial_offers(spreadsheet, results, date)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"   üìä –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            self._export_statistics(spreadsheet, results, date)
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {date} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            print(f"   URL —Ç–∞–±–ª–∏—Ü—ã: https://docs.google.com/spreadsheets/d/{self.spreadsheet_id}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets: {e}")
            import traceback
            print(f"   üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
            return False
    
    def _export_contacts(self, spreadsheet, results: Dict, date: str):
        """üë§ –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        
        worksheet = spreadsheet.worksheet("–ö–æ–Ω—Ç–∞–∫—Ç—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email
        all_contacts = []
        for email_result in results.get('emails_results', []):
            email_contacts = email_result.get('contacts', [])
            if email_contacts:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ email –∫ –∫–∞–∂–¥–æ–º—É –∫–æ–Ω—Ç–∞–∫—Ç—É
                for contact in email_contacts:
                    contact_with_metadata = contact.copy()
                    contact_with_metadata['email_thread_id'] = email_result.get('original_email', {}).get('thread_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    contact_with_metadata['email_subject'] = email_result.get('original_email', {}).get('subject', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    contact_with_metadata['email_from'] = email_result.get('original_email', {}).get('from', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    all_contacts.append(contact_with_metadata)
        
        if not all_contacts:
            print("   ‚ÑπÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        contact_rows = []
        for contact in all_contacts:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            row = [
                date,
                contact.get('name', ''),
                contact.get('email', ''),
                contact.get('phone', ''),
                contact.get('organization', ''),
                contact.get('position', ''),
                contact.get('city', ''),
                contact.get('confidence', 0),
                contact.get('priority', {}).get('level', '–Ω–∏–∑–∫–∏–π'),
                contact.get('email_subject', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                contact.get('email_thread_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            ]
            contact_rows.append(row)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        next_row = len(worksheet.get_all_values()) + 1
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if contact_rows:
            cell_range = f"A{next_row}:K{next_row + len(contact_rows) - 1}"
            worksheet.update(cell_range, contact_rows)
            print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contact_rows)}")
    
    def _export_commercial_offers(self, spreadsheet, results: Dict, date: str):
        """üíº –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É"""
        
        worksheet = spreadsheet.worksheet("–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ö–ü –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ email
        all_offers = []
        for email_result in results.get('emails_results', []):
            commercial_analysis = email_result.get('commercial_analysis', {})
            if commercial_analysis and commercial_analysis.get('commercial_offer_found'):
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ email –∫ –ö–ü
                offer_with_metadata = commercial_analysis.copy()
                offer_with_metadata['email_thread_id'] = email_result.get('original_email', {}).get('thread_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                offer_with_metadata['email_subject'] = email_result.get('original_email', {}).get('subject', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                offer_with_metadata['email_from'] = email_result.get('original_email', {}).get('from', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                all_offers.append(offer_with_metadata)
        
        if not all_offers:
            print("   ‚ÑπÔ∏è –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        offer_rows = []
        for offer_data in all_offers:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            row = [
                date,
                offer_data.get('email_from', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                offer_data.get('offer_number', '–±/–Ω'),
                offer_data.get('offer_date', ''),
                offer_data.get('end_user', ''),
                offer_data.get('end_user_city', ''),
                offer_data.get('intermediary', ''),
                offer_data.get('payment_terms', ''),
                offer_data.get('delivery_time', ''),
                offer_data.get('delivery_terms', ''),
                offer_data.get('valid_until', ''),
                offer_data.get('issued_by', ''),
                offer_data.get('total_cost', ''),
                offer_data.get('currency', 'RUB'),
                offer_data.get('email_thread_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            ]
            offer_rows.append(row)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        next_row = len(worksheet.get_all_values()) + 1
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if offer_rows:
            cell_range = f"A{next_row}:O{next_row + len(offer_rows) - 1}"
            worksheet.update(cell_range, offer_rows)
            print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ö–ü: {len(offer_rows)}")
    
    def _export_statistics(self, spreadsheet, results: Dict, date: str):
        """üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        
        worksheet = spreadsheet.worksheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = results.get('statistics', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        stats_row = [
            date,
            stats.get('emails_processed', 0),
            stats.get('total_contacts_found', 0),
            stats.get('emails_with_attachments', 0),
            stats.get('attachments_processed', 0),
            stats.get('commercial_offers_found', 0)
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        next_row = len(worksheet.get_all_values()) + 1
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cell_range = f"A{next_row}:F{next_row}"
        worksheet.update(cell_range, [stats_row])
        print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date}")
    
    def export_multiple_dates(self, start_date: str, end_date: str, results_dict: Dict[str, Dict] = None) -> bool:
        """üìÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        
        Args:
            start_date (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            results_dict (Dict[str, Dict], optional): –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –≥–¥–µ –∫–ª—é—á - –¥–∞—Ç–∞.
                –ï—Å–ª–∏ None, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–æ–≤.
                
        Returns:
            bool: True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        
        from datetime import datetime, timedelta
        import logging
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            start = datetime.strptime(start_date, '%Y-%m-%d')
            end = datetime.strptime(end_date, '%Y-%m-%d')
        except ValueError:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {start_date} - {end_date}")
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
            return False
        
        if start > end:
            logging.error(f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ {start_date} –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π {end_date}")
            print("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–π")
            return False
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        current = start
        success_count = 0
        
        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if not self.spreadsheet_id:
            title = f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ ({start_date} - {end_date})"
            self.spreadsheet_id = self.create_new_spreadsheet(title)
            if not self.spreadsheet_id:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç")
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ results_dict –Ω–µ None –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        if results_dict is None:
            results_dict = {}
            logging.warning("–°–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤")
            print("‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∑–∞–≥—Ä—É–∂–∞—é –∏–∑ —Ñ–∞–π–ª–æ–≤...")
        
        while current <= end:
            date_str = current.strftime('%Y-%m-%d')
            print(f"\nüìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã: {date_str}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
            current_results = results_dict.get(date_str)
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
            if current_results is None:
                results_path = self.results_dir / f"llm_analysis_{date_str.replace('-', '')}.json"
                
                if results_path.exists():
                     # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
                     try:
                         with open(results_path, 'r', encoding='utf-8') as f:
                             file_results = json.load(f)
                         if self.export_results_by_date(date_str, file_results):
                             success_count += 1
                     except Exception as e:
                         logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {results_path}: {e}")
                         print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
                         continue
                else:
                    logging.warning(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    print(f"   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if self.export_results_by_date(date_str, current_results):
                    success_count += 1
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
            current += timedelta(days=1)
        
        print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞—Ç: {success_count}")
        if self.spreadsheet_id:
            print(f"   üîó URL —Ç–∞–±–ª–∏—Ü—ã: https://docs.google.com/spreadsheets/d/{self.spreadsheet_id}")
        
        return success_count > 0


def get_available_dates():
    """üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏–∑ –ø–∞–ø–∫–∏ data/emails"""
    from pathlib import Path
    import os
    
    current_file = Path(__file__)
    project_root = current_file.parent.parent
    emails_dir = project_root / "data" / "emails"
    
    if not emails_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {emails_dir}")
        return []
    
    dates = []
    for item in os.listdir(emails_dir):
        item_path = emails_dir / item
        if item_path.is_dir() and item.startswith('2025-'):
            dates.append(item)
    
    return sorted(dates)

def show_date_menu():
    """üìã –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –¥–∞—Ç"""
    dates = get_available_dates()
    
    if not dates:
        print("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    print("\nüìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã:")
    for i, date in enumerate(dates, 1):
        print(f"   {i:2d}. {date}")
    
    print(f"   {len(dates)+1:2d}. –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
    print(f"   {len(dates)+2:2d}. –í—Å–µ –¥–∞—Ç—ã")
    print("    0. –ù–∞–∑–∞–¥")
    
    while True:
        try:
            choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (–Ω–æ–º–µ—Ä –∏–ª–∏ –¥–∞—Ç—É YYYY-MM-DD): ").strip()
            
            if choice == '0':
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞—Ç—É –Ω–∞–ø—Ä—è–º—É—é
            if len(choice) == 10 and choice.count('-') == 2:
                # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                try:
                    from datetime import datetime
                    datetime.strptime(choice, '%Y-%m-%d')
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –¥–∞—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
                    if choice in dates:
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {choice}")
                        return [choice]
                    else:
                        print(f"‚ùå –î–∞—Ç–∞ {choice} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç–∞—Ö")
                        print("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ")
                        continue
                except ValueError:
                    # –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–æ–º–µ—Ä
                    pass
            
            choice_num = int(choice)
            
            if 1 <= choice_num <= len(dates):
                return [dates[choice_num - 1]]
            elif choice_num == len(dates) + 1:
                # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
                print("\nüìä –í—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç:")
                start_idx = int(input(f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (1-{len(dates)}): ")) - 1
                end_idx = int(input(f"–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (1-{len(dates)}): ")) - 1
                
                if 0 <= start_idx <= end_idx < len(dates):
                    return dates[start_idx:end_idx + 1]
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
                    continue
            elif choice_num == len(dates) + 2:
                return dates
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                continue
                
        except (ValueError, IndexError) as e:
            print(f"‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–æ—à–∏–±–∫–∞: {e})")
            continue
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            continue

def run_interactive_mode():
    """üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    print("\n" + "="*60)
    print("üìä GOOGLE SHEETS –≠–ö–°–ü–û–†–¢–ï–† - –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    print("="*60)
    
    exporter = GoogleSheetsExporter()
    
    if not exporter.client:
        print("\n‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Google Sheets API")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª service_account.json –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ config/")
        return
    
    while True:
        print("\nüìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        print("   1. –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã")
        print("   2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
        print("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
        print("   4. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü–µ")
        print("   0. –í—ã—Ö–æ–¥")
        
        choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–æ–º–µ—Ä): ").strip()
        
        if choice == '0':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        elif choice == '1':
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            selected_dates = show_date_menu()
            if selected_dates:
                export_selected_dates(exporter, selected_dates)
        elif choice == '2':
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
            create_new_spreadsheet_interactive(exporter)
        elif choice == '3':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            test_connection(exporter)
        elif choice == '4':
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
            show_spreadsheet_info(exporter)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def export_selected_dates(exporter, dates):
    """üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã"""
    print(f"\nüöÄ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {len(dates)} –¥–∞—Ç(—ã)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if not exporter.spreadsheet_id:
        print("‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é...")
        title = f"–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ({dates[0]} - {dates[-1]})"
        spreadsheet_id = exporter.create_new_spreadsheet(title)
        if spreadsheet_id:
            exporter.spreadsheet_id = spreadsheet_id
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {title}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
            return
    
    success_count = 0
    
    for date in dates:
        print(f"\nüìÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}...")
        
        try:
            success = exporter.export_results_by_date(date)
            if success:
                print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {date} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
                success_count += 1
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {date}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {date}: {e}")
    
    print(f"\nüéâ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞—Ç: {success_count}/{len(dates)}")
    
    if exporter.spreadsheet_id:
        print(f"üîó URL —Ç–∞–±–ª–∏—Ü—ã: https://docs.google.com/spreadsheets/d/{exporter.spreadsheet_id}")

def create_new_spreadsheet_interactive(exporter):
    """üìù –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π Google Sheets —Ç–∞–±–ª–∏—Ü—ã")
    
    title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ").strip()
    if not title:
        title = f"–ö–æ–Ω—Ç–∞–∫—Ç—ã LLM –∞–Ω–∞–ª–∏–∑ {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        print(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {title}")
    
    print(f"\nüöÄ –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É '{title}'...")
    
    try:
        spreadsheet_id = exporter.create_new_spreadsheet(title)
        if spreadsheet_id:
            exporter.spreadsheet_id = spreadsheet_id
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üîó URL: https://docs.google.com/spreadsheets/d/{spreadsheet_id}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")

def test_connection(exporter):
    """üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets...")
    
    try:
        if exporter.client:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
            spreadsheets = exporter.client.openall()
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(spreadsheets)}")
            
            if spreadsheets:
                print("\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–∞–±–ª–∏—Ü:")
                for i, sheet in enumerate(spreadsheets[:5], 1):
                    print(f"   {i}. {sheet.title}")
        else:
            print("‚ùå –ö–ª–∏–µ–Ω—Ç Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def show_spreadsheet_info(exporter):
    """üìä –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü–µ"""
    print("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü–µ:")
    
    if not exporter.spreadsheet_id:
        print("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
        return
    
    try:
        spreadsheet = exporter.client.open_by_key(exporter.spreadsheet_id)
        print(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {spreadsheet.title}")
        print(f"üîó ID: {exporter.spreadsheet_id}")
        print(f"üîó URL: https://docs.google.com/spreadsheets/d/{exporter.spreadsheet_id}")
        
        worksheets = spreadsheet.worksheets()
        print(f"üìÑ –õ–∏—Å—Ç–æ–≤: {len(worksheets)}")
        
        for i, worksheet in enumerate(worksheets, 1):
            print(f"   {i}. {worksheet.title} ({worksheet.row_count} —Å—Ç—Ä–æ–∫, {worksheet.col_count} —Å—Ç–æ–ª–±—Ü–æ–≤)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ: {e}")

def main():
    """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] == '--test':
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        print("üß™ –ó–∞–ø—É—Å–∫ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
        
        print("\n" + "="*60)
        print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–ö–°–ü–û–†–¢–ê –í GOOGLE SHEETS")
        print("="*60)
        
        exporter = GoogleSheetsExporter()
        
        if not exporter.client:
            print("\n‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Google Sheets API")
            return
        
        # –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        test_start_date = "2025-07-04"
        test_end_date = "2025-07-04"
        
        print(f"\nüìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç: {test_start_date} - {test_end_date}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ ID –Ω–µ —É–∫–∞–∑–∞–Ω
        if not exporter.spreadsheet_id:
            title = f"–¢–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ({test_start_date} - {test_end_date})"
            spreadsheet_id = exporter.create_new_spreadsheet(title)
            if spreadsheet_id:
                exporter.spreadsheet_id = spreadsheet_id
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
                return
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        result = exporter.export_multiple_dates(test_start_date, test_end_date)
        
        if result:
            print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ü—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        run_interactive_mode()


if __name__ == '__main__':
    main()
