#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üßπ –ú–æ–¥—É–ª—å –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å–µ–º –æ—Ç HTML –º—É—Å–æ—Ä–∞ –∏ Base64 –¥–∞–Ω–Ω—ã—Ö
–í–µ—Ä—Å–∏—è: 1.0
–î–∞—Ç–∞: 2025-01-21

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –£–¥–∞–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö blockquote —Å Base64 –¥–∞–Ω–Ω—ã–º–∏
- –û—á–∏—Å—Ç–∫–∞ HTML —Ç–µ–≥–æ–≤ –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
- –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–æ–¥–ø–∏—Å–µ–π
- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö —Ü–∏—Ç–∞—Ç
"""

import re
import html
from typing import Optional, List, Dict
from pathlib import Path
import logging

class EmailTextCleaner:
    """üßπ –ö–ª–∞—Å—Å –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å–µ–º"""
    
    def __init__(self, logger: Optional[logging.Logger] = None):
        self.logger = logger or logging.getLogger(__name__)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.base64_patterns = [
            r'sid=YWVzX3NpZDp7[^"]*',  # Base64 –¥–∞–Ω–Ω—ã–µ –≤ sid –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            r'data:[^;]*;base64,[A-Za-z0-9+/=]+',  # Data URLs —Å Base64
            r'[A-Za-z0-9+/]{50,}={0,2}',  # –î–ª–∏–Ω–Ω—ã–µ Base64 —Å—Ç—Ä–æ–∫–∏
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã HTML –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.html_cleanup_patterns = [
            (r'<img[^>]*>', ''),  # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            (r'<div[^>]*class="[^"]*moz-signature[^"]*"[^>]*>.*?</div>', ''),  # –ü–æ–¥–ø–∏—Å–∏ Mozilla
            (r'<div[^>]*class="[^"]*signature[^"]*"[^>]*>.*?</div>', ''),  # –î—Ä—É–≥–∏–µ –ø–æ–¥–ø–∏—Å–∏
            (r'<style[^>]*>.*?</style>', ''),  # CSS —Å—Ç–∏–ª–∏
            (r'<script[^>]*>.*?</script>', ''),  # JavaScript
            (r'<!--.*?-->', ''),  # HTML –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            (r'<meta[^>]*>', ''),  # Meta —Ç–µ–≥–∏
            (r'<link[^>]*>', ''),  # Link —Ç–µ–≥–∏
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        self.text_cleanup_patterns = [
            (r'\n\s*\n\s*\n+', '\n\n'),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            (r'\s{3,}', ' '),  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
            (r'&[a-zA-Z0-9#]+;', ' '),  # HTML entities
            (r'https://webattach\.mail\.yandex\.net[^\s]*', ''),  # –°—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è Yandex
            (r'https://[^\s]*\.png[^\s]*', ''),  # –°—Å—ã–ª–∫–∏ –Ω–∞ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            (r'https://[^\s]*\.jpg[^\s]*', ''),  # –°—Å—ã–ª–∫–∏ –Ω–∞ JPG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            (r'https://[^\s]*\.gif[^\s]*', ''),  # –°—Å—ã–ª–∫–∏ –Ω–∞ GIF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        ]
        
        # –ü–æ–¥–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.signature_patterns = [
            r'--\s*$',
            r'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.*',
            r'Sent from my .*',
            r'–° —É–≤–∞–∂–µ–Ω–∏–µ–º,?\s*$',
            r'Best regards,?\s*$',
            r'Regards,?\s*$',
        ]
    
    def clean_html_aggressively(self, html_text: str) -> str:
        """üßπ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML —Å —É–¥–∞–ª–µ–Ω–∏–µ–º Base64 –¥–∞–Ω–Ω—ã—Ö"""
        if not html_text:
            return ""
        
        text = html_text
        original_length = len(text)
        
        self.logger.debug(f"üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É HTML —Ç–µ–∫—Å—Ç–∞ ({original_length} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # 1. –£–¥–∞–ª—è–µ–º Base64 –¥–∞–Ω–Ω—ã–µ
        for pattern in self.base64_patterns:
            before_len = len(text)
            text = re.sub(pattern, '', text, flags=re.IGNORECASE | re.DOTALL)
            removed = before_len - len(text)
            if removed > 0:
                self.logger.debug(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ Base64 –¥–∞–Ω–Ω—ã—Ö: {removed} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 2. –£–¥–∞–ª—è–µ–º blockquote —Ç–æ–ª—å–∫–æ —Å Base64 –¥–∞–Ω–Ω—ã–º–∏
        before_len = len(text)
        # –ò—â–µ–º blockquote —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ Base64
        text = re.sub(r'<blockquote[^>]*>[^<]*[A-Za-z0-9+/]{100,}[^<]*</blockquote>', '', text, flags=re.IGNORECASE | re.DOTALL)
        removed = before_len - len(text)
        if removed > 0:
            self.logger.debug(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ blockquote —Å Base64: {removed} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 3. –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ HTML –±–ª–æ–∫–∏
        for pattern, replacement in self.html_cleanup_patterns:
            before_len = len(text)
            text = re.sub(pattern, replacement, text, flags=re.IGNORECASE | re.DOTALL)
            removed = before_len - len(text)
            if removed > 0:
                self.logger.debug(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ HTML –±–ª–æ–∫–æ–≤: {removed} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 4. –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è HTML —Ç–µ–≥–∏
        before_len = len(text)
        text = re.sub(r'<[^>]+>', '', text)
        removed = before_len - len(text)
        if removed > 0:
            self.logger.debug(f"   üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ HTML —Ç–µ–≥–æ–≤: {removed} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # 5. –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
        text = html.unescape(text)
        
        # 6. –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –º—É—Å–æ—Ä–∞
        for pattern, replacement in self.text_cleanup_patterns:
            text = re.sub(pattern, replacement, text, flags=re.MULTILINE)
        
        # 7. –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏
        text = self.remove_signatures(text)
        
        # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
        text = text.strip()
        
        final_length = len(text)
        reduction = original_length - final_length
        reduction_percent = (reduction / original_length * 100) if original_length > 0 else 0
        
        self.logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {original_length} ‚Üí {final_length} —Å–∏–º–≤–æ–ª–æ–≤ (-{reduction_percent:.1f}%)")
        
        return text
    
    def remove_signatures(self, text: str) -> str:
        """‚úÇÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        lines = text.split('\n')
        cleaned_lines = []
        
        for line in lines:
            line = line.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å—å—é
            is_signature = False
            for pattern in self.signature_patterns:
                if re.match(pattern, line, re.IGNORECASE):
                    is_signature = True
                    break
            
            if not is_signature:
                cleaned_lines.append(line)
        
        return '\n'.join(cleaned_lines)
    
    def extract_meaningful_content(self, text: str, max_length: int = 10000) -> str:
        """üìù –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        lines = [line.strip() for line in text.split('\n') if line.strip()]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        meaningful_lines = []
        for line in lines:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ (–º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤)
            if len(line) < 3:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏
            if re.match(r'^[^a-zA-Z–∞-—è–ê-–Ø0-9]*$', line):
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏ –∏ —Ç–æ—á–∫–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü)
            if re.match(r'^[0-9\.\s]*$', line):
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏
            if line not in meaningful_lines:
                meaningful_lines.append(line)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
        result = '\n'.join(meaningful_lines)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        result = re.sub(r'\n{3,}', '\n\n', result)
        
        if len(result) > max_length:
            result = result[:max_length] + "\n\n[–¢–ï–ö–°–¢ –û–ë–†–ï–ó–ê–ù –î–õ–Ø –≠–ö–û–ù–û–ú–ò–ò –¢–û–ö–ï–ù–û–í]"
        
        return result
    
    def clean_email_body(self, body_text: str, max_length: int = 10000) -> Dict[str, any]:
        """üîß –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        if not body_text:
            return {
                'cleaned_text': '',
                'original_length': 0,
                'final_length': 0,
                'reduction_percent': 0,
                'status': 'empty_input'
            }
        
        original_length = len(body_text)
        
        # –≠—Ç–∞–ø 1: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ HTML
        cleaned_html = self.clean_html_aggressively(body_text)
        
        # –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        meaningful_content = self.extract_meaningful_content(cleaned_html, max_length)
        
        final_length = len(meaningful_content)
        reduction_percent = ((original_length - final_length) / original_length * 100) if original_length > 0 else 0
        
        return {
            'cleaned_text': meaningful_content,
            'original_length': original_length,
            'final_length': final_length,
            'reduction_percent': reduction_percent,
            'status': 'success' if meaningful_content else 'no_content_extracted'
        }

def test_cleaner():
    """üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∏—Ç–µ–ª—è —Ç–µ–∫—Å—Ç–∞"""
    import logging
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.DEBUG)
    logger = logging.getLogger(__name__)
    
    # –°–æ–∑–¥–∞–µ–º –æ—á–∏—Å—Ç–∏—Ç–µ–ª—å
    cleaner = EmailTextCleaner(logger)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π HTML —Å Base64 –¥–∞–Ω–Ω—ã–º–∏
    test_html = '''
    <blockquote>
        <div>–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</div>
        <img src="https://webattach.mail.yandex.net/message_part_real/_.png?sid=YWVzX3NpZDp7ImFlc0tleUlkIjoiMTc4IiwiaG1hY0tleUlkIjoiMTc4IiwiaXZCYXNlNjQiOiJKZXkwYXlJOWRGbGVGUks0a2syZ2J3PT0iLCJzaWRCYXNlNjQiOiJ4cTFqdDdlNDh6eUFXczI3NjNpSjd6TWxjUTNnY0tkSzljeDE3RjB6YVo5TGNuNUxFdERTVERWa2xTY2ZpOS9hUVZIdUJHc3NpWjgrNWhmVCtPSWxSYStkam5ibE1zdTg5UmFBa2J2TjdxRTY5Q1VwSUxwU0I1Yy94TWZTK2Uxelk3V3RVWnB3Rnd5aXA0M1NSRjF6ZGc9PSIsImhtYWNCYXNlNjQiOiJtYmcyYjdtK3dUK21kOXZIWFk1am1ZajRITytqUmtJQVZ0cVhhWk8vdVlzPSJ9" />
        <blockquote>
            <div>–í–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞</div>
            <div class="moz-signature">-- <br />–ü–æ–¥–ø–∏—Å—å</div>
        </blockquote>
    </blockquote>
    <br /><br />-- <br />–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å –ü–æ—á—Ç—ã
    '''
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
    result = cleaner.clean_email_body(test_html)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {result['original_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {result['final_length']} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"–°–æ–∫—Ä–∞—â–µ–Ω–∏–µ: {result['reduction_percent']:.1f}%")
    print(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{result['cleaned_text']}'")

if __name__ == '__main__':
    test_cleaner()