#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîå –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OCRProcessor —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º IntegratedLLMProcessor
"""

from pathlib import Path
from typing import Dict, List, Optional
from ocr_processor import OCRProcessor

class OCRProcessorAdapter:
    """üîå –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ OCRProcessor —Å AttachmentProcessor –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self):
        self.ocr_processor = OCRProcessor()
        self.data_dir = Path("data")
        self.attachments_dir = self.data_dir / "attachments"
        
    def process_email_attachments(self, email: Dict, email_loader) -> Dict:
        """üìé –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ OCRProcessor"""
        
        attachments = email.get('attachments', [])
        if not attachments:
            return {
                'attachments_processed': 0,
                'attachments_text': [],
                'total_text_length': 0
            }
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: date_folder (—É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD) -> parsed_date -> date
        date_for_cache = email.get('date_folder')
        
        if not date_for_cache:
            # –ü—Ä–æ–±—É–µ–º parsed_date
            parsed_date = email.get('parsed_date', '')
            if parsed_date:
                try:
                    from datetime import datetime
                    # parsed_date –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO: "2025-07-01T14:37:39+07:00"
                    if 'T' in parsed_date:
                        date_for_cache = parsed_date.split('T')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                except Exception:
                    pass
        
        if not date_for_cache:
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–∞—Ä—Å–∏–º –ø–æ–ª–µ date
            email_date = email.get('date', '')
            if email_date:
                try:
                    from datetime import datetime
                    if isinstance(email_date, str):
                        # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
                        for fmt in ['%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y', '%Y/%m/%d']:
                            try:
                                parsed_date = datetime.strptime(email_date[:10], fmt)
                                date_for_cache = parsed_date.strftime('%Y-%m-%d')
                                break
                            except ValueError:
                                continue
                        
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Å—Ç—Ä–æ–∫–∏
                        if not date_for_cache and len(email_date) >= 10:
                            date_part = email_date[:10]
                            if date_part.count('-') == 2 or date_part.count('/') == 2 or date_part.count('.') == 2:
                                date_for_cache = date_part.replace('/', '-').replace('.', '-')
                except Exception:
                    pass
        
        print(f"   üìé –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(attachments)} –∏–∑ {len(attachments)} –≤–ª–æ–∂–µ–Ω–∏–π")
        if date_for_cache:
            print(f"   üìÖ –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {date_for_cache}")
        
        processed_attachments = []
        total_text_length = 0
        
        for i, attachment in enumerate(attachments, 1):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–ª–æ–∂–µ–Ω–∏—è
                file_path_str = attachment.get('file_path', '')
                if not file_path_str:
                    print(f"      ‚ö†Ô∏è {i}/{len(attachments)}: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω")
                    continue
                
                attachment_path = Path(file_path_str)
                if not attachment_path.exists():
                    print(f"      ‚ö†Ô∏è {i}/{len(attachments)}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - {attachment_path}")
                    continue
                
                print(f"      ‚úÖ {i}/{len(attachments)}: {attachment_path.name}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ OCRProcessor
                ocr_result = self.ocr_processor.extract_text_from_file(attachment_path, date=date_for_cache)
                
                if ocr_result.get('success'):
                    text = ocr_result.get('text', '')
                    method = ocr_result.get('method', 'unknown')
                    confidence = ocr_result.get('confidence', 0)
                    
                    processed_attachments.append({
                        'file_name': attachment_path.name,
                        'file_path': str(attachment_path),
                        'text': text,
                        'method': method,
                        'confidence': confidence,
                        'success': True
                    })
                    
                    total_text_length += len(text)
                    print(f"         üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤ ({method}, confidence: {confidence:.2%})")
                else:
                    error = ocr_result.get('error', 'Unknown error')
                    print(f"         ‚ùå –û—à–∏–±–∫–∞ OCR: {error}")
                    
                    processed_attachments.append({
                        'file_name': attachment_path.name,
                        'file_path': str(attachment_path),
                        'text': '',
                        'method': 'failed',
                        'confidence': 0,
                        'success': False,
                        'error': error
                    })
                    
            except Exception as e:
                print(f"      ‚ùå {i}/{len(attachments)}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ - {e}")
                processed_attachments.append({
                    'file_name': attachment.get('file_name', 'unknown'),
                    'file_path': attachment.get('file_path', ''),
                    'text': '',
                    'method': 'error',
                    'confidence': 0,
                    'success': False,
                    'error': str(e)
                })
        
        return {
            'attachments_processed': len([a for a in processed_attachments if a['success']]),
            'attachments_text': processed_attachments,
            'total_text_length': total_text_length
        }
    
    def combine_email_with_attachments(self, email: Dict, attachments_result: Dict) -> str:
        """üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –≤–ª–æ–∂–µ–Ω–∏–π"""
        
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
        email_text = email.get('body', '') or email.get('text', '') or ''
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        combined_text = f"–¢–ï–ú–ê: {email.get('subject', '')}\n"
        combined_text += f"–û–¢: {email.get('from', '')}\n"
        combined_text += f"–ö: {email.get('to', '')}\n"
        combined_text += f"–î–ê–¢–ê: {email.get('date', '')}\n"
        combined_text += f"THREAD ID: {email.get('thread_id', '')}\n"
        combined_text += "=" * 50 + "\n\n"
        combined_text += email_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤–ª–æ–∂–µ–Ω–∏–π
        attachments_text = attachments_result.get('attachments_text', [])
        if attachments_text:
            combined_text += "\n\n" + "=" * 50 + "\n"
            combined_text += "–°–û–î–ï–†–ñ–ò–ú–û–ï –í–õ–û–ñ–ï–ù–ò–ô:\n"
            combined_text += "=" * 50 + "\n\n"
            
            for i, attachment in enumerate(attachments_text, 1):
                if attachment.get('success') and attachment.get('text'):
                    combined_text += f"--- –í–õ–û–ñ–ï–ù–ò–ï {i}: {attachment['file_name']} ---\n"
                    combined_text += f"–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {attachment['method']}\n"
                    combined_text += f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {attachment['confidence']:.2%}\n"
                    combined_text += "=" * 30 + "\n"
                    combined_text += attachment['text']
                    combined_text += "\n\n"
        
        return combined_text
