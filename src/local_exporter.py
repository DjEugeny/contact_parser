#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ CSV/Excel —Ñ–æ—Ä–º–∞—Ç
"""

import json
import csv
import logging
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Optional


class LocalDataExporter:
    """üìä –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã"""
    
    def __init__(self, export_dir: str = "data/exports"):
        self.export_dir = Path(export_dir)
        self.export_dir.mkdir(parents=True, exist_ok=True)
        
        print(f"üìä –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"   üìÅ –ü–∞–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {self.export_dir.absolute()}")
    
    def export_results_by_date(self, date: str, results: Dict) -> bool:
        """üìÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É"""
        
        try:
            print(f"\nüìä –õ–û–ö–ê–õ–¨–ù–´–ô –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• –ó–ê {date}")
            print("=" * 60)
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            csv_success = self._export_to_csv(date, results)
            json_success = self._export_to_json(date, results)
            
            if csv_success or json_success:
                print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"   üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.export_dir.absolute()}")
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False
            
    def export_multiple_dates(self, start_date: str, end_date: str, results_dict: Dict[str, Dict] = None) -> Dict[str, bool]:
        """üìÖ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ CSV –∏ JSON
        
        Args:
            start_date (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            results_dict (Dict[str, Dict], optional): –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –≥–¥–µ –∫–ª—é—á - –¥–∞—Ç–∞.
                –ï—Å–ª–∏ None, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è.
                
        Returns:
            Dict[str, bool]: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞, –≥–¥–µ –∫–ª—é—á - –¥–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
        """
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã
        try:
            start = datetime.strptime(start_date, '%Y-%m-%d')
            end = datetime.strptime(end_date, '%Y-%m-%d')
        except ValueError:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ: {start_date} - {end_date}")
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
            return {}
        
        if start > end:
            logging.error(f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ {start_date} –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π {end_date}")
            print("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–π")
            return {}
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ results_dict –Ω–µ None
        if results_dict is None:
            logging.warning("–°–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ")
            print("‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return {}
            
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
        range_dir = self.export_dir / f"{start_date.replace('-', '')}_{end_date.replace('-', '')}"
        range_dir.mkdir(exist_ok=True)
            
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–∞—Ç–∞–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        current = start
        export_results = {}
        
        while current <= end:
            date_str = current.strftime('%Y-%m-%d')
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            current_results = results_dict.get(date_str)
            
            if current_results:
                print(f"üìÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ {date_str}")
                export_results[date_str] = self.export_results_by_date(date_str, current_results)
            else:
                logging.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {date_str}")
                print(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {date_str}")
                export_results[date_str] = False
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
            current += timedelta(days=1)
            
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π JSON —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        try:
            summary_path = range_dir / f"summary_{start_date.replace('-', '')}_{end_date.replace('-', '')}.json"
            with open(summary_path, 'w', encoding='utf-8') as f:
                json.dump({
                    'start_date': start_date,
                    'end_date': end_date,
                    'export_results': export_results,
                    'success_count': sum(1 for success in export_results.values() if success),
                    'total_count': len(export_results),
                    'export_time': datetime.now().isoformat()
                }, f, ensure_ascii=False, indent=2)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç: {summary_path}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            
        return export_results
    
    def _export_to_csv(self, date: str, results: Dict) -> bool:
        """üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            contacts_file = self.export_dir / f"contacts_{date.replace('-', '')}.csv"
            contacts_data = self._extract_contacts_data(results)
            
            if contacts_data:
                with open(contacts_file, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.DictWriter(f, fieldnames=contacts_data[0].keys())
                    writer.writeheader()
                    writer.writerows(contacts_data)
                print(f"   ‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {contacts_file.name}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_file = self.export_dir / f"statistics_{date.replace('-', '')}.csv"
            stats_data = self._extract_statistics_data(results, date)
            
            with open(stats_file, 'w', newline='', encoding='utf-8') as f:
                writer = csv.DictWriter(f, fieldnames=stats_data.keys())
                writer.writeheader()
                writer.writerow(stats_data)
            print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤: {stats_file.name}")
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–µ—Ç–∞–ª–µ–π email
            email_details_file = self.export_dir / f"email_details_{date.replace('-', '')}.csv"
            email_details_data = self._extract_email_details(results)
            
            if email_details_data:
                with open(email_details_file, 'w', newline='', encoding='utf-8') as f:
                    writer = csv.DictWriter(f, fieldnames=email_details_data[0].keys())
                    writer.writeheader()
                    writer.writerows(email_details_data)
                print(f"   ‚úÖ –î–µ—Ç–∞–ª–∏ email —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤: {email_details_file.name}")
            
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")
            return False
    
    def _export_to_json(self, date: str, results: Dict) -> bool:
        """üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç"""
        
        try:
            json_file = self.export_dir / f"export_{date.replace('-', '')}.json"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_data = {
                "export_info": {
                    "exported_at": datetime.now().isoformat(),
                    "export_format": "local_json",
                    "original_date": date
                },
                "data": results
            }
            
            with open(json_file, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            print(f"   ‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON: {json_file.name}")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON: {e}")
            return False
    
    def _extract_contacts_data(self, results: Dict) -> List[Dict]:
        """üë§ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        
        contacts_data = []
        
        for email_result in results.get('emails_results', []):
            email_contacts = email_result.get('contacts', [])
            if email_contacts:
                for contact in email_contacts:
                    contact_row = {
                        "–î–∞—Ç–∞": results.get('processing_date', ''),
                        "–ò–º—è": contact.get('name', ''),
                        "Email": contact.get('email', ''),
                        "–¢–µ–ª–µ—Ñ–æ–Ω": contact.get('phone', ''),
                        "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è": contact.get('organization', ''),
                        "–î–æ–ª–∂–Ω–æ—Å—Ç—å": contact.get('position', ''),
                        "–ì–æ—Ä–æ–¥": contact.get('city', ''),
                        "Confidence": contact.get('confidence', 0),
                        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": contact.get('priority', {}).get('level', '–Ω–∏–∑–∫–∏–π'),
                        "–¢–µ–º–∞ –ø–∏—Å—å–º–∞": email_result.get('original_email', {}).get('subject', ''),
                        "Thread ID": email_result.get('original_email', {}).get('thread_id', ''),
                        "–û—Ç": email_result.get('original_email', {}).get('from', '')
                    }
                    contacts_data.append(contact_row)
        
        return contacts_data
    
    def _extract_statistics_data(self, results: Dict, date: str) -> Dict:
        """üìä –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        
        stats = results.get('statistics', {})
        
        return {
            "–î–∞—Ç–∞": date,
            "–ü–∏—Å–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ": stats.get('emails_processed', 0),
            "–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ": stats.get('total_contacts_found', 0),
            "–ü–∏—Å–µ–º —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏": stats.get('emails_with_attachments', 0),
            "–í–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ": stats.get('attachments_processed', 0),
            "–ö–ü –Ω–∞–π–¥–µ–Ω–æ": stats.get('commercial_offers_found', 0),
            "–û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏": stats.get('processing_errors', 0),
            "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å–µ–∫)": stats.get('processing_time_seconds', 0)
        }
    
    def _extract_email_details(self, results: Dict) -> List[Dict]:
        """üìß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π email –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        
        email_details = []
        
        for email_result in results.get('emails_results', []):
            email_row = {
                "Thread ID": email_result.get('original_email', {}).get('thread_id', ''),
                "–û—Ç": email_result.get('original_email', {}).get('from', ''),
                "–¢–µ–º–∞": email_result.get('original_email', {}).get('subject', ''),
                "–î–∞—Ç–∞": email_result.get('original_email', {}).get('date', ''),
                "–û–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞": email_result.get('combined_text_length', 0),
                "–í–ª–æ–∂–µ–Ω–∏–π": email_result.get('attachments_processed', 0),
                "–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ": len(email_result.get('contacts', [])),
                "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ": email_result.get('processed_at', '')
            }
            email_details.append(email_row)
        
        return email_details


def main():
    """üöÄ –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üìä –¢–ï–°–¢ –õ–û–ö–ê–õ–¨–ù–û–ì–û –≠–ö–°–ü–û–†–¢–ï–†–ê")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
    exporter = LocalDataExporter()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    test_date = "2025-07-28"
    test_file = Path("data/llm_results") / f"llm_analysis_{test_date.replace('-', '')}.json"
    
    if test_file.exists():
        print(f"üìÅ –¢–µ—Å—Ç–∏—Ä—É—é –Ω–∞ —Ñ–∞–π–ª–µ: {test_file}")
        
        with open(test_file, 'r', encoding='utf-8') as f:
            test_results = json.load(f)
        
        success = exporter.export_results_by_date(test_date, test_results)
        
        if success:
            print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")


if __name__ == '__main__':
    main()
