#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîÑ –ú–æ—Å—Ç –º–µ–∂–¥—É LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º –∏ Google Sheets —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–º
"""

import sys
import time
import json
import subprocess
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from integrated_llm_processor import IntegratedLLMProcessor
from google_sheets_exporter import GoogleSheetsExporter
from local_exporter import LocalDataExporter


class LLM_Sheets_Bridge:
    """üîÑ –ú–æ—Å—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OCR + LLM + Sheets"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º —Ç–µ—Å—Ç–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
        self.processor = IntegratedLLMProcessor(test_mode=False)
        
        # GoogleSheetsExporter —Ç–µ–ø–µ—Ä—å —Å–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç–∏
        self.exporter = GoogleSheetsExporter()
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä –∫–∞–∫ fallback
        self.local_exporter = LocalDataExporter()
        
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Å—Ç–∞ OCR + LLM + Google Sheets")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Sheets API
        if self.exporter.client:
            print(f"   ‚úÖ Google Sheets API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print(f"   ‚ùå Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print(f"   üîë –ü—É—Ç—å –∫ service_account.json: {self.exporter.credentials_path}")
        
        print(f"   üìä –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä: ‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
    def _auto_fetch_emails(self, date: str) -> bool:
        """üìß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–∏—Å–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
        
        Args:
            date: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        try:
            print(f"üìß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º –∑–∞ {date}...")
            
            # –ü—É—Ç—å –∫ advanced_email_fetcher.py
            fetcher_path = Path(__file__).parent / "advanced_email_fetcher.py"
            
            if not fetcher_path.exists():
                print(f"‚ùå –§–∞–π–ª {fetcher_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º advanced_email_fetcher.py —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π
            cmd = [sys.executable, str(fetcher_path), "--date", date]
            print(f"   üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            if result.returncode == 0:
                print(f"   ‚úÖ –ü–∏—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {date}")
                if result.stdout:
                    print(f"   üìù –í—ã–≤–æ–¥: {result.stdout.strip()}")
                return True
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            print(f"   ‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Å–µ–º –∑–∞ {date}")
            return False
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Å–µ–º: {e}")
            return False
    
    def process_and_export(self, date: str, create_new_sheet: bool = False, max_emails: int = None) -> bool:
        """üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –æ–¥–Ω—É –¥–∞—Ç—É
        
        Args:
            date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            create_new_sheet (bool): –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            max_emails (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        
        import logging
        logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}")
        
        print(f"\n{'='*60}")
        print(f"üîÑ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê {date}")
        print(f"{'='*60}")
        
        # –®–∞–≥ 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ LLM
        print("\nüìÑ –®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ –ø–∏—Å–µ–º –∏ –≤–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é LLM")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—á—Ç—ã
        try:
            llm_results = self.processor.process_emails_by_date(date, max_emails=max_emails)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∏—Å—å–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            emails_processed = llm_results.get('statistics', {}).get('emails_processed', 0)
            
            if emails_processed == 0:
                print(f"üì≠ –ü–∏—Å—å–º–∞ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
                if self._auto_fetch_emails(date):
                    print(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å–µ–º...")
                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    llm_results = self.processor.process_emails_by_date(date, max_emails=max_emails)
                    emails_processed = llm_results.get('statistics', {}).get('emails_processed', 0)
                    
                    if emails_processed == 0:
                        print(f"üì≠ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∏—Å—å–º–∞ –∑–∞ {date} –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        return False
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Å—å–º–∞ –∑–∞ {date}")
                    return False
            
            if not llm_results or 'emails_processed' not in llm_results.get('statistics', {}):
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ {date}")
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ {date}")
                return False
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∞—Ç—Ä–∏–±—É—Ç–µ statistics –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ _print_stats
            self.processor.statistics = llm_results.get('statistics', {})
            self.processor.contacts = llm_results.get('all_contacts', [])
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã
            if llm_results.get('summary', {}).get('total_contacts', 0) == 0:
                logging.warning(f"–ó–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                print(f"‚ö†Ô∏è –ó–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ –ø–∏—Å—å–º–∞ –∑–∞ —ç—Ç—É –¥–∞—Ç—É")
                
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self._print_stats()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
        
        # –®–∞–≥ 2: –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google Sheets
        print("\nüìä –®–ê–ì 2: –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google Sheets")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Sheets API
        if not self.exporter.client:
            logging.warning("Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
            print("‚ùå Google Sheets API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª config/service_account.json –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API")
            print("  –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...")
            return self._fallback_to_local_export(date, llm_results)
        
        try:
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            if create_new_sheet:
                title = f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ ({date})"
                try:
                    sheet_id = self.exporter.create_new_spreadsheet(title)
                    if sheet_id:
                        self.exporter.spreadsheet_id = sheet_id
                        logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {title} —Å ID: {sheet_id}")
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {title}")
                        print(f"   ID: {sheet_id}")
                    else:
                        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É Google Sheets")
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
                        print("  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                        print("  1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ service_account.json")
                        print("  2. Google Drive API –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏ Google")
                        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                        print("  4. –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Google Drive")
                        print("  –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...")
                        return self._fallback_to_local_export(date, llm_results)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
                    print("  –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Google Drive API –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:")
                    print("  https://console.developers.google.com/apis/api/drive.googleapis.com")
                    print("  –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...")
                    return self._fallback_to_local_export(date, llm_results)
            
            # –ü—ã—Ç–∞–µ–º—Å—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ Google Sheets
            try:
                # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Ç–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞
                export_result = self.exporter.export_results_by_date(date, llm_results)
                
                if export_result:
                    logging.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {date} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google Sheets")
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {date} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google Sheets")
                    return True
                else:
                    logging.warning(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {date}, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
                    print(f"‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
                    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
                    local_export_result = self._fallback_to_local_export(date, llm_results)
                    return local_export_result
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets –∑–∞ {date}: {e}")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets: {e}")
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...")
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
                local_export_result = self._fallback_to_local_export(date, llm_results)
                return local_export_result
                
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {date}: {e}")
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("  –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...")
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
            local_export_result = self._fallback_to_local_export(date, llm_results)
            return local_export_result
    
    def _fallback_to_local_export(self, date: str, llm_results=None) -> bool:
        """üìä Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Sheets
        
        Args:
            date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            llm_results (Dict, optional): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞. –ï—Å–ª–∏ None, –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞.
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        
        import logging
        logging.info(f"–ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–∞—Ç—ã {date}")
        
        try:
            print(f"\nüìä –õ–û–ö–ê–õ–¨–ù–´–ô –≠–ö–°–ü–û–†–¢ (FALLBACK) –ó–ê {date}")
            print("=" * 50)
            
            results = llm_results
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Ö –∏–∑ —Ñ–∞–π–ª–∞
            if not results:
                results_path = self.processor.results_dir / f"llm_analysis_{date.replace('-', '')}.json"
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {results_path}")
                
                if not results_path.exists():
                    logging.error(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {results_path}")
                    print(f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    print(f"   –ü—É—Ç—å: {results_path}")
                    return False
                
                try:
                    with open(results_path, 'r', encoding='utf-8') as f:
                        results = json.load(f)
                        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {len(str(results))} —Å–∏–º–≤–æ–ª–æ–≤")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
                    import traceback
                    error_traceback = traceback.format_exc()
                    logging.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏: {error_traceback}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø—É—Å—Ç—ã–µ
            if not results:
                logging.error("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç—ã")
                print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—É—Å—Ç—ã")
                return False
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            logging.info(f"–ù–∞—á–∞–ª–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date}")
            success = self.local_exporter.export_results_by_date(date, results)
            
            if success:
                export_path = self.local_exporter.export_dir.absolute()
                logging.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {export_path}")
                print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                print(f"   üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {export_path}")
                return True
            else:
                logging.error(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {date}")
                print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è")
                return False
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {date}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            import traceback
            error_traceback = traceback.format_exc()
            logging.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {error_traceback}")
            return False
            
    def _fallback_to_local_export_multiple_dates(self, start_date: str, end_date: str, results_dict: Dict[str, Dict]) -> bool:
        """üìä Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Sheets
        
        Args:
            start_date (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            results_dict (Dict[str, Dict]): –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –≥–¥–µ –∫–ª—é—á - –¥–∞—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        
        import logging
        logging.info(f"–ó–∞–ø—É—Å–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç {start_date} - {end_date}")
        
        print(f"\nüìä –õ–û–ö–ê–õ–¨–ù–´–ô –≠–ö–°–ü–û–†–¢ (FALLBACK) –ó–ê –ü–ï–†–ò–û–î {start_date} - {end_date}")
        print("=" * 60)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç —Å—Ä–∞–∑—É
            export_results = self.local_exporter.export_multiple_dates(start_date, end_date, results_dict)
            
            if not export_results:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç {start_date} - {end_date}")
                print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç")
                return False
                
            success_count = sum(1 for success in export_results.values() if success)
            total_dates = len(export_results)
            
            if success_count > 0:
                export_path = self.local_exporter.export_dir.absolute()
                logging.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_dates}. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {export_path}")
                print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} –∏–∑ {total_dates} –¥–∞—Ç")
                print(f"   üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {export_path}")
                return True
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {start_date} - {end_date}")
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã")
                return False
                
        except Exception as e:
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤ –Ω–æ–≤–æ–º –º–µ—Ç–æ–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥ (–ø–æ –æ–¥–Ω–æ–π –¥–∞—Ç–µ)
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ export_multiple_dates: {e}. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –ø–æ –æ–¥–Ω–æ–π –¥–∞—Ç–µ.")
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {e}")
            print("‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –ø–æ –æ–¥–Ω–æ–π –¥–∞—Ç–µ...")
            
            success_count = 0
            total_dates = len(results_dict)
            
            for date_str, results in results_dict.items():
                try:
                    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –ø–æ –æ–¥–Ω–æ–π –¥–∞—Ç–µ
                    success = self.local_exporter.export_results_by_date(date_str, results)
                    
                    if success:
                        success_count += 1
                        logging.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞ {date_str} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
                        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ {date_str} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
                    else:
                        logging.error(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {date_str}")
                        print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è –∑–∞ {date_str}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {date_str}: {e}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ {date_str}: {e}")
            
            if success_count > 0:
                export_path = self.local_exporter.export_dir.absolute()
                logging.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_dates}. –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {export_path}")
                print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count} –∏–∑ {total_dates} –¥–∞—Ç")
                print(f"   üìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {export_path}")
                return True
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {start_date} - {end_date}")
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã")
                return False
    
    def _print_stats(self):
        """üìä –í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        import logging
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ statistics
        if not hasattr(self.processor, 'statistics') or not self.processor.statistics:
            logging.warning("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            print("\n‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ contacts
        if not hasattr(self.processor, 'contacts'):
            self.processor.contacts = []
            
        stats = self.processor.statistics
        emails_processed = stats.get('emails_processed', 0)
        attachments_processed = stats.get('attachments_processed', 0)
        contacts_found = len(self.processor.contacts)
        processing_time = stats.get('processing_time', 0)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {emails_processed} –ø–∏—Å–µ–º, {attachments_processed} –≤–ª–æ–∂–µ–Ω–∏–π, {contacts_found} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤, {processing_time:.2f} —Å–µ–∫")
            
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
        print(f"üìß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {emails_processed}")
        print(f"üìé –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–π: {attachments_processed}")
        print(f"üë§ –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {contacts_found}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.2f} —Å–µ–∫")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ LLM
        if 'llm_stats' in stats:
            llm_stats = stats['llm_stats']
            total_requests = llm_stats.get('total_requests', 0)
            total_tokens = llm_stats.get('total_tokens', 0)
            
            logging.info(f"LLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_requests} –∑–∞–ø—Ä–æ—Å–æ–≤, {total_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"ü§ñ LLM –∑–∞–ø—Ä–æ—Å—ã: {total_requests}")
            print(f"üí∞ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {total_tokens}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            if 'cost' in llm_stats:
                cost = llm_stats['cost']
                logging.info(f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å LLM –∑–∞–ø—Ä–æ—Å–æ–≤: ${cost:.4f}")
                print(f"üí≤ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cost:.4f}")
                
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
        if 'provider' in stats:
            provider = stats['provider']
            logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
            print(f"üîå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {provider}")
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        if 'test_mode' in stats:
            test_mode = stats['test_mode']
            if test_mode:
                logging.warning("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö LLM –∑–∞–ø—Ä–æ—Å–æ–≤)")
                print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö LLM –∑–∞–ø—Ä–æ—Å–æ–≤)")
            else:
                logging.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM –∑–∞–ø—Ä–æ—Å–∞–º–∏)")
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ LLM –∑–∞–ø—Ä–æ—Å–∞–º–∏)")
                
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
        if 'model' in stats:
            model = stats['model']
            logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
            print(f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
            
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        if 'wait_time' in stats:
            wait_time = stats['wait_time']
            logging.info(f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è LLM: {wait_time:.2f} —Å–µ–∫")
            print(f"‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è LLM: {wait_time:.2f} —Å–µ–∫")

    def process_date_range(self, start_date: str, end_date: str, max_emails: int = None) -> bool:
        """üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        
        Args:
            start_date (str): –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date (str): –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            max_emails (int, optional): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ –∫–∞–∂–¥—É—é –¥–∞—Ç—É
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –¥–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        
        from datetime import datetime, timedelta
        import logging
        
        logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç: {start_date} - {end_date}")
        
        try:
            start = datetime.strptime(start_date, '%Y-%m-%d')
            end = datetime.strptime(end_date, '%Y-%m-%d')
        except ValueError:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {start_date} –∏–ª–∏ {end_date}")
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD")
            return False
        
        if start > end:
            logging.error(f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ {start_date} –±–æ–ª—å—à–µ –∫–æ–Ω–µ—á–Ω–æ–π {end_date}")
            print("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–π")
            return False
        
        print(f"\n{'='*60}")
        print(f"üîÑ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê –ü–ï–†–ò–û–î {start_date} - {end_date}")
        print(f"{'='*60}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤—Å–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        title = f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑ –¥–µ–ª–æ–≤–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ ({start_date} - {end_date})"
        try:
            sheet_id = self.exporter.create_new_spreadsheet(title)
            if sheet_id:
                self.exporter.spreadsheet_id = sheet_id
                logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {title} —Å ID: {sheet_id}")
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞: {title}")
                print(f"   ID: {sheet_id}")
            else:
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É Google Sheets")
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É")
                print("  –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
                print("  1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ service_account.json")
                print("  2. Google Drive API –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Å–æ–ª–∏ Google")
                print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
                print("  4. –ü—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ Google Drive")
                print("  –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: {e}")
            print("  –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Google Drive API –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:")
            print("  https://console.developers.google.com/apis/api/drive.googleapis.com")
            print("  –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã")
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π –¥–∞—Ç–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        current = start
        success_count = 0
        total_days = (end - start).days + 1
        logging.info(f"–í—Å–µ–≥–æ –¥–Ω–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_days}")
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –¥–∞—Ç–∞–º
        all_results = {}
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        while current <= end:
            date_str = current.strftime('%Y-%m-%d')
            logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {date_str}")
            
            print(f"\n{'*'*60}")
            print(f"üìÖ –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–¢–´: {date_str}")
            print(f"{'*'*60}")
            
            # –®–∞–≥ 1: LLM –∞–Ω–∞–ª–∏–∑
            print("\nüìÑ –®–ê–ì 1: –ê–Ω–∞–ª–∏–∑ –ø–∏—Å–µ–º –∏ –≤–ª–æ–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é LLM")
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—á—Ç—ã
                llm_results = self.processor.process_emails_by_date(date_str, max_emails=max_emails)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ _print_stats
                self.processor.statistics = llm_results.get('statistics', {})
                self.processor.contacts = llm_results.get('all_contacts', [])
                
                # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
                if llm_results and 'emails_processed' in llm_results.get('statistics', {}):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä—å
                    all_results[date_str] = llm_results
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç—ã
                    if llm_results.get('summary', {}).get('total_contacts', 0) == 0:
                        logging.warning(f"–ó–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                        print(f"‚ö†Ô∏è –ó–∞ {date_str} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
                        print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ –ø–∏—Å—å–º–∞ –∑–∞ —ç—Ç—É –¥–∞—Ç—É")
                else:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ {date_str}")
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞ {date_str}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_str}: {e}")
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç–µ
            current += timedelta(days=1)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
        if all_results:
            print("\nüìä –®–ê–ì 2: –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Google Sheets")
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É –≤ Google Sheets
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} –≤ Google Sheets")
                export_result = self.exporter.export_multiple_dates(start_date, end_date, all_results)
                
                if export_result:
                    success_count = len(all_results)
                    logging.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google Sheets")
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google Sheets")
                else:
                    logging.warning(f"–≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets –Ω–µ —É–¥–∞–ª—Å—è (–≤–µ—Ä–Ω—É–ª False), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
                    print(f"‚ö†Ô∏è –≠–∫—Å–ø–æ—Ä—Ç –≤ Google Sheets –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∞—Ç
                    if self._fallback_to_local_export_multiple_dates(start_date, end_date, all_results):
                        success_count = len(all_results)
                        logging.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
                    else:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –≤ Google Sheets, –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ")
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –≤ Google Sheets, –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets: {e}")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Google Sheets: {e}")
                print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç...")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∞—Ç
                try:
                    if self._fallback_to_local_export_multiple_dates(start_date, end_date, all_results):
                        success_count = len(all_results)
                        logging.info(f"–î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Google Sheets")
                        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date} —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ")
                    else:
                        logging.error(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Google Sheets")
                        print(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ Google Sheets")
                except Exception as local_error:
                    logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ: {local_error}")
                    print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º —ç–∫—Å–ø–æ—Ä—Ç–µ: {local_error}")
                    success_count = 0
        
        print(f"\n{'='*60}")
        print(f"üìä –ò–¢–û–ì–ò –û–ë–†–ê–ë–û–¢–ö–ò –ü–ï–†–ò–û–î–ê {start_date} - {end_date}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞—Ç: {success_count} –∏–∑ {total_days}")
        if self.exporter.spreadsheet_id:
            print(f"üîó URL —Ç–∞–±–ª–∏—Ü—ã: https://docs.google.com/spreadsheets/d/{self.exporter.spreadsheet_id}")
        print(f"{'='*60}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self._print_stats()
        
        logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {start_date} - {end_date}. –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_days}")
        return success_count > 0


def main():
    """üöÄ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    import logging
    from datetime import datetime
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_file = f"bridge_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler()
        ]
    )
    
    logging.info("="*60)
    logging.info("üîÑ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø OCR + LLM + GOOGLE SHEETS")
    logging.info("="*60)
    
    print("\n" + "="*60)
    print("üîÑ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø OCR + LLM + GOOGLE SHEETS")
    print("="*60)
    print(f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: {log_file}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–æ—Å—Ç
        bridge = LLM_Sheets_Bridge()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Sheets API
        if not bridge.exporter.client:
            logging.warning("Google Sheets API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("\n‚ùå Google Sheets API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª config/service_account.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            print("   –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Google Sheets")
            # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç–∞
            response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å LLM –æ–±—Ä–∞–±–æ—Ç–∫–æ–π? (y/n): ")
            if response.lower() != 'y':
                return
        
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:")
        print("1. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –¥–∞—Ç—É")
        print("2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
        print("3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
        print("4. –í—ã–π—Ç–∏")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-4): ")
        logging.info(f"–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {choice}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    try:
        if choice == '1':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –¥–∞—Ç—ã
            date = input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (YYYY-MM-DD): ")
            logging.info(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {date}")
            create_new = input("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É? (y/n): ").lower() == 'y'
            
            # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print("\n–°–∫–æ–ª—å–∫–æ –ø–∏—Å–µ–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?")
            print("1. –í—Å–µ –ø–∏—Å—å–º–∞")
            print("2. –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            emails_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ")
            max_emails = None
            
            if emails_choice == '2':
                try:
                    max_emails = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º: "))
                    logging.info(f"–í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {max_emails}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ –ø–∏—Å—å–º–∞.")
                    max_emails = None
            else:
                logging.info("–í—ã–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–∏—Å–µ–º")
            
            result = bridge.process_and_export(date, create_new, max_emails)
            if result:
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–∞—Ç–∞: {date}")
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                bridge._print_stats()
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞—Ç—É: {date}")
            
        elif choice == '2':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
            start_date = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (YYYY-MM-DD): ")
            end_date = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (YYYY-MM-DD): ")
            logging.info(f"–í—ã–±—Ä–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {start_date} - {end_date}")
            
            # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print("\n–°–∫–æ–ª—å–∫–æ –ø–∏—Å–µ–º –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?")
            print("1. –í—Å–µ –ø–∏—Å—å–º–∞")
            print("2. –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            emails_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ")
            max_emails = None
            
            if emails_choice == '2':
                try:
                    max_emails = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º: "))
                    logging.info(f"–í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {max_emails}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ –ø–∏—Å—å–º–∞.")
                    max_emails = None
            else:
                logging.info("–í—ã–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–∏—Å–µ–º")
            
            result = bridge.process_date_range(start_date, end_date, max_emails)
            if result:
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: {start_date} - {end_date}")
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –º–µ—Ç–æ–¥–µ process_date_range
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω: {start_date} - {end_date}")
            
        elif choice == '3':
            # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            print("\nüìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            start_date = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É (YYYY-MM-DD): ")
            end_date = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É (YYYY-MM-DD): ")
            logging.info(f"–í—ã–±—Ä–∞–Ω –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: {start_date} - {end_date}")
            
            # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            print("\n–°–∫–æ–ª—å–∫–æ –ø–∏—Å–µ–º –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?")
            print("1. –í—Å–µ –ø–∏—Å—å–º–∞")
            print("2. –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            emails_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ")
            max_emails = None
            
            if emails_choice == '2':
                try:
                    max_emails = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º: "))
                    logging.info(f"–í—ã–±—Ä–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Å–µ–º –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {max_emails}")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—Å–µ –ø–∏—Å—å–º–∞.")
                    max_emails = None
            else:
                logging.info("–í—ã–±—Ä–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ø–∏—Å–µ–º")
            
            result = bridge.process_date_range(start_date, end_date, max_emails)
            if result:
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω: {start_date} - {end_date}")
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∂–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –º–µ—Ç–æ–¥–µ process_date_range
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω: {start_date} - {end_date}")
            
        elif choice == '4':
            logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
            
        else:
            logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä: {choice}")
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return


if __name__ == '__main__':
    main()
