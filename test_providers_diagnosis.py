#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ª–∏–º–∏—Ç–∞–º–∏ –∏ —Å–±–æ—è–º–∏
"""

import json
import time
from src.llm_extractor import ContactExtractor
from datetime import datetime

def test_provider_health():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ LLM")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –±–µ–∑ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    extractor = ContactExtractor(test_mode=False)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    test_text = """–ü–∏—Å—å–º–æ –æ—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, email: ivan.petrov@example.com, 
    —Ç–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67, –∫–æ–º–ø–∞–Ω–∏—è –û–û–û –¢–µ—Å—Ç, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä."""
    
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {test_text[:50]}...")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    health_before = extractor.get_provider_health()
    print("üè• –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –î–û —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for provider, status in health_before.items():
        print(f"   {provider}: {status}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
    start_time = time.time()
    
    try:
        result = extractor.extract_contacts(test_text)
        end_time = time.time()
        
        print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {result.get('provider_used', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"üë• –ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(result.get('contacts', []))}")
        
        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        if result.get('contacts'):
            print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:")
            for i, contact in enumerate(result['contacts'], 1):
                print(f"   {i}. {contact.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')} - {contact.get('email', '–ë–µ–∑ email')}")
        
    except Exception as e:
        end_time = time.time()
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    stats = extractor.get_stats()
    for key, value in stats.items():
        if isinstance(value, dict):
            print(f"   {key}:")
            for sub_key, sub_value in value.items():
                print(f"     {sub_key}: {sub_value}")
        else:
            print(f"   {key}: {value}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞
    print("\nüè• –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –ü–û–°–õ–ï —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    health_after = extractor.get_provider_health()
    for provider, status in health_after.items():
        print(f"   {provider}: {status}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ —Ç–µ—Å—Ç–∞
        if health_before.get(provider) != status:
            print(f"     ‚ö†Ô∏è –ò–ó–ú–ï–ù–ï–ù–ò–ï: –±—ã–ª–æ {health_before.get(provider)}")
    
    return {
        'health_before': health_before,
        'health_after': health_after,
        'stats': stats,
        'test_completed': True
    }

def test_individual_providers():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("\n" + "=" * 50)
    print("üî¨ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤")
    print("=" * 50)
    
    extractor = ContactExtractor(test_mode=False)
    test_text = "–¢–µ—Å—Ç –æ—Ç test@example.com"
    
    providers_to_test = ['openrouter', 'groq', 'replicate']
    results = {}
    
    for provider in providers_to_test:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {provider}...")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        extractor.current_provider = provider
        
        try:
            start_time = time.time()
            result = extractor._make_llm_request_with_retries(
                "Extract contacts from text", 
                test_text, 
                max_retries=1
            )
            end_time = time.time()
            
            if result.get('success'):
                print(f"   ‚úÖ {provider}: –£—Å–ø–µ—à–Ω–æ ({end_time - start_time:.2f}—Å)")
                results[provider] = 'SUCCESS'
            else:
                print(f"   ‚ùå {provider}: –û—à–∏–±–∫–∞ - {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                results[provider] = f"ERROR: {result.get('error', 'Unknown')}"
                
        except Exception as e:
            print(f"   üí• {provider}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {str(e)}")
            results[provider] = f"EXCEPTION: {str(e)}"
    
    return results

if __name__ == "__main__":
    print(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    main_results = test_provider_health()
    
    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    individual_results = test_individual_providers()
    
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print("\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for provider, result in individual_results.items():
        status_emoji = "‚úÖ" if "SUCCESS" in result else "‚ùå"
        print(f"   {status_emoji} {provider}: {result}")
    
    print(f"\nüïê –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("\nüéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")