#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å Replicate API
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.llm_extractor import ContactExtractor
import json

def test_real_extraction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ë–ï–ó —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    extractor = ContactExtractor(test_mode=False)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    test_email = """
    –î–æ–±—Ä—ã–π –¥–µ–Ω—å!
    
    –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, —è –¥–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –≤ –∫–æ–º–ø–∞–Ω–∏–∏ "–¢–µ—Ö–Ω–æ–°—Ñ–µ—Ä–∞".
    –•–æ—Ç–µ–ª –±—ã –æ–±—Å—É–¥–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞.
    
    –ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:
    Email: ivan.petrov@technosphere.ru
    –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67
    
    –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
    –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤
    –î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é
    –û–û–û "–¢–µ—Ö–Ω–æ–°—Ñ–µ—Ä–∞"
    –≥. –ú–æ—Å–∫–≤–∞
    """
    
    try:
        print("üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ:")
        print(test_email[:200] + "...")
        print()
        
        print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
        result = extractor.extract_contacts(test_email)
        
        print("\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:")
        print(json.dumps(result, ensure_ascii=False, indent=2))
        
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        stats = extractor.get_stats()
        print(json.dumps(stats, ensure_ascii=False, indent=2))
        
        print("\nüè• –ó–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:")
        health = extractor.get_provider_health()
        print(json.dumps(health, ensure_ascii=False, indent=2))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        if result.get('contacts') and len(result['contacts']) > 0:
            print("\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù: –ö–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã!")
            return True
        else:
            print("\n‚ùå –¢–ï–°–¢ –ù–ï–£–°–ü–ï–®–ï–ù: –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            stats = extractor.get_stats()
            print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏ –æ—à–∏–±–∫–µ):")
            print(json.dumps(stats, ensure_ascii=False, indent=2))
        except:
            pass
            
        return False

if __name__ == "__main__":
    success = test_real_extraction()
    exit(0 if success else 1)